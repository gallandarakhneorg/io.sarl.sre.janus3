/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.naming

import io.sarl.sre.naming.AgentName
import io.sarl.sre.naming.BaseNameParser
import io.sarl.sre.naming.BehaviorName
import io.sarl.sre.naming.ContextName
import io.sarl.sre.naming.SarlName
import io.sarl.sre.naming.SkillName
import io.sarl.sre.naming.SpaceName
import io.sarl.tests.api.AbstractSarlTest
import io.sarl.tests.api.Nullable
import java.net.URI
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Suite
import org.junit.runners.Suite.SuiteClasses
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.naming.ServiceName

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@RunWith(typeof(Suite))
@SuiteClasses(#[
	typeof(BaseNameParserTest.General),
	typeof(BaseNameParserTest.Context),
	typeof(BaseNameParserTest.Space),
	typeof(BaseNameParserTest.Agent),
	typeof(BaseNameParserTest.Skill),
	typeof(BaseNameParserTest.Behavior),
	typeof(BaseNameParserTest.Service)
])

class BaseNameParserTest extends AbstractSarlTest {

	protected static val CONTEXT_ID = "2a2c6de4-8327-431b-a916-97a05caafe14"

	protected static val SPACE_ID = "bb0d92be-1730-4453-a284-bd66d31b853f"

	protected static val AGENT_ID = "a0875b30-cff3-4461-9b96-f501e6c6a788"

	protected static val SKILL_ID = typeof(CapacityMock).name

	protected static val BEHAVIOR_ID = typeof(BehaviorMock).name

	protected static val BEHAVIOR_IDX = 8
	
	protected static def createURI(value : String) : URI {
		URI::create(value)
	}

	protected static def createNormalizedURI(value : String) : URI {
		new BaseNameParser().normalize(value.createURI)
	}

	private static def toUUID(s : String) : UUID {
		UUID::fromString(s)
	}

	private static def m(index : int, e : String*) : String{
		val b = new StringBuilder
		for (elt : e) {
			if (!elt.isNullOrEmpty) {
				b.append("/").append(elt)
			}
		}
		if (index >= 0) {
			b.append("/").append(index)
		}
		return b.toString
	}

	protected static def assertValid(uri : URI, s : String, fragment : String = null, kindex : int, elements : String*) : void {
		uri.assertNotNull
		s.assertEquals(uri.scheme)
		m(kindex, elements).assertEquals(uri.path)
		if (fragment.isNullOrEmpty) {
			uri.fragment.assertNullOrEmpty
		} else {
			fragment.assertEquals(uri.fragment)
		}
		uri.host.assertNullOrEmpty
		uri.port.assertEquals(-1)
		uri.query.assertNullOrEmpty
		uri.userInfo.assertNullOrEmpty
	}

	protected static def assertValid(name : SarlName, s : String, fragment : String = null, kindex : int, elements : String*) : void {
		name.assertNotNull
		name.toURI.assertValid(s, fragment, kindex, elements)
		if (fragment.isNullOrEmpty) {
			name.fragment.assertNullOrEmpty
		} else {
			fragment.assertEquals(name.fragment)
		}
		switch (name.class) {
			case typeof(ContextName): {
				val n = name as ContextName
				elements.get(0).toUUID.assertEquals(n.contextId)
			}
			case typeof(SpaceName): {
				val n = name as SpaceName
				elements.get(0).toUUID.assertEquals(n.contextId)
				elements.get(1).toUUID.assertEquals(n.spaceId)
			}
			case typeof(AgentName): {
				val n = name as AgentName
				if (n.contextId === null) {
					1.assertEquals(elements.length)
					elements.get(0).toUUID.assertEquals(n.agentId)
					n.contextId.assertNull
					n.spaceId.assertNull
				} else if (n.spaceId === null) {
					2.assertEquals(elements.length)
					elements.get(0).toUUID.assertEquals(n.contextId)
					elements.get(1).toUUID.assertEquals(n.agentId)
					n.spaceId.assertNull
				} else {
					3.assertEquals(elements.length)
					elements.get(0).toUUID.assertEquals(n.contextId)
					elements.get(1).toUUID.assertEquals(n.spaceId)
					elements.get(2).toUUID.assertEquals(n.agentId)
				}
			}
			case typeof(SkillName): {
				val n = name as SkillName
				if (n.contextId === null) {
					2.assertEquals(elements.length)
					elements.get(0).toUUID.assertEquals(n.agentId)
					n.contextId.assertNull
					n.spaceId.assertNull
					elements.get(1).assertEquals(n.^capacity.name)
				} else if (n.spaceId === null) {
					3.assertEquals(elements.length)
					elements.get(0).toUUID.assertEquals(n.contextId)
					elements.get(1).toUUID.assertEquals(n.agentId)
					n.spaceId.assertNull
					elements.get(2).assertEquals(n.^capacity.name)
				} else {
					4.assertEquals(elements.length)
					elements.get(0).toUUID.assertEquals(n.contextId)
					elements.get(1).toUUID.assertEquals(n.spaceId)
					elements.get(2).toUUID.assertEquals(n.agentId)
					elements.get(3).assertEquals(n.^capacity.name)
				}
			}
			case typeof(BehaviorName): {
						/* 
					 * <li>{@code "behavior:[/]{0-2}agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
					 * <li>{@code "behavior:[/]{0-2}contextId/agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
					 * <li>{@code "behavior:[/]{0-2}contextId/spaceId/agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
					 */
				val n = name as BehaviorName
				if (n.contextId === null) {
					n.contextId.assertNull
					n.spaceId.assertNull
					elements.get(0).toUUID.assertEquals(n.agentId)
					elements.get(1).assertEquals(n.behaviorType.name)
					if (elements.length != 2) {
						3.assertEquals(elements.length)
						elements.get(2).assertEquals(BEHAVIOR_IDX)
					}
				} else if (n.spaceId === null) {
					elements.get(0).toUUID.assertEquals(n.contextId)
					n.spaceId.assertNull
					elements.get(1).toUUID.assertEquals(n.agentId)
					elements.get(2).assertEquals(n.behaviorType.name)
					if (elements.length != 3) {
						4.assertEquals(elements.length)
						elements.get(3).assertEquals(BEHAVIOR_IDX)
					}
				} else {
					elements.get(0).toUUID.assertEquals(n.contextId)
					elements.get(1).toUUID.assertEquals(n.spaceId)
					elements.get(2).toUUID.assertEquals(n.agentId)
					elements.get(3).assertEquals(n.behaviorType.name)
					if (elements.length != 4) {
						5.assertEquals(elements.length)
						elements.get(4).assertEquals(BEHAVIOR_IDX)
					}
				}
			}
			case typeof(ServiceName): {
				val n = name as ServiceName
				elements.get(0).assertEquals(n.serviceType.name)
			}
			default: {
				fail("Unsupported SarlName type in assertion function")
			}
		}
	}

	static class General extends AbstractSarlTest {

		@Nullable
		var parser : BaseNameParser

		@Before
		def setUp : void {
			this.parser = new BaseNameParser
		}

		def createURI(value : String) : URI {
			URI::create(value)
		}

		@Test
		def decode_String_null {
			var v : String = null
			this.parser.decode(v).assertNull
		}

		@Test
		def decode_String_empty {
			this.parser.decode("").assertNull
		}

		@Test
		def decode_String_noScheme {
			this.parser.decode("agentName").assertNull
		}

		@Test
		def decode_String_http {
			this.parser.decode("http://sarl.io").assertNull
		}

		@Test
		def normalize_URI_null {
			this.parser.normalize(null).assertNull
		}

		@Test
		def normalize_URI_empty {
			this.parser.normalize("".createURI).assertNull
		}

		@Test
		def normalize_URI_http {
			this.parser.normalize("http://sarl.io".createURI).assertNull
		}

		@Test
		def decode_URI_null {
			var v : URI = null
			this.parser.decode(v).assertNull
		}

		@Test
		def decode_URI_empty {
			this.parser.decode("".createURI).assertNull
		}

		@Test
		def decode_URL_noScheme {
			this.parser.decode("agentName".createURI).assertNull
		}

		@Test
		def decode_URI_http {
			this.parser.decode("http://sarl.io".createURI).assertNull
		}

	}

	static class Context extends AbstractSarlTest {

		@Nullable
		var parser : BaseNameParser
	
		@Before
		def setUp : void {
			this.parser = new BaseNameParser
		}

		@Test
		def decode_String_00 {
			this.parser.decode("context:").assertNull
		}

		@Test
		def decode_String_01 {
			this.parser.decode("context://" + CONTEXT_ID).assertValid("context", -1, CONTEXT_ID)
		}
	
		
		@Test
		def decode_String_02 {
			this.parser.decode("context:/" + CONTEXT_ID).assertValid("context", -1, CONTEXT_ID)
		}
	
		@Test
		def decode_String_03 {
			this.parser.decode("context:" + CONTEXT_ID).assertValid("context", -1, CONTEXT_ID)
		}
	
		@Test
		def decode_String_04 {
			this.parser.decode("context://" + CONTEXT_ID +"/component2").assertNull
		}

		@Test
		def decode_String_05 {
			this.parser.decode("context:/" + CONTEXT_ID +"/component2").assertNull
		}

		@Test
		def decode_String_06 {
			this.parser.decode("context:" + CONTEXT_ID +"/component2").assertNull
		}

		@Test
		def decode_String_fragment_00 {
			this.parser.decode("context:#frag").assertNull
		}
	
		@Test
		def decode_String_fragment_01 {
			this.parser.decode("context://" + CONTEXT_ID + "#frag").assertValid("context", "frag", -1, CONTEXT_ID)
		}
	
		@Test
		def decode_String_fragment_02 {
			this.parser.decode("context:/" + CONTEXT_ID + "#frag").assertValid("context", "frag", -1, CONTEXT_ID)
		}
	
		@Test
		def decode_String_fragment_03 {
			this.parser.decode("context:" + CONTEXT_ID + "#frag").assertValid("context", "frag", -1, CONTEXT_ID)
		}
	
		@Test
		def decode_String_fragment_04 {
			this.parser.decode("context://" + CONTEXT_ID +"/component2#frag").assertNull
		}

		@Test
		def decode_String_fragment_05 {
			this.parser.decode("context:/" + CONTEXT_ID +"/component2").assertNull
		}

		@Test
		def decode_String_fragment_06 {
			this.parser.decode("context:" + CONTEXT_ID +"/component2").assertNull
		}

		@Test
		def normalize_URI_00 {
			this.parser.normalize(("context://" + CONTEXT_ID).createURI).assertValid("context", -1, CONTEXT_ID)
		}

		@Test
		def normalize_URI_01 {
			this.parser.normalize(("context:/" + CONTEXT_ID).createURI).assertValid("context", -1, CONTEXT_ID)
		}

		@Test
		def normalize_URI_02 {
			this.parser.normalize(("context:" + CONTEXT_ID).createURI).assertValid("context", -1, CONTEXT_ID)
		}

		@Test
		def normalize_URI_03 {
			this.parser.normalize(("context://" + CONTEXT_ID +"/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_04 {
			this.parser.normalize(("context:/" + CONTEXT_ID +"/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_05 {
			this.parser.normalize(("context:" + CONTEXT_ID +"/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_00 {
			this.parser.normalize(("context://" + CONTEXT_ID + "#frag").createURI).assertValid("context", "frag", -1,
				CONTEXT_ID)
		}

		@Test
		def normalize_URI_fragment_01 {
			this.parser.normalize(("context:/" + CONTEXT_ID + "#frag").createURI).assertValid("context", "frag", -1,
				CONTEXT_ID)
		}

		@Test
		def normalize_URI_fragment_02 {
			this.parser.normalize(("context:" + CONTEXT_ID + "#frag").createURI).assertValid("context", "frag", -1,
				CONTEXT_ID)
		}

		@Test
		def normalize_URI_fragment_03 {
			this.parser.normalize(("context://" + CONTEXT_ID +"/component2#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_04 {
			this.parser.normalize(("context:/" + CONTEXT_ID +"/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_05 {
			this.parser.normalize(("context:" + CONTEXT_ID +"/component2").createURI).assertNull
		}

		@Test
		def decode_URI_00 {
			this.parser.decode(("context://" + CONTEXT_ID).createNormalizedURI).assertValid(
			"context", -1, CONTEXT_ID)
		}

		@Test
		def decode_URI_01 {
			this.parser.decode(("context:/" + CONTEXT_ID).createNormalizedURI).assertValid(
				"context", -1, CONTEXT_ID)
		}

		@Test
		def decode_URI_02 {
			this.parser.decode(("context:" + CONTEXT_ID).createNormalizedURI).assertValid(
				"context", -1, CONTEXT_ID)
		}

		@Test
		def decode_URI_03 {
			this.parser.decode(("context://" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_04 {
			this.parser.decode(("context:/" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_05 {
			this.parser.decode(("context:" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_00 {
			this.parser.decode(("context://" + CONTEXT_ID + "#frag").createNormalizedURI).assertValid(
				"context", "frag", -1, CONTEXT_ID)
		}

		@Test
		def decode_URI_fragment_01 {
			this.parser.decode(("context:/" + CONTEXT_ID + "#frag").createNormalizedURI).assertValid(
				"context", "frag", -1, CONTEXT_ID)
		}

		@Test
		def decode_URI_fragment_02 {
			this.parser.decode(("context:" + CONTEXT_ID + "#frag").createNormalizedURI).assertValid(
				"context", "frag", -1, CONTEXT_ID)
		}

		@Test
		def decode_URI_fragment_03 {
			this.parser.decode(("context://" + CONTEXT_ID +"/component2#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_04 {
			this.parser.decode(("context:/" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_05 {
			this.parser.decode(("context:" + CONTEXT_ID +"/component2").createNormalizedURI).assertNull
		}

	}

	static class Space extends AbstractSarlTest {

		@Nullable
		var parser : BaseNameParser

		@Before
		def setUp : void {
			this.parser = new BaseNameParser
		}

		@Test
		def decode_String_00 {
			this.parser.decode("space:").assertNull
		}

		@Test
		def decode_String_01 {
			this.parser.decode("space://" + CONTEXT_ID + "/" + SPACE_ID).assertValid(
				"space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_String_02 {
			this.parser.decode("space:/" + CONTEXT_ID + "/" + SPACE_ID).assertValid(
				"space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_String_03 {
			this.parser.decode("space:" + CONTEXT_ID + "/" + SPACE_ID).assertValid(
				"space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_String_04 {
			this.parser.decode("space://" + CONTEXT_ID).assertNull
		}

		@Test
		def decode_String_05 {
			this.parser.decode("space:/" + CONTEXT_ID).assertNull
		}

		@Test
		def decode_String_06 {
			this.parser.decode("space:" + CONTEXT_ID).assertNull
		}
		
		@Test
		def decode_String_07 {
			this.parser.decode("space://" + CONTEXT_ID + "/" + SPACE_ID + "/other").assertNull
		}

		@Test
		def decode_String_08 {
			this.parser.decode("space:/" + CONTEXT_ID + "/" + SPACE_ID + "/other").assertNull
		}

		@Test
		def decode_String_09 {
			this.parser.decode("space:" + CONTEXT_ID + "/" + SPACE_ID + "/other").assertNull
		}

		@Test
		def decode_String_10 {
			this.parser.decode("space:" + CONTEXT_ID + "/" + SPACE_ID + "/").assertValid(
				"space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_String_fragment_00 {
			this.parser.decode("space:#frag").assertNull
		}

		@Test
		def decode_String_fragment_01 {
			this.parser.decode("space://" + CONTEXT_ID + "/" + SPACE_ID + "#frag").assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_String_fragment_02 {
			this.parser.decode("space:/" + CONTEXT_ID + "/" + SPACE_ID + "#frag").assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_String_fragment_03 {
			this.parser.decode("space:" + CONTEXT_ID + "/" + SPACE_ID + "#frag").assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_String_fragment_04 {
			this.parser.decode("space://" + CONTEXT_ID + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_05 {
			this.parser.decode("space:/" + CONTEXT_ID + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_06 {
			this.parser.decode("space:" + CONTEXT_ID + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_07 {
			this.parser.decode("space://" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").assertNull
		}

		@Test
		def decode_String_fragment_08 {
			this.parser.decode("space:/" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").assertNull
		}

		@Test
		def decode_String_fragment_09 {
			this.parser.decode("space:" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").assertNull
		}

		@Test
		def decode_String_fragment_10 {
			this.parser.decode("space:" + CONTEXT_ID + "/" + SPACE_ID + "/#frag").assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_00 {
			this.parser.normalize(("space://" + CONTEXT_ID + "/" + SPACE_ID).createURI).assertValid("space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_01 {
			this.parser.normalize(("space:/" + CONTEXT_ID + "/" + SPACE_ID).createURI).assertValid("space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_02 {
			this.parser.normalize(("space:" + CONTEXT_ID + "/" + SPACE_ID).createURI).assertValid("space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_10 {
			this.parser.normalize(("space:" + CONTEXT_ID + "/" + SPACE_ID + "/").createURI).assertValid(
				"space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_fragment_00 {
			this.parser.normalize(("space://" + CONTEXT_ID + "/" + SPACE_ID + "#frag").createURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_fragment_01 {
			this.parser.normalize(("space:/" + CONTEXT_ID + "/" + SPACE_ID + "#frag").createURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_fragment_02 {
			this.parser.normalize(("space:" + CONTEXT_ID + "/" + SPACE_ID + "#frag").createURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def normalize_URI_fragment_03 {
			this.parser.normalize(("space://" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_04 {
			this.parser.normalize(("space:/" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_05 {
			this.parser.normalize(("space:" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_10 {
			this.parser.normalize(("space:" + CONTEXT_ID + "/" + SPACE_ID + "/#frag").createURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URL_00 {
			this.parser.decode(("space://" + CONTEXT_ID + "/" + SPACE_ID).createNormalizedURI).assertValid("space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URI_01 {
			this.parser.decode(("space:/" + CONTEXT_ID + "/" + SPACE_ID).createNormalizedURI).assertValid("space", -1,
				CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URI_02 {
			this.parser.decode(("space:" + CONTEXT_ID + "/" + SPACE_ID).createNormalizedURI).assertValid("space", -1,
				CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URI_03 {
			this.parser.decode(("space://" + CONTEXT_ID).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_04 {
			this.parser.decode(("space:/" + CONTEXT_ID).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_05 {
			this.parser.decode(("space:" + CONTEXT_ID).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_06 {
			this.parser.decode(("space://" + CONTEXT_ID + "/" + SPACE_ID + "/other").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_07 {
			this.parser.decode(("space:/" + CONTEXT_ID + "/" + SPACE_ID + "/other").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_08 {
			this.parser.decode(("space:" + CONTEXT_ID + "/" + SPACE_ID + "/other").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_09 {
			this.parser.decode(("space:" + CONTEXT_ID + "/" + SPACE_ID + "/").createNormalizedURI).assertValid(
				"space", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URI_fragment_00 {
			this.parser.decode(("space://" + CONTEXT_ID + "/" + SPACE_ID + "#frag").createNormalizedURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URI_fragment_01 {
			this.parser.decode(("space:/" + CONTEXT_ID + "/" + SPACE_ID + "#frag").createNormalizedURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URI_fragment_02 {
			this.parser.decode(("space:" + CONTEXT_ID + "/" + SPACE_ID + "#frag").createNormalizedURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

		@Test
		def decode_URI_fragment_03 {
			this.parser.decode(("space://" + CONTEXT_ID + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_04 {
			this.parser.decode(("space:/" + CONTEXT_ID + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_05 {
			this.parser.decode(("space:" + CONTEXT_ID + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_06 {
			this.parser.decode(("space://" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").createNormalizedURI).
				assertNull
		}

		@Test
		def decode_URI_fragment_07 {
			this.parser.decode(("space:/" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_08 {
			this.parser.decode(("space:" + CONTEXT_ID + "/" + SPACE_ID + "/other#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_10 {
			this.parser.decode(("space:" + CONTEXT_ID + "/" + SPACE_ID + "/#frag").createNormalizedURI).assertValid(
				"space", "frag", -1, CONTEXT_ID, SPACE_ID)
		}

	}

	static class Agent extends AbstractSarlTest {

		@Nullable
		var parser : BaseNameParser

		@Before
		def setUp : void {
			this.parser = new BaseNameParser
		}

		@Test
		def decode_String_00 {
			this.parser.decode("agent:").assertNull
		}

		@Test
		def decode_String_01 {
			this.parser.decode("agent://" + AGENT_ID).assertValid(
				"agent", -1, AGENT_ID)
		}

		@Test
		def decode_String_02 {
			this.parser.decode("agent://" + CONTEXT_ID + "/" + AGENT_ID).assertValid(
				"agent", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_String_03 {
			this.parser.decode("agent://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).assertValid(
				"agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_String_04 {
			this.parser.decode("agent:/" + AGENT_ID).assertValid(
				"agent", -1, AGENT_ID)
		}

		@Test
		def decode_String_05 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + AGENT_ID).assertValid(
				"agent", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_String_06 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).assertValid(
				"agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_String_07 {
			this.parser.decode("agent:" + AGENT_ID).assertValid(
				"agent", -1, AGENT_ID)
		}

		@Test
		def decode_String_08 {
			this.parser.decode("agent:" + CONTEXT_ID + "/" + AGENT_ID).assertValid(
				"agent",-1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_String_09 {
			this.parser.decode("agent:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).assertValid(
				"agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_String_10 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/xxx").assertNull
		}

		@Test
		def decode_String_11 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/").assertValid(
				"agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_String_fragment_00 {
			this.parser.decode("agent:#frag").assertNull
		}

		@Test
		def decode_String_fragment_01 {
			this.parser.decode("agent://" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, AGENT_ID)
		}

		@Test
		def decode_String_fragment_02 {
			this.parser.decode("agent://" + CONTEXT_ID + "/" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_String_fragment_03 {
			this.parser.decode("agent://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_String_fragment_04 {
			this.parser.decode("agent:/" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, AGENT_ID)
		}

		@Test
		def decode_String_fragment_05 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_String_fragment_06 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_String_fragment_07 {
			this.parser.decode("agent:" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, AGENT_ID)
		}

		@Test
		def decode_String_fragment_08 {
			this.parser.decode("agent:" + CONTEXT_ID + "/" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_String_fragment_09 {
			this.parser.decode("agent:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_String_fragment_10 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_11 {
			this.parser.decode("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/#frag").assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_00 {
			this.parser.normalize(("agent://" + AGENT_ID).createURI).assertValid("agent", -1, AGENT_ID)
		}

		@Test
		def normalize_URI_01 {
			this.parser.normalize(("agent://" + CONTEXT_ID + "/" + AGENT_ID).createURI).assertValid("agent", -1,
				CONTEXT_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_02 {
			this.parser.normalize(("agent://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).createURI).
				assertValid("agent", -1, CONTEXT_ID,
				SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_03 {
			this.parser.normalize(("agent:/" + AGENT_ID).createURI).assertValid("agent", -1, AGENT_ID)
		}

		@Test
		def normalize_URI_04 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + AGENT_ID).createURI).assertValid("agent", -1,
				CONTEXT_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_05 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).createURI).
				assertValid("agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_06 {
			this.parser.normalize(("agent:" + AGENT_ID).createURI).assertValid("agent", -1, AGENT_ID)
		}

		@Test
		def normalize_URI_07 {
			this.parser.normalize(("agent:" + CONTEXT_ID + "/" + AGENT_ID).createURI).assertValid(
				"agent", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_08 {
			this.parser.normalize(("agent:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).createURI).assertValid(
				"agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_09 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/xxx").createURI).
				assertNull
		}

		@Test
		def normalize_URI_10 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/").createURI).
				assertValid("agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_00 {
			this.parser.normalize(("agent://" + AGENT_ID + "#frag").createURI).assertValid("agent", "frag", -1,
				AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_01 {
			this.parser.normalize(("agent://" + CONTEXT_ID + "/" + AGENT_ID + "#frag").createURI).assertValid("agent",
				"frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_02 {
			this.parser.normalize(("agent://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").createURI).
				assertValid("agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_03 {
			this.parser.decode("agent:/" + AGENT_ID + "#frag").assertValid("agent", "frag", -1, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_04 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + AGENT_ID + "#frag").createURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_05 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").createURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_06 {
			this.parser.normalize(("agent:" + AGENT_ID + "#frag").createURI).assertValid(
				"agent", "frag", -1, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_07 {
			this.parser.normalize(("agent:" + CONTEXT_ID + "/" + AGENT_ID + "#frag").createURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_08 {
			this.parser.normalize(("agent:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").createURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def normalize_URI_fragment_09 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/xxx#frag").createURI).
				assertNull
		}

		@Test
		def normalize_URI_fragment_10 {
			this.parser.normalize(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/#frag").createURI).
				assertValid("agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_00 {
			this.parser.decode(("agent://" + AGENT_ID).createNormalizedURI).assertValid("agent", -1, AGENT_ID)
		}

		@Test
		def decode_URI_01 {
			this.parser.decode(("agent://" + CONTEXT_ID + "/" + AGENT_ID).createNormalizedURI).assertValid("agent", -1,
				CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_URI_02 {
			this.parser.decode(("agent://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).createNormalizedURI).
				assertValid("agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_03 {
			this.parser.decode(("agent:/" + AGENT_ID).createNormalizedURI).assertValid("agent", -1, AGENT_ID)
		}

		@Test
		def decode_URI_04 {
			this.parser.decode(("agent:/" + CONTEXT_ID + "/" + AGENT_ID).createNormalizedURI).assertValid("agent", -1,
				CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_URI_05 {
			this.parser.decode(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).createNormalizedURI).
				assertValid("agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_06 {
			this.parser.decode(("agent:" + AGENT_ID).createNormalizedURI).assertValid("agent", -1, AGENT_ID)
		}

		@Test
		def decode_URI_07 {
			this.parser.decode(("agent:" + CONTEXT_ID + "/" + AGENT_ID).createNormalizedURI).assertValid(
				"agent", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_URI_08 {
			this.parser.decode(("agent:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID).createNormalizedURI).
				assertValid( "agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_09 {
			this.parser.decode(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/xxx").createNormalizedURI).
				assertNull
		}

		@Test
		def decode_URI_10 {
			this.parser.decode(("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/").createNormalizedURI).
				assertValid("agent", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_00 {
			this.parser.decode(("agent://" + AGENT_ID + "#frag").createNormalizedURI).assertValid("agent", "frag", -1,
				AGENT_ID)
		}

		@Test
		def decode_URI_fragment_01 {
			this.parser.decode(("agent://" + CONTEXT_ID + "/" + AGENT_ID + "#frag").createNormalizedURI).
				assertValid("agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_02 {
			this.parser.decode(
				("agent://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").createNormalizedURI).
				assertValid("agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_03 {
			this.parser.decode(("agent:/" + AGENT_ID + "#frag").createNormalizedURI).assertValid("agent", "frag", -1,
				AGENT_ID)
		}

		@Test
		def decode_URI_fragment_04 {
			this.parser.decode(("agent:/" + CONTEXT_ID + "/" + AGENT_ID + "#frag").createNormalizedURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_05 {
			this.parser.decode(
				("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").createNormalizedURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_06 {
			this.parser.decode(("agent:" + AGENT_ID + "#frag").createNormalizedURI).assertValid(
				"agent", "frag", -1, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_07 {
			this.parser.decode(("agent:" + CONTEXT_ID + "/" + AGENT_ID + "#frag").createNormalizedURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_08 {
			this.parser.decode(("agent:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "#frag").createNormalizedURI).
				assertValid("agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

		@Test
		def decode_URI_fragment_09 {
			this.parser.decode(
				("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/xxx#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_10 {
			this.parser.decode(
				("agent:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/#frag").createNormalizedURI).assertValid(
				"agent", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID)
		}

	}

	static class Skill extends AbstractSarlTest {

		@Nullable
		var parser : BaseNameParser

		@Before
		def setUp : void {
			this.parser = new BaseNameParser
		}

		@Test
		def decode_String_00 {
			this.parser.decode("skill:").assertNull
		}

		@Test
		def decode_String_01 {
			this.parser.decode("skill://" + SKILL_ID).assertNull
		}

		@Test
		def decode_String_02 {
			this.parser.decode("skill://" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_03 {
			this.parser.decode("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_04 {
			this.parser.decode("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_05 {
			this.parser.decode("skill:/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_06 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_07 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_08 {
			this.parser.decode("skill:" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_09 {
			this.parser.decode("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_10 {
			this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_11 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx").assertNull
		}

		@Test
		def decode_String_12 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/").assertValid(
				"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_00 {
			this.parser.decode("skill:#frag").assertNull
		}

		@Test
		def decode_String_fragment_01 {
			this.parser.decode("skill://" + SKILL_ID + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_02 {
			this.parser.decode("skill://" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
				"skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_03 {
			this.parser.decode("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
				"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_04 {
			this.parser.decode("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
				"skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_05 {
			this.parser.decode("skill:/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
				"skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_06 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
				"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_07 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
				assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_08 {
			this.parser.decode("skill:" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
				"skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_09 {
			this.parser.decode("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").assertValid(
				"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_10 {
			this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
				assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_String_fragment_11 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_12 {
			this.parser.decode("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/#frag").
				assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_00 {
			this.parser.normalize(("skill://" + SKILL_ID).createURI).assertNull
		}

		@Test
		def normalize_URI_01 {
			this.parser.normalize(("skill://" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, AGENT_ID,
				SKILL_ID)
		}

		@Test
		def normalize_URI_02 {
			this.parser.normalize(("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).
				assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_03 {
			this.parser.normalize(("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid(
				"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_04 {
			this.parser.normalize(("skill:/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, AGENT_ID,
				SKILL_ID)
		}

		@Test
		def normalize_URI_05 {
			this.parser.normalize(("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, CONTEXT_ID,
				AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_06 {
			this.parser.normalize(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid(
				"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_07 {
			this.parser.normalize(("skill:" + AGENT_ID + "/" + SKILL_ID).createURI).assertValid("skill", -1, AGENT_ID,
				SKILL_ID)
		}

		@Test
		def normalize_URI_08 {
			this.parser.normalize(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).
				assertValid("skill", -1,
				CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_09 {
			this.parser.normalize(("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createURI).
				assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_10 {
			this.parser.normalize(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx").createURI).
				assertNull
		}

		@Test
		def normalize_URI_11 {
			this.parser.normalize(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/").createURI).
				assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_00 {
			this.parser.normalize(("skill://" + SKILL_ID + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_01 {
			this.parser.normalize(("skill://" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid("skill",
			"frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_02 {
			this.parser.normalize(("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid("skill",
				"frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_03 {
			this.parser.normalize(("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
				assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_04 {
			this.parser.normalize(("skill:/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid(
				"skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_05 {
			this.parser.normalize(("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
				assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_06 {
			this.parser.normalize(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
				assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_07 {
			this.parser.normalize(("skill:" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).assertValid(
				"skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_08 {
			this.parser.normalize(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createURI).
				assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def normalize_URI_fragment_09 {
			this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
				assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}


		@Test
		def normalize_URI_fragment_10 {
			this.parser.normalize(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx#frag").createURI).
				assertNull
		}

		@Test
		def normalize_URI_fragment_11 {
			this.parser.normalize(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/#frag").createURI).
				assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_00 {
			this.parser.decode(("skill://" + SKILL_ID).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_01 {
			this.parser.decode(("skill://" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).assertValid("skill", -1,
				AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_02 {
			this.parser.decode(("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
				assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_03 {
			this.parser.decode(
				("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
				assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_04 {
			this.parser.decode(("skill:/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).assertValid("skill", -1,
				AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_05 {
			this.parser.decode(("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
				assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_06 {
			this.parser.decode(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
				assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_07 {
			this.parser.decode(("skill:" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).assertValid("skill", -1,
				AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_08 {
			this.parser.decode(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID).createNormalizedURI).
				assertValid("skill", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_09 {
			this.parser.decode("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID).assertValid(
				"skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_10 {
			this.parser.decode(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx").
				createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_11 {
			this.parser.decode(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/").createNormalizedURI).
				assertValid("skill", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_00 {
			this.parser.decode(("skill://" + SKILL_ID + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_01 {
			this.parser.decode(("skill://" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).
				assertValid("skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_02 {
			this.parser.decode(
				("skill://" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).
				assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_03 {
			this.parser.decode(
				("skill://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
				createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_04 {
			this.parser.decode(("skill:/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).assertValid(
				"skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_05 {
			this.parser.decode(
				("skill:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).assertValid(
				"skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_06 {
			this.parser.decode(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
				createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_07 {
			this.parser.decode(("skill:" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).assertValid(
				"skill", "frag", -1, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_08 {
			this.parser.decode(("skill:" + CONTEXT_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").createNormalizedURI).
				assertValid("skill", "frag", -1, CONTEXT_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_09 {
			this.parser.decode(
				("skill:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "#frag").
				createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

		@Test
		def decode_URI_fragment_10 {
			this.parser.decode(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/xxx#frag").
				createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_11 {
			this.parser.decode(
				("skill:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + SKILL_ID + "/#frag").
				createNormalizedURI).assertValid("skill", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, SKILL_ID)
		}

	}

	static class Behavior extends AbstractSarlTest {

		@Nullable
		var parser : BaseNameParser

		@Before
		def setUp : void {
			this.parser = new BaseNameParser
		}

		@Test
		def decode_String_00 {
			this.parser.decode("behavior:").assertNull
		}

		@Test
		def decode_String_01 {
			this.parser.decode("behavior://" + BEHAVIOR_ID).assertNull
		}

		@Test
		def decode_String_02 {
			this.parser.decode("behavior://" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).assertNull
		}

		@Test
		def decode_String_03 {
			this.parser.decode("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID).assertValid(
				"behavior", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_04 {
			this.parser.decode("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).assertValid("behavior",
				BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_05 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).assertValid("behavior", -1,
				CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_06 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_07 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).assertValid(
				"behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_08 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_09 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx").
				assertNull
		}

		@Test
		def decode_String_10 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX + "/xxx").assertNull
		}

		@Test
		def decode_String_11 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
					BEHAVIOR_IDX).assertNull
		}

		@Test
		def decode_String_12 {
			this.parser.decode("behavior:/" + BEHAVIOR_ID).assertNull
		}

		@Test
		def decode_String_13 {
			this.parser.decode("behavior:/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).assertNull
		}

		@Test
		def decode_String_14 {
			this.parser.decode("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID).assertValid("behavior", -1, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def decode_String_15 {
			this.parser.decode("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_16 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).assertValid("behavior",
				-1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_17 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_18 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_19 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_20 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx").assertNull
		}

		@Test
		def decode_String_21 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx").assertNull
		}

		@Test
		def decode_String_22 {
			this.parser.decode(
				"behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX).assertNull
		}

		@Test
		def decode_String_23 {
			this.parser.decode("behavior:" + BEHAVIOR_ID).assertNull
		}

		@Test
		def decode_String_24 {
			this.parser.decode("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).assertNull
		}

		@Test
		def decode_String_25 {
			this.parser.decode("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID).assertValid("behavior", -1, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def decode_String_26 {
			this.parser.decode("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_27 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).assertValid("behavior",
				-1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_28 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_29 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_30 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_31 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx").assertNull
		}

		@Test
		def decode_String_32 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx").assertNull
		}

		@Test
		def decode_String_33 {
			this.parser.decode(
				"behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX).assertNull
		}

		@Test
		def decode_String_fragment_00 {
			this.parser.decode("behavior:#frag").assertNull
		}

		@Test
		def decode_String_fragment_01 {
			this.parser.decode("behavior://" + BEHAVIOR_ID + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_02 {
			this.parser.decode("behavior://" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_03 {
			this.parser.decode("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").assertValid("behavior",
				"frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_04 {
			this.parser.decode("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").
				assertValid("behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_05 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").
				assertValid("behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_06 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX
				+ "#frag").assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_07 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID
				+ "#frag").assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_08 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX + "#frag").assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_09 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_10 {
			this.parser.decode("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_11 {
			this.parser.decode(
				"behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_12 {
			this.parser.decode("behavior:/" + BEHAVIOR_ID + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_13 {
			this.parser.decode("behavior:/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_14 {
			this.parser.decode("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").assertValid("behavior",
				"frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_15 {
			this.parser.decode("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").assertValid(
				"behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_16 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").assertValid(
				"behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_17 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX
				+ "#frag").assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_18 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").
				assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_19 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX + "#frag").assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_20 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_21 {
			this.parser.decode("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_22 {
			this.parser.decode(
				"behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_23 {
			this.parser.decode("behavior:" + BEHAVIOR_ID + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_24 {
			this.parser.decode("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").assertNull
		}

		@Test
		def decode_String_fragment_25 {
			this.parser.decode("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").assertValid("behavior", "frag", -1,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_26 {
			this.parser.decode("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").assertValid(
				"behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_27 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").assertValid(
				"behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_28 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"#frag").assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_29 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").
				assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_30 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX + "#frag").assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def decode_String_fragment_31 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_32 {
			this.parser.decode("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx#frag").assertNull
		}

		@Test
		def decode_String_fragment_33 {
			this.parser.decode(
				"behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").assertNull
		}

		@Test
		def normalize_URI_00 {
			this.parser.normalize(("behavior://" + BEHAVIOR_ID).createURI).assertNull
		}

		@Test
		def normalize_URI_01 {
			this.parser.normalize(("behavior://" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).assertNull
		}

		@Test
		def normalize_URI_02 {
			this.parser.normalize(("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).assertValid("behavior", -1,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_03 {
			this.parser.normalize(("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_04 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).
				assertValid("behavior", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_05 {
			this.parser.normalize(
				("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_06 {
			this.parser.normalize(
				("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_07 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX).createURI).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_08 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx").createURI).assertNull
		}

		@Test
		def normalize_URI_09 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx").createURI).assertNull
		}

		@Test
		def normalize_URI_10 {
			this.parser.normalize((
				"behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX).createURI).assertNull
		}

		@Test
		def normalize_URI_11 {
			this.parser.normalize(("behavior:/" + BEHAVIOR_ID).createURI).assertNull
		}

		@Test
		def normalize_URI_12 {
			this.parser.normalize(("behavior:/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).assertNull
		}

		@Test
		def normalize_URI_13 {
			this.parser.normalize(("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).assertValid("behavior", -1,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_14 {
			this.parser.normalize(("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_15 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).
				assertValid("behavior", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_16 {
			this.parser.normalize(
				("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_17 {
			this.parser.normalize(
				("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_18 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX).createURI).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_19 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx").createURI).assertNull
		}

		@Test
		def normalize_URI_20 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx").createURI).assertNull
		}

		@Test
		def normalize_URI_21 {
			this.parser.normalize((
				"behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX).createURI).assertNull
		}

		@Test
		def normalize_URI_22 {
			this.parser.normalize(("behavior:" + BEHAVIOR_ID).createURI).assertNull
		}

		@Test
		def normalize_URI_23 {
			this.parser.normalize(("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).assertNull
		}

		@Test
		def normalize_URI_24 {
			this.parser.normalize(("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).assertValid("behavior", -1,
				AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_25 {
			this.parser.normalize(("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_26 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).
				assertValid("behavior", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_27 {
			this.parser.normalize(
				("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createURI).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_28 {
			this.parser.normalize(
				("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createURI).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_29 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
				BEHAVIOR_IDX).createURI).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_30 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx").createURI).assertNull
		}

		@Test
		def normalize_URI_31 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx").createURI).assertNull
		}

		@Test
		def normalize_URI_32 {
			this.parser.normalize((
				"behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX).createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_00 {
			this.parser.normalize(("behavior://" + BEHAVIOR_ID + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_01 {
			this.parser.normalize(("behavior://" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_02 {
			this.parser.normalize(("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createURI).
				assertValid("behavior", "frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_03 {
			this.parser.normalize(
				("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createURI).
				assertValid("behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_04 {
			this.parser.normalize(
				("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createURI).
				assertValid("behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_05 {
			this.parser.normalize(
				("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").
				createURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_06 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID
				+ "#frag").createURI).assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_07 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "#frag").createURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID,
				SPACE_ID,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_08 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_09 {
			this.parser.normalize(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_10 {
			this.parser.normalize((
				"behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_11 {
			this.parser.normalize(("behavior:/" + BEHAVIOR_ID + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_12 {
			this.parser.normalize(("behavior:/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_13 {
			this.parser.normalize(("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createURI).
				assertValid("behavior", "frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_14 {
			this.parser.normalize(
				("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createURI).assertValid(
				"behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_15 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createURI).
				assertValid("behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_16 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX
				+ "#frag").createURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_17 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"#frag").createURI).assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_18 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "#frag").createURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID,
				SPACE_ID,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_19 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_20 {
			this.parser.normalize(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_21 {
			this.parser.normalize((
				"behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_22 {
			this.parser.normalize(("behavior:" + BEHAVIOR_ID + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_23 {
			this.parser.normalize(("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_24 {
			this.parser.normalize(("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createURI).
				assertValid("behavior", "frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_25 {
			this.parser.normalize(
				("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createURI).assertValid(
				"behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_26 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createURI).
				assertValid(
				"behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_27 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"#frag").createURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_28 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"#frag").createURI).assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_29 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "#frag").createURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID,
				SPACE_ID,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def normalize_URI_fragment_30 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_31 {
			this.parser.normalize(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_32 {
			this.parser.normalize((
				"behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").createURI).assertNull
		}

		@Test
		def decode_URI_00 {
			this.parser.decode(("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).assertValid("behavior", -1,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_01 {
			this.parser.decode(("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createNormalizedURI).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_02 {
			this.parser.decode(("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).
				assertValid("behavior", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_03 {
			this.parser.decode(
				("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createNormalizedURI).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_04 {
			this.parser.decode(
				("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_05 {
			this.parser.decode(
				("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				createNormalizedURI).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_06 {
			this.parser.decode(("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).assertValid("behavior", -1,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_07 {
			this.parser.decode(("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createNormalizedURI).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_08 {
			this.parser.decode(("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).
				assertValid("behavior", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_09 {
			this.parser.decode(
				("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createNormalizedURI).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_10 {
			this.parser.decode(
				("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_11 {
			this.parser.decode(
				("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				createNormalizedURI).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_12 {
			this.parser.decode(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_13 {
			this.parser.decode(
				("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"/xxx").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_14 {
			this.parser.decode((
				"behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_15 {
			this.parser.decode(("behavior:" + BEHAVIOR_ID).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_16 {
			this.parser.decode(("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_17 {
			this.parser.decode(("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).assertValid("behavior", -1,
				AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_18 {
			this.parser.decode(("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createNormalizedURI).
				assertValid("behavior", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_19 {
			this.parser.decode(("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).
				assertValid("behavior", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_20 {
			this.parser.decode(
				("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).createNormalizedURI).
				assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_21 {
			this.parser.decode(
				("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID).createNormalizedURI).
				assertValid("behavior", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_22 {
			this.parser.decode(
				("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX).
				createNormalizedURI).assertValid("behavior", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_23 {
			this.parser.decode(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
				"/xxx").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_24 {
			this.parser.decode(
				("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"/xxx").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_25 {
			this.parser.decode((
				"behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX).createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_00 {
			this.parser.decode(("behavior://" + BEHAVIOR_ID + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_01 {
			this.parser.decode(("behavior://" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_02 {
			this.parser.decode(("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createNormalizedURI).
				assertValid("behavior", "frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_03 {
			this.parser.decode(
				("behavior://" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createNormalizedURI).
				assertValid("behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_04 {
			this.parser.decode(
				("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createNormalizedURI).
				assertValid("behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_05 {
			this.parser.decode(
				("behavior://" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").
				createNormalizedURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_06 {
			this.parser.decode(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
					"#frag").createNormalizedURI).assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_07 {
			this.parser.decode(
				("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "#frag").createNormalizedURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID,
				SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_08 {
			this.parser.decode(("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
					"/xxx#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_09 {
			this.parser.decode(
				("behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"/xxx#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_10 {
			this.parser.decode((
				"behavior://" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_11 {
			this.parser.decode(("behavior:/" + BEHAVIOR_ID + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_12 {
			this.parser.decode(("behavior:/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_13 {
			this.parser.decode(("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createNormalizedURI).
				assertValid("behavior", "frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_14 {
			this.parser.decode(
				("behavior:/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createNormalizedURI).assertValid(
				"behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_15 {
			this.parser.decode(("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createNormalizedURI).
				assertValid("behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_16 {
			this.parser.decode(("behavior:/" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
					"#frag").createNormalizedURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_17 {
			this.parser.decode(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
					"#frag").createNormalizedURI).assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_18 {
			this.parser.decode(
				("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"#frag").createNormalizedURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_19 {
			this.parser.decode(("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
					"/xxx#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_20 {
			this.parser.decode(
				("behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" +
					BEHAVIOR_IDX + "/xxx#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_21 {
			this.parser.decode((
				"behavior:/" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_22 {
			this.parser.decode(("behavior:" + BEHAVIOR_ID + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_23 {
			this.parser.decode(("behavior:" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_24 {
			this.parser.decode(("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createNormalizedURI).
				assertValid("behavior", "frag", -1, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_25 {
			this.parser.decode(
				("behavior:" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX + "#frag").createNormalizedURI).assertValid(
				"behavior", "frag", BEHAVIOR_IDX, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_26 {
			this.parser.decode(("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "#frag").createNormalizedURI).
				assertValid("behavior", "frag", -1, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_27 {
			this.parser.decode(("behavior:" + CONTEXT_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
					"#frag").createNormalizedURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_28 {
			this.parser.decode(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
					"#frag").createNormalizedURI).assertValid("behavior", "frag", -1, CONTEXT_ID, SPACE_ID, AGENT_ID, BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_29 {
			this.parser.decode(
				("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"#frag").createNormalizedURI).assertValid("behavior", "frag", BEHAVIOR_IDX, CONTEXT_ID, SPACE_ID, AGENT_ID,
				BEHAVIOR_ID)
		}

		@Test
		def decode_URI_fragment_30 {
			this.parser.decode(("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID +
					"/xxx#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_31 {
			this.parser.decode(
				("behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/" + BEHAVIOR_IDX +
				"/xxx#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_32 {
			this.parser.decode((
				"behavior:" + CONTEXT_ID + "/" + SPACE_ID + "/" + AGENT_ID + "/" + BEHAVIOR_ID + "/xxx/" +
				BEHAVIOR_IDX + "#frag").createNormalizedURI).assertNull
		}

	}

	static class Service extends AbstractSarlTest {

		val SERVICE_ID = typeof(LoggingService).name

		@Nullable
		var parser : BaseNameParser

		@Before
		def setUp : void {
			this.parser = new BaseNameParser
		}

		@Test
		def decode_String_00 {
			this.parser.decode("service:").assertNull
		}

		@Test
		def decode_String_01 {
			this.parser.decode("service://" + SERVICE_ID).assertValid("service", -1, SERVICE_ID)
		}

		@Test
		def decode_String_02 {
			this.parser.decode("service:/" + SERVICE_ID).assertValid("service", -1, SERVICE_ID)
		}

		@Test
		def decode_String_03 {
			this.parser.decode("service:" + SERVICE_ID).assertValid("service", -1, SERVICE_ID)
		}

		@Test
		def decode_String_04 {
			this.parser.decode("service://" + SERVICE_ID + "/component2").assertNull
		}

		@Test
		def decode_String_05 {
			this.parser.decode("service:/" + SERVICE_ID + "/component2").assertNull
		}

		@Test
		def decode_String_06 {
			this.parser.decode("service:" + SERVICE_ID + "/component2").assertNull
		}

		@Test
		def decode_String_fragment_00 {
			this.parser.decode("service:#frag").assertNull
		}

		@Test
		def decode_String_fragment_01 {
			this.parser.decode("service://" + SERVICE_ID + "#frag").assertValid("service", "frag", -1, SERVICE_ID)
		}

		@Test
		def decode_String_fragment_02 {
			this.parser.decode("service:/" + SERVICE_ID + "#frag").assertValid("service", "frag", -1, SERVICE_ID)
		}

		@Test
		def decode_String_fragment_03 {
			this.parser.decode("service:" + SERVICE_ID + "#frag").assertValid("service", "frag", -1, SERVICE_ID)
		}

		@Test
		def decode_String_fragment_04 {
			this.parser.decode("service://" + SERVICE_ID + "/component2#frag").assertNull
		}

		@Test
		def decode_String_fragment_05 {
			this.parser.decode("service:/" + SERVICE_ID + "/component2").assertNull
		}

		@Test
		def decode_String_fragment_06 {
			this.parser.decode("service:" + SERVICE_ID + "/component2").assertNull
		}

		@Test
		def normalize_URI_00 {
			this.parser.normalize(("service://" + SERVICE_ID).createURI).assertValid("service", -1, SERVICE_ID)
		}

		@Test
		def normalize_URI_01 {
			this.parser.normalize(("service:/" + SERVICE_ID).createURI).assertValid("service", -1, SERVICE_ID)
		}

		@Test
		def normalize_URI_02 {
			this.parser.normalize(("service:" + SERVICE_ID).createURI).assertValid("service", -1, SERVICE_ID)
		}

		@Test
		def normalize_URI_03 {
			this.parser.normalize(("service://" + SERVICE_ID + "/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_04 {
			this.parser.normalize(("service:/" + SERVICE_ID + "/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_05 {
			this.parser.normalize(("service:" + SERVICE_ID + "/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_00 {
			this.parser.normalize(("service://" + SERVICE_ID + "#frag").createURI).assertValid("service", "frag", -1,
				SERVICE_ID)
		}

		@Test
		def normalize_URI_fragment_01 {
			this.parser.normalize(("service:/" + SERVICE_ID + "#frag").createURI).assertValid("service", "frag",
				-1, SERVICE_ID)
		}

		@Test
		def normalize_URI_fragment_02 {
			this.parser.normalize(("service:" + SERVICE_ID + "#frag").createURI).assertValid("service", "frag", -1,
				SERVICE_ID)
		}

		@Test
		def normalize_URI_fragment_03 {
			this.parser.normalize(("service://" + SERVICE_ID + "/component2#frag").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_04 {
			this.parser.normalize(("service:/" + SERVICE_ID + "/component2").createURI).assertNull
		}

		@Test
		def normalize_URI_fragment_05 {
			this.parser.normalize(("service:" + SERVICE_ID + "/component2").createURI).assertNull
		}

		@Test
		def decode_URI_00 {
			this.parser.decode(("service://" + SERVICE_ID).createNormalizedURI).assertValid(
			"service", -1, SERVICE_ID)
		}

		@Test
		def decode_URI_01 {
			this.parser.decode(("service:/" + SERVICE_ID).createNormalizedURI).assertValid(
				"service", -1, SERVICE_ID)
		}

		@Test
		def decode_URI_02 {
			this.parser.decode(("service:" + SERVICE_ID).createNormalizedURI).assertValid(
				"service", -1, SERVICE_ID)
		}

		@Test
		def decode_URI_03 {
			this.parser.decode(("service://" + SERVICE_ID + "/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_04 {
			this.parser.decode(("service:/" + SERVICE_ID + "/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_05 {
			this.parser.decode(("service:" + SERVICE_ID + "/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_00 {
			this.parser.decode(("service://" + SERVICE_ID + "#frag").createNormalizedURI).assertValid(
				"service", "frag", -1, SERVICE_ID)
		}

		@Test
		def decode_URI_fragment_01 {
			this.parser.decode(("service:/" + SERVICE_ID + "#frag").createNormalizedURI).assertValid(
				"service", "frag", -1, SERVICE_ID)
		}

		@Test
		def decode_URI_fragment_02 {
			this.parser.decode(("service:" + SERVICE_ID + "#frag").createNormalizedURI).assertValid(
				"service", "frag", -1, SERVICE_ID)
		}

		@Test
		def decode_URI_fragment_03 {
			this.parser.decode(("service://" + SERVICE_ID + "/component2#frag").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_04 {
			this.parser.decode(("service:/" + SERVICE_ID + "/component2").createNormalizedURI).assertNull
		}

		@Test
		def decode_URI_fragment_05 {
			this.parser.decode(("service:" + SERVICE_ID + "/component2").createNormalizedURI).assertNull
		}

	}

}
