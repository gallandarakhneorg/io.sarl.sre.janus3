/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.bic

import io.sarl.lang.core.Agent
import io.sarl.lang.scoping.batch.SARLTimeExtensions
import io.sarl.sre.services.time.TimeService
import io.sarl.sre.skills.bic.TimeSkill
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import java.util.concurrent.TimeUnit
import org.junit.Before
import org.junit.Test

import static org.mockito.ArgumentMatchers.any
import static org.mockito.Mockito.when

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class TimeSkillTest extends AbstractSreTest {

	@Nullable
	var service : TimeService

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : TimeSkill

	@Before
	def setUp : void {
		this.service = typeof(TimeService).mock
		when(this.service.getTime(any)).thenAnswer [
			var tu = it.getArgument(0) as TimeUnit
			if (tu === null) {
				tu = TimeUnit::SECONDS
			}
			return SARLTimeExtensions::convertFromTo(1234, TimeUnit::MILLISECONDS, tu)
		]
		when(this.service.OSTimeFactor).thenReturn(5678.0)
		this.^agent = typeof(Agent).mock
		this.^skill = new TimeSkill(this.^agent)
		this.^skill.timeService = this.service
	}
	
	@Test
	def getTime {
		assertEpsilonEquals(1.234, this.^skill.time)
	}

	@Test
	def getTimeTimeUnit_null {
		assertEpsilonEquals(1.234, this.^skill.getTime(null))
	}

	@Test
	def getTimeTimeUnit_seconds {
		assertEpsilonEquals(1.234, this.^skill.getTime(TimeUnit::SECONDS))
	}

	@Test
	def getTimeTimeUnit_millis {
		assertEpsilonEquals(1234.0, this.^skill.getTime(TimeUnit::MILLISECONDS))
	}

	@Test
	def getOSTimeFactor {
		assertEpsilonEquals(5678.0, this.^skill.OSTimeFactor)
	}

}
