/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.context

import com.google.inject.Injector
import io.bootique.config.ConfigurationFactory
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.sre.boot.factories.ExecutorFactory
import io.sarl.sre.services.context.SpaceRepository
import io.sarl.sre.services.context.SpaceRepository.SpaceDescription
import io.sarl.sre.services.context.SpaceRepositoryListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.ManualMocking
import io.sarl.tests.api.Nullable
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import io.sarl.util.RestrictedAccessEventSpace
import io.sarl.util.RestrictedAccessEventSpaceSpecification
import java.util.Map
import java.util.UUID
import org.arakhne.afc.util.IntegerList
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor
import org.mockito.Mock

import static org.junit.Assert.assertFalse
import static org.junit.Assert.assertNotNull
import static org.junit.Assert.assertNull
import static org.junit.Assert.assertSame
import static org.junit.Assert.assertTrue
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.verify
import static org.mockito.Mockito.verifyNoMoreInteractions
import static org.mockito.Mockito.when

import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.MockitoAnnotations.initMocks

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ManualMocking
abstract class AbstractSpaceRepositoryTest<T extends SpaceRepository> extends AbstractSreTest {

	@Nullable
	protected var injector : Injector

	@Mock
	protected var executor : ExecutorService
	
	@Nullable
	protected var configurationFactory : ConfigurationFactory

	@Nullable
	protected var executorFactory : ExecutorFactory 
	
	@Nullable
	protected var internalStructure : Map<UUID, SpaceDescription> 
	
	@Nullable
	protected var repository : T 

	@Before
	def setUp : void {
		this.injector = typeof(Injector).mock
		this.configurationFactory = typeof(ConfigurationFactory).mock
		this.executorFactory = typeof(ExecutorFactory).mock
		when(this.configurationFactory.config(typeof(Class).any, typeof(String).any)).thenReturn(this.executorFactory)
		this.initMocks
		this.internalStructure = newInternalStructure
		this.repository = newSpaceRepository
	}

	protected abstract def newInternalStructure : Map<UUID, SpaceDescription>

	protected abstract def newSpaceRepository : T

	/** Fill the repository with three spaces for testing.
	 *
	 * @return the added descriptions.
	 */
	protected def fillRepository : SpaceDescription[] {
		var ^space : Space

		var contextId = UUID::randomUUID
		var id1 = UUID::randomUUID
		var sid = new SpaceID(contextId, id1, typeof(OpenEventSpaceSpecification))
		^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var desc1 = new SpaceDescription(sid, ^space)
		this.internalStructure.put(id1, desc1)

		var id2 = UUID::randomUUID
		sid = new SpaceID(contextId, id2, typeof(OpenEventSpaceSpecification))
		^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var desc2 = new SpaceDescription(sid, ^space)
		this.internalStructure.put(id2, desc2)
		
		var id3 = UUID::randomUUID
		sid = new SpaceID(contextId, id3, typeof(RestrictedAccessEventSpaceSpecification))
		^space = typeof(RestrictedAccessEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var desc3 = new SpaceDescription(sid, ^space)
		this.internalStructure.put(id3, desc3)
		
		this.repository.refreshInternalStructures

		if ((id1 <=> id2) <= 0 && (id1 <=> id3) <= 0) {
			if ((id2 <=> id3) <= 0) {
				return #{desc1, desc2, desc3}
			} else {
				return #{desc1, desc3, desc2}
			}
		} else if ((id2 <=> id1) <= 0 && (id2 <=> id3) <= 0) {
			if ((id1 <=> id3) <= 0) {
				return #{desc2, desc1, desc3}
			} else {
				return #{desc2, desc3, desc1}
			}
		} else {
			if ((id1 <=> id2) <= 0) {
				return #{desc3, desc1, desc2}
			} else {
				return #{desc3, desc2, desc1}
			}
		}
	}
	
	@Test
	def getSpaces_0 {
		var spaces = this.repository.spaces
		assertNotNull(spaces)
		assertFalse(spaces.iterator.hasNext)
	}

	@Test
	def getSpaces_1 {
		var expectedDescs = fillRepository
		var spaces = this.repository.spaces
		assertNotNull(spaces)
		var iterator = spaces.iterator
		var ^space = iterator.next
		assertEquals(expectedDescs.get(0).spaceID, ^space.spaceID)
		^space = iterator.next
		assertEquals(expectedDescs.get(1).spaceID, ^space.spaceID)
		^space = iterator.next
		assertEquals(expectedDescs.get(2).spaceID, ^space.spaceID)
		assertFalse(iterator.hasNext)
	}

	@Test
	def getSpacesClass_0 {
		var spaces = this.repository.getSpaces(typeof(OpenEventSpaceSpecification))
		assertNotNull(spaces)
		assertFalse(spaces.iterator.hasNext)
	}

	@Test
	def getSpacesClass_1 {
		var expectedDescs = fillRepository
		var indexes = new IntegerList
		for (var i = 0; i < expectedDescs.length; i++) {
			var desc = expectedDescs.get(i)
			if (desc.^space instanceof OpenEventSpace) {
				indexes.add(i)
			}
		}
		var spaces = this.repository.getSpaces(typeof(OpenEventSpaceSpecification))
		assertNotNull(spaces)
		var iterator = spaces.iterator
		while (!indexes.empty && iterator.hasNext) {
			var ^space = iterator.next
			assertInstanceOf(typeof(OpenEventSpace), ^space)
			var idx = -1
			for (var i = 0; idx == -1 && i < expectedDescs.length; i++) {
				var desc = expectedDescs.get(i)
				if (desc.spaceID == ^space.spaceID) {
					idx = i
				}
			}
			assertTrue(indexes.contains(idx))
			indexes.remove(idx as Object)
		}
		assertFalse(iterator.hasNext)
		assertTrue(indexes.empty)
	}

	@Test
	def getSpace_0 {
		var contextId = UUID::randomUUID
		var id1 = UUID::randomUUID
		var sid = new SpaceID(contextId, id1, typeof(OpenEventSpaceSpecification))
		assertNull(this.repository.getSpace(sid))
	}

	@Test
	def getSpace_1 {
		var expectedDescs = fillRepository()
		for (desc : expectedDescs) {
			var ^space = this.repository.getSpace(desc.spaceID)
			assertNotNull(^space)
			assertEquals(desc.spaceID, ^space.spaceID)
			assertSame(desc.^space, ^space)
		}
		var contextId = UUID::randomUUID
		var id1 = UUID::randomUUID
		var sid = new SpaceID(contextId, id1, typeof(OpenEventSpaceSpecification))
		assertNull(this.repository.getSpace(sid))
	}

	@Test
	def createSpace {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))

		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(any, any)).thenReturn(^space)
		var classType : Class<OpenEventSpaceSpecification> = any
		when(this.injector.getInstance(classType)).thenReturn(specification)

		var createdSpace = this.repository.createSpace(sid, typeof(OpenEventSpaceSpecification))
		
		assertSame(^space, createdSpace)
		var space2 = this.repository.getSpace(sid)
		assertSame(^space, space2)
	}

	@Test
	def removeSpace_0 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(Space).mock
		when(^space.spaceID).thenReturn(sid)
		this.repository.removeSpace(^space)
		var space2 = this.repository.getSpace(sid)
		assertNull(space2)
	}

	@Test
	def removeSpace_1 {
		var expectedDescs = fillRepository
		for (desc : expectedDescs) {
			this.repository.removeSpace(desc.^space)
			var ^space = this.repository.getSpace(desc.spaceID)
			assertNull(^space)
		}
	}

	@Test
	def getOrCreateSpaceWithSpec_0 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))

		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(any, any)).thenReturn(^space)
		var classType : Class<OpenEventSpaceSpecification> = any
		when(this.injector.getInstance(classType)).thenReturn(specification)

		var createdSpace = this.repository.getOrCreateSpaceWithSpec(sid, typeof(OpenEventSpaceSpecification))
		
		assertSame(^space, createdSpace)
		var space2 = this.repository.getSpace(sid)
		assertSame(^space, space2)
	}

	@Test
	def getOrCreateSpaceWithSpec_1 {
		var expectedDescs = fillRepository
		for (desc : expectedDescs) {
			var createdSpace = this.repository.getOrCreateSpaceWithSpec(
					desc.spaceID, desc.spaceID.getSpaceSpecification as Class)
			assertNotNull(createdSpace)
			assertEquals(desc.spaceID.spaceSpecification, createdSpace.spaceID.spaceSpecification)
		}
	}

	@Test
	def getOrCreateSpaceWithID_0 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))

		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(any, any)).thenReturn(^space)
		var classType : Class<OpenEventSpaceSpecification> = any
		when(this.injector.getInstance(classType)).thenReturn(specification)

		var createdSpace = this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		assertSame(^space, createdSpace)
		var space2 = this.repository.getSpace(sid)
		assertSame(^space, space2)
	}

	@Test
	def getOrCreateSpaceWithID_1 {
		var expectedDescs = fillRepository
		for (desc : expectedDescs) {
			var createdSpace = this.repository.getOrCreateSpaceWithID(
					desc.spaceID, desc.spaceID.getSpaceSpecification() as Class)
			assertSame(desc.^space, createdSpace)
		}
	}

	@Test
	def addSpaceRepositoryListener_0 {
		var listener = typeof(SpaceRepositoryListener).mock
		this.repository.addSpaceRepositoryListener(listener)
		
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(any, any)).thenReturn(^space)
		var classType : Class<OpenEventSpaceSpecification> = any
		when(this.injector.getInstance(classType)).thenReturn(specification)
		var createdSpace = this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		var spaceArg = ArgumentCaptor::forClass(typeof(Space))
		var creationArg = ArgumentCaptor::forClass(typeof(Boolean))
		verify(listener).spaceCreated(spaceArg.capture, creationArg.capture)
		assertSame(^space, createdSpace)
		assertSame(^space, spaceArg.value)
		assertTrue(creationArg.value)
	}

	@Test
	def addSpaceRepositoryListener_1 {
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(any, any)).thenReturn(^space)
		var classType : Class<OpenEventSpaceSpecification> = any
		when(this.injector.getInstance(classType)).thenReturn(specification)
		this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		var listener = typeof(SpaceRepositoryListener).mock
		this.repository.addSpaceRepositoryListener(listener)
		
		this.repository.removeSpace(^space)

		var spaceArg = ArgumentCaptor::forClass(typeof(Space))
		var destroyArg = ArgumentCaptor::forClass(typeof(Boolean))
		verify(listener).spaceDestroyed(spaceArg.capture, destroyArg.capture)
		assertSame(^space, spaceArg.value)
		assertTrue(destroyArg.value)
	}

	@Test
	def removeSpaceRepositoryListener {
		var listener = typeof(SpaceRepositoryListener).mock
		this.repository.addSpaceRepositoryListener(listener)
		
		var contextId = UUID::randomUUID
		var id = UUID::randomUUID
		var sid = new SpaceID(contextId, id, typeof(OpenEventSpaceSpecification))
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(sid)
		var specification = typeof(OpenEventSpaceSpecification).mock
		when(specification.create(any, any)).thenReturn(^space)
		var classType : Class<OpenEventSpaceSpecification> = any
		when(this.injector.getInstance(classType)).thenReturn(specification)

		this.repository.removeSpaceRepositoryListener(listener)
		
		this.repository.getOrCreateSpaceWithID(sid, typeof(OpenEventSpaceSpecification))
		
		verifyNoMoreInteractions(listener)
	}

}
