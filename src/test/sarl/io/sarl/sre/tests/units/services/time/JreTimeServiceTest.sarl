/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.time

import io.sarl.sre.services.time.JreTimeService
import io.sarl.sre.services.time.TimeListener
import io.sarl.sre.services.time.TimeService
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import java.util.concurrent.TimeUnit
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.mockito.Mockito.verifyZeroInteractions

import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class JreTimeServiceTest extends AbstractSreTest {

	@Nullable
	var service : JreTimeService
	
	@Nullable
	var listener : TimeListener

	@Before
	def setUp : void {
		this.listener = typeof(TimeListener).mock
		this.service = new MyTimeService
		this.service.addTimeListener(this.listener);
	}

	@Test
	def getTime {
		assertEpsilonEquals(0.025, this.service.getTime(TimeUnit::MINUTES))
		assertEpsilonEquals(1.5, this.service.getTime(TimeUnit::SECONDS))
		assertEpsilonEquals(1500.0, this.service.getTime(TimeUnit::MILLISECONDS))
		verifyZeroInteractions(this.listener)
	}

	@Test
	def getOSTimeFactor {
		assertEpsilonEquals(1.0, this.service.OSTimeFactor)
		verifyZeroInteractions(this.listener)
	}

	@Test
	def evolveTimeIfPossible {
		this.service.evolveTimeIfPossible(15)
		
		var serviceCaptor = ArgumentCaptor::forClass(typeof(TimeService))
		this.listener.verify.timeChanged(serviceCaptor.capture)
		assertSame(this.service, serviceCaptor.value)
	}

	private static class MyTimeService extends JreTimeService {
		def getOSCurrentTime : long {
			1500
		}
	}

}
