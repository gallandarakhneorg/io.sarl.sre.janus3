/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.naming

import io.sarl.sre.naming.SarlName
import io.sarl.tests.api.AbstractSarlTest
import io.sarl.tests.api.Nullable
import java.net.URI
import org.junit.Before
import org.junit.Test
import io.sarl.sre.naming.NameScheme

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SarlNameTest extends AbstractSarlTest {

	@Nullable
	var uri : URI

	@Nullable
	var name : SarlName

	@Before
	def setUp : void {
		this.uri = URI::create("space://0001/0001#fragment")
		this.name = (new SarlName(this.uri) {
		}).spy
	}

	@Test
	def compareTo_equal {
		var uri2 = URI::create("space://0001/0001#fragment")
		var name2 = new SarlName(uri2) {
		}
		this.name.compareTo(name2).assertZero
	}

	@Test
	def compareTo_lower {
		var uri2 = URI::create("space://0001/0002#fragment")
		var name2 = new SarlName(uri2) {
		}
		this.name.compareTo(name2).assertStrictlyNegative
	}

	@Test
	def compareTo_greater {
		var uri2 = URI::create("space://0001/0000#fragment")
		var name2 = new SarlName(uri2) {
		}
		this.name.compareTo(name2).assertStrictlyPositive
	}

	@Test
	def toURI {
		this.uri.assertSame(this.name.toURI)
	}

	@Test
	def getFragment {
		this.uri.fragment.assertSame(this.name.getFragment)
	}

	@Test
	def hasFragment {
		this.name.hasFragment.assertTrue
	}

	@Test
	def getScheme {
		NameScheme::SPACE.assertSame(this.name.scheme)
	}

}