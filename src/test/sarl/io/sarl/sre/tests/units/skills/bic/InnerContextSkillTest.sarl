/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.bic

import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.skills.bic.InnerContextAccessSkill
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.units.skills.bic.mocks.MyAgent0
import io.sarl.tests.api.ManualMocking
import io.sarl.tests.api.Nullable
import io.sarl.util.concurrent.Collections3
import io.sarl.util.concurrent.NoReadWriteLock
import java.util.Collections
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.junit.Assume.assumeNotNull
import static org.mockito.ArgumentMatchers.any
import static org.mockito.Mockito.only
import static org.mockito.Mockito.when

import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ManualMocking
class InnerContextSkillTest extends AbstractSreTest {

	@Nullable
	var service : ContextService
	
	@Nullable
	var parentID : UUID
	
	@Nullable
	var innerSpaceID : SpaceID

	@Nullable
	var context : Context

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : InnerContextAccessSkill

	@Before
	def setUp : void {
		this.parentID = UUID::randomUUID
		this.innerSpaceID = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		this.service = typeof(ContextService).mock
		this.context = typeof(Context).mock
		when(this.context.ID).thenReturn(UUID::randomUUID)
		this.^agent = spy(new MyAgent0(this.context.ID, this.parentID))
		var defaultSpaceID = new SpaceID(this.context.ID, this.parentID, typeof(OpenEventSpaceSpecification))
		var defaultAdr = typeof(Address).mock
		when(defaultAdr.spaceID).thenReturn(defaultSpaceID)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(this.context, defaultAdr)
		this.^skill = new InnerContextAccessSkill(this.service)[NoReadWriteLock::SINGLETON]
		this.reflect.invoke(this.^skill, "setOwner", this.^agent)
	}

	@Test
	def getInnerContext_init : void {
		var ctx = typeof(Context).mock
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		
		var context = this.^skill.innerContext
		
		assertSame(ctx, context)
		
		var listener = ArgumentCaptor::forClass(typeof(EventListener))
		^space.verify(only).register(listener.capture)
		assertNotNull(listener.value)

		this.service.verify(only).createContext(any, any, any(typeof(Agent)))
	}
	
	@Test
	def getInnerContext_twoCalls : void {
		var ctx = typeof(Context).mock
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		
		var context1 = this.^skill.getInnerContext
		var context2 = this.^skill.getInnerContext
		
		assertSame(ctx, context1)
		assertSame(ctx, context2)
		
		var listener = ArgumentCaptor::forClass(typeof(EventListener))
		^space.verify(only).register(listener.capture)
		assertNotNull(listener.value)

		this.service.verify(only).createContext(any, any, any(typeof(Agent)))
	}

	private def forceInnerContextCreation : Context {
		assumeNotNull(this.context, this.innerSpaceID, this.parentID, this.service, this.^skill, this.^agent)
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(this.innerSpaceID)
		var ctx = typeof(Context).mock
		when(ctx.ID).thenReturn(this.parentID)
		when(ctx.defaultSpace).thenReturn(^space)
		when(this.service.createContext(any, any, any(typeof(Agent)))).thenReturn(ctx)
		return this.^skill.getInnerContext as Context
	}
	
	@Test
	def isInnerDefaultSpaceUUID_noInnerContextInstance {
		assertFalse(this.^skill.isInnerDefaultSpace(UUID::randomUUID))
	}

	@Test
	def isInnerDefaultSpaceUUID_withInnerContextInstance {
		var innerSpaceID = forceInnerContextCreation.defaultSpace.spaceID
		
		assertTrue(this.^skill.isInnerDefaultSpace(innerSpaceID.ID))
		assertFalse(this.^skill.isInnerDefaultSpace(UUID::randomUUID))
	}

	@Test
	def isInnerDefaultSpaceSpaceID_noInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		assertFalse(this.^skill.isInnerDefaultSpace(otherId))
	}

	@Test
	def isInnerDefaultSpaceSpaceID_withInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		forceInnerContextCreation
		
		assertTrue(this.^skill.isInnerDefaultSpace(this.innerSpaceID))
		assertFalse(this.^skill.isInnerDefaultSpace(otherId))
	}

	@Test
	def isInnerDefaultSpaceSpace_noInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		assertFalse(this.^skill.isInnerDefaultSpace(otherId))
	}

	@Test
	def isInnerDefaultSpaceSpace_withInnerContextInstance {
		var innerContext = forceInnerContextCreation
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var otherSpace = typeof(Space).mock
		when(otherSpace.spaceID).thenReturn(otherId)
		
		assertTrue(this.^skill.isInnerDefaultSpace(innerContext.defaultSpace))
		assertFalse(this.^skill.isInnerDefaultSpace(otherSpace))
	}

	@Test
	def isInInnerDefaultSpace_noInnerContextInstance {
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var adr = typeof(Address).mock
		when(adr.spaceID).thenReturn(otherId)
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(adr)
		assertFalse(this.^skill.isInInnerDefaultSpace(^event))
	}

	@Test
	def isInInnerDefaultSpace_withInnerContextInstance {
		var innerContext = forceInnerContextCreation
		var otherId = new SpaceID(this.parentID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		
		var adr1 = new Address(innerContext.defaultSpace.spaceID, UUID::randomUUID)
		var event1 = typeof(Event).mock
		when(event1.source).thenReturn(adr1)
		
		var adr2 = new Address(otherId, UUID::randomUUID)
		var event2 = typeof(Event).mock
		when(event2.source).thenReturn(adr2)
		
		assertTrue(this.^skill.isInInnerDefaultSpace(event1))
		assertFalse(this.^skill.isInInnerDefaultSpace(event2))
	}

	@Test
	def getMemberAgentCount_noInnerContextInstance {
		assertEquals(0, this.^skill.memberAgentCount)
	}

	@Test
	def getMemberAgentCount_withInnerContextInstance_noAgent {
		var innerContext = forceInnerContextCreation
		when(innerContext.defaultSpace.participants).thenReturn(
				Collections3.synchronizedSet(#{this.parentID}, NoReadWriteLock.SINGLETON))
		assertEquals(0, this.^skill.memberAgentCount)
	}

	@Test
	def getMemberAgentCount_withInnerContextInstance_twoAgents {
		var innerContext = forceInnerContextCreation
		var id1 = UUID::randomUUID
		var id2 = UUID::randomUUID
		var ids = newHashSet(#[this.parentID, id1, id2])
		when(innerContext.defaultSpace.participants).thenReturn(
				Collections3.unmodifiableSynchronizedSet(ids, NoReadWriteLock.SINGLETON))
		assertEquals(2, this.^skill.memberAgentCount)
	}

	@Test
	def getMemberAgents_noInnerContextInstance {
		assertFalse(this.^skill.memberAgents.iterator.hasNext)
	}

	@Test
	def getMemberAgents_withInnerContextInstance_noAgent {
		var innerContext = forceInnerContextCreation
		when(innerContext.defaultSpace.participants).thenReturn(
				Collections3.synchronizedSet(Collections.singleton(this.parentID), NoReadWriteLock.SINGLETON))
		assertFalse(this.^skill.memberAgents.iterator.hasNext)
	}

	@Test
	def getMemberAgents_withInnerContextInstance_twoAgents {
		var innerContext = forceInnerContextCreation
		var id1 = UUID::randomUUID
		var id2 = UUID::randomUUID
		var ids = newHashSet(#[this.parentID, id1, id2])
		when(innerContext.defaultSpace.participants).thenReturn(
				Collections3.unmodifiableSynchronizedSet(ids, NoReadWriteLock.SINGLETON))
		var actual = this.^skill.memberAgents
		assertContains(actual, id1, id2)
	}

	@Test
	def hasMemberAgent_noInnerContextInstance {
		assertFalse(this.^skill.hasMemberAgent)
	}

	@Test
	def hasMemberAgent_withInnerContextInstance_noAgent {
		var innerContext = forceInnerContextCreation
		when(innerContext.defaultSpace.participants).thenReturn(
				Collections3.synchronizedSet(Collections.singleton(this.parentID), NoReadWriteLock.SINGLETON))
		assertFalse(this.^skill.hasMemberAgent)
	}

	@Test
	def hasMemberAgent_withInnerContextInstance_twoAgents {
		var innerContext = forceInnerContextCreation
		var id1 = UUID::randomUUID
		var id2 = UUID::randomUUID
		var ids = newHashSet(#[this.parentID, id1, id2])
		when(innerContext.defaultSpace.participants).thenReturn(
				Collections3.unmodifiableSynchronizedSet(ids, NoReadWriteLock.SINGLETON))
		assertTrue(this.^skill.hasMemberAgent)
	}

}
