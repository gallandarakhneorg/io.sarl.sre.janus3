/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.boot;

import com.google.inject.Injector
import io.bootique.BQRuntime
import io.bootique.Bootique
import io.bootique.config.ConfigurationFactory
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.sre.Kernel
import io.sarl.sre.boot.ProgrammaticBootstrap
import io.sarl.sre.boot.factories.BootFactory
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.testutils.IddleTestingAgent
import io.sarl.sre.tests.testutils.ModuleMock
import io.sarl.tests.api.Nullable
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.junit.Assert.*

import static extension org.mockito.ArgumentMatchers.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("all")
class ProgrammaticBootstrapTest extends AbstractSreTest {

	@Nullable
	var bootstrap : ProgrammaticBootstrap
	
	@Nullable
	var kernel : Kernel
	
	@Nullable
	var bootique : Bootique

	@Nullable
	var runtime : BQRuntime

	@Nullable
	var rootContext : AgentContext

	@Nullable
	var id0 : UUID

	@Nullable
	var configurationFactory : ConfigurationFactory

	@Nullable
	var bootFactory : BootFactory

	@Nullable
	var injector : Injector

	private def createConfiguration(bootAgent : Class<? extends Agent>) {
		this.bootFactory = new BootFactory
		this.bootFactory.bootAgent = bootAgent.name
		this.bootFactory.commandLineArgs = #[ typeof(IddleTestingAgent).name, "a" ]
		this.bootFactory = spy(this.bootFactory);
		when(this.configurationFactory.config(typeof(Class).any, typeof(String).any)).thenReturn(this.bootFactory)
	}
	
	private def createBootiqueMock {
		this.id0 = UUID::randomUUID
		this.configurationFactory = typeof(ConfigurationFactory).mock
		this.rootContext = typeof(AgentContext).mock
		this.kernel = typeof(Kernel).mock
		when(this.kernel.rootContext).thenReturn(this.rootContext)
		when(this.kernel.getService(typeof(Class).any)).thenReturn(typeof(LifecycleService).mock)
		when(this.kernel.spawn(typeof(Class).mock, typeof(Object).mock)).thenReturn(this.id0)
		when(this.kernel.spawn(anyInt, typeof(Class).any, typeof(Object).any)).thenReturn(#[this.id0])
		this.injector = typeof(Injector).mock
		when(this.injector.getInstance(typeof(Class)).any).thenAnswer [
			val type : Class<?> = it.getArgument(0)
			if (typeof(Kernel) == type) {
				return this.kernel
			}
			if (typeof(ConfigurationFactory) == type) {
				return this.configurationFactory
			}
			throw new IllegalStateException(type.name)
		]
		this.runtime = typeof(BQRuntime).mock
		when(this.runtime.getInstance(typeof(Class).any)).thenAnswer [
			val type : Class<?> = it.getArgument(0)
			if (typeof(Kernel) == type) {
				return this.kernel
			}
			if (typeof(ConfigurationFactory) == type) {
				return this.configurationFactory
			}
			if (typeof(BootFactory) == type) {
				return this.bootFactory
			}
			if (typeof(Injector) == type) {
				return this.injector
			}
			throw new IllegalStateException(type.name)
		]
		this.bootique = typeof(Bootique).mock
		when(this.bootique.module(typeof(Class).any)).thenReturn(this.bootique)
		when(this.bootique.autoLoadModules).thenReturn(this.bootique)
		when(this.bootique.createRuntime).thenReturn(this.runtime)
	}

	@Before
	def setUp {
		this.bootstrap = new ProgrammaticBootstrap
	}

	@Test
	def getKernel_start0 {
		assertNull(this.bootstrap.kernel)
	}

	@Test
	def getKernel_start1 {
		createBootiqueMock
		this.bootstrap.startWithoutAgent(this.bootique)
		assertSame(this.kernel, this.bootstrap.kernel)
	}

	@Test
	def getRuntime_start0 {
		assertNull(this.bootstrap.runtime)
	}

	@Test
	def getRuntime_start1 {
		createBootiqueMock
		this.bootstrap.startWithoutAgent(this.bootique)
		assertSame(this.runtime, this.bootstrap.runtime)
	}

	@Test
	def getBootAgentIdentifier_start0 {
		assertNull(this.bootstrap.bootAgentIdentifier)
	}

	@Test
	def getBootAgentIdentifier_start1 {
		createBootiqueMock
		this.bootstrap.startWithoutAgent(this.bootique)
		assertNull(this.bootstrap.bootAgentIdentifier)
	}

	@Test
	def startAgentClassObjectArray {
		createBootiqueMock
		createConfiguration(typeof(IddleTestingAgent))
		this.bootstrap.startWithoutAgent(this.bootique)
		var id = this.bootstrap.startAgent(typeof(IddleTestingAgent), "a")
		assertEquals(this.id0, id)
		var arg0 = ArgumentCaptor::forClass(typeof(Class))
		var arg1 = ArgumentCaptor::forClass(typeof(Object[]))
		this.kernel.verify.spawn(arg0.capture, arg1.capture)
		assertEquals(typeof(IddleTestingAgent), arg0.value)
		assertEquals("a", arg1.allValues.get(0))
		assertEquals(this.id0, this.bootstrap.bootAgentIdentifier)
	}

	@Test
	def startAgentIntClassObjectArray {
		createBootiqueMock
		createConfiguration(typeof(IddleTestingAgent))
		this.bootstrap.startWithoutAgent(this.bootique)
		var id = this.bootstrap.startAgent(1, typeof(IddleTestingAgent), "a")
		var iterator = id.iterator
		assertEquals(this.id0, iterator.next)
		assertFalse(iterator.hasNext)
		var arg0 = ArgumentCaptor::forClass(typeof(Integer))
		var arg1 = ArgumentCaptor::forClass(typeof(Class))
		var arg2 = ArgumentCaptor::forClass(typeof(Object[]))
		this.kernel.verify.spawn(arg0.capture, arg1.capture, arg2.capture)
		assertEquals(1, arg0.value)
		assertEquals(typeof(IddleTestingAgent), arg1.value)
		assertEquals("a", arg2.allValues.get(0))
		assertEquals(this.id0, this.bootstrap.bootAgentIdentifier)
	}

	@Test
	def startBootAgent {
		createBootiqueMock
		createConfiguration(typeof(IddleTestingAgent))
		this.bootstrap.startWithoutAgent(this.bootique)
		var id = this.bootstrap.startBootAgent
		assertEquals(this.id0, id)
		var arg0 = ArgumentCaptor::forClass(typeof(Class))
		var arg1 = ArgumentCaptor::forClass(typeof(Object[]))
		this.kernel.verify.spawn(arg0.capture, arg1.capture)
		assertEquals(typeof(IddleTestingAgent), arg0.value)
		assertEquals("a", arg1.allValues.get(0))
		assertEquals(this.id0, this.bootstrap.bootAgentIdentifier)
	}

	@Test
	def startWithoutAgentBootique_start0 {
		createBootiqueMock
		var ctx = this.bootstrap.startWithoutAgent(this.bootique)
		assertSame(this.rootContext, ctx)
		assertSame(this.kernel, this.bootstrap.kernel)
		assertSame(this.runtime, this.bootstrap.runtime)
	}

	@Test
	def startWithoutAgentBootique_start1 {
		createBootiqueMock
		var ctx0 = this.bootstrap.startWithoutAgent(this.bootique)
		assertSame(this.rootContext, ctx0)
		assertSame(this.kernel, this.bootstrap.kernel)
		assertSame(this.runtime, this.bootstrap.runtime)
		var ctx1 = this.bootstrap.startWithoutAgent(this.bootique)
		assertSame(this.rootContext, ctx1)
		assertSame(ctx0, ctx1)
		assertSame(this.kernel, this.bootstrap.kernel)
		assertSame(this.runtime, this.bootstrap.runtime)
	}

	@Test
	def startWithoutAgentBootiqueClass_start0 {
		createBootiqueMock
		var ctx = this.bootstrap.startWithoutAgent(this.bootique, typeof(ModuleMock))
		assertSame(this.rootContext, ctx);
		assertSame(this.kernel, this.bootstrap.getKernel());
		assertSame(this.runtime, this.bootstrap.getRuntime());
	}

	@Test
	def startWithoutAgentBootiqueClass_start1 {
		createBootiqueMock
		var ctx0 = this.bootstrap.startWithoutAgent(this.bootique, typeof(ModuleMock))
		assertSame(this.rootContext, ctx0)
		assertSame(this.kernel, this.bootstrap.kernel)
		assertSame(this.runtime, this.bootstrap.runtime)
		var ctx1 = this.bootstrap.startWithoutAgent(this.bootique, typeof(ModuleMock))
		assertSame(this.rootContext, ctx1)
		assertSame(ctx0, ctx1)
		assertSame(this.kernel, this.bootstrap.kernel)
		assertSame(this.runtime, this.bootstrap.runtime)
	}

}
