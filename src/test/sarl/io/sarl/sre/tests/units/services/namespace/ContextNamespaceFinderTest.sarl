/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.namespace

import io.sarl.lang.annotation.PrivateAPI
import io.sarl.sre.naming.ContextName
import io.sarl.sre.naming.NameScheme
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.namespace.ContextNamespaceFinder
import io.sarl.tests.api.AbstractSarlTest
import io.sarl.tests.api.Nullable
import java.util.UUID
import org.junit.Before
import org.junit.Test

import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class ContextNamespaceFinderTest extends AbstractSarlTest {

	@Nullable
	var contextService : ContextService

	@Nullable
	var finder : ContextNamespaceFinder

	@Nullable
	var cid0 : UUID

	@Nullable
	var ctx0 : Context

	@Nullable
	var cid1 : UUID

	@Nullable
	var ctx1 : Context

	@SuppressWarnings("use_reserved_sarl_annotation")
	@Before
	@PrivateAPI(isCallerOnly = true)
	def setUp : void {
		this.contextService = typeof(ContextService).mock
		this.finder = new ContextNamespaceFinder
		this.finder.contextService = this.contextService
		
		// Default space creation
		this.cid0 = UUID::randomUUID
		this.ctx0 = typeof(Context).mock

		// Other space creation
		this.cid1 = UUID::randomUUID
		this.ctx1 = typeof(Context).mock

		when(this.contextService.rootContext).thenReturn(this.ctx0)
		when(this.contextService.getContext(any(typeof(UUID)))).thenAnswer [
			if (it.getArgument(0) == this.cid0) {
				return this.ctx0
			} else if (it.getArgument(0) == this.cid1) {
				return this.ctx1
			} else {
				return null
			}
		]
	}

	@Test
	def getScheme : void {
		NameScheme::CONTEXT.assertEquals(this.finder.scheme)
	}

	@Test
	def find_ContextName_null : void {
		this.finder.find(null).assertNull
	}

	@Test
	def find_ContextName_nocid : void {
		var name = typeof(ContextName).mock
		this.ctx0.assertSame(this.finder.find(name))
	}

	@Test
	def find_ContextName_cid_validId_00 : void {
		var name = typeof(ContextName).mock
		when(name.contextId).thenReturn(this.cid0)
		this.ctx0.assertSame(this.finder.find(name))
	}

	@Test
	def find_ContextName_cid_validId_01 : void {
		var name = typeof(ContextName).mock
		when(name.contextId).thenReturn(this.cid1)
		this.ctx1.assertSame(this.finder.find(name))
	}

	@Test
	def find_ContextName_cid_invalidId : void {
		var name = typeof(ContextName).mock
		when(name.contextId).thenReturn(UUID::randomUUID)
		this.finder.find(name).assertNull
	}

}
