/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.spaces

import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.spaces.RestrictedAccessLocalEventSpace
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.ManualMocking
import io.sarl.tests.api.Nullable
import io.sarl.util.OpenEventSpaceSpecification
import java.security.AccessControlException
import java.security.Principal
import java.security.acl.Acl
import java.security.acl.Permission
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor
import org.mockito.InjectMocks
import org.mockito.Mock

import static org.junit.Assert.assertNull
import static org.junit.Assert.assertSame
import static org.mockito.ArgumentMatchers.*
import static org.mockito.Mockito.doAnswer
import static org.mockito.Mockito.never
import static org.mockito.Mockito.verifyZeroInteractions
import static org.mockito.Mockito.when

import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.verify
import static extension org.mockito.MockitoAnnotations.initMocks

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ManualMocking
class RestrictedAccessLocalEventSpaceTest extends AbstractSreTest {

	@Nullable
	var agentId : UUID

	@Nullable
	var spaceId : SpaceID

	@Nullable
	var address : Address

	@Nullable
	var listener : EventListener

	@Mock
	var executor : ExecutorService

	@Nullable
	var acl : Acl

	@Nullable
	var permission : Permission

	@InjectMocks
	var ^space : RestrictedAccessLocalEventSpace

	@Before
	def setUp : void {
		this.agentId = UUID::randomUUID

		this.spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))

		this.address = new Address(this.spaceId, this.agentId)

		this.acl = typeof(Acl).mock
		this.permission = typeof(Permission).mock

		this.^space = new RestrictedAccessLocalEventSpace(this.spaceId, this.acl, this.permission)

		this.listener = typeof(EventListener).mock
		when(this.listener.ID).thenReturn(this.agentId)

		this.initMocks

		doAnswer [
				var r = it.getArguments().get(0) as Runnable
				r.run
				return null
		].when(this.executor).executeAsap(typeof(Runnable).any)
	}

	private def doRegisterWithAccess : void {
		when(this.acl.checkPermission(any, any)).thenReturn(true)
		this.^space.register(this.listener, typeof(Principal).mock)
	}

	private def doRegisterWithoutAccess : void {
		when(this.acl.checkPermission(any, any)).thenReturn(false)
		this.^space.register(this.listener, typeof(Principal).mock)
	}

	private def doUnregister : void {
		this.^space.unregister(this.listener)
	}

	@Test
	def getAddressUUID {
		assertNull(this.^space.getAddress(this.listener.ID))
		doRegisterWithAccess
		assertEquals(this.address, this.^space.getAddress(this.listener.ID))
		doUnregister
		assertNull(this.^space.getAddress(this.listener.ID))
	}

	@Test
	def register_access {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyZeroInteractions(this.listener)

		doRegisterWithAccess

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		this.listener.verify.receiveEvent(argument.capture)
		assertSame(^event, argument.getValue())
	}

	@Test(expected = typeof(AccessControlException))
	def register_noAccess {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyZeroInteractions(this.listener)

		doRegisterWithoutAccess
	}

	@Test
	def unregister {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyZeroInteractions(this.listener)

		doRegisterWithAccess
		doUnregister

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))
		this.listener.verify(never).receiveEvent(argument.capture)
	}

}
