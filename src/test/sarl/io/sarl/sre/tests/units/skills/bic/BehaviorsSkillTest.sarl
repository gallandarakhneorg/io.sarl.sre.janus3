/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.bic

import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.Scope
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.services.lifecycle.AgentState
import io.sarl.sre.skills.bic.BehaviorsSkill
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.units.skills.bic.mocks.MyAgent
import io.sarl.sre.tests.units.skills.bic.mocks.MyInternalEventBusSkill
import io.sarl.sre.tests.units.skills.bic.mocks.MyInternalSchedulesSkill
import io.sarl.tests.api.Nullable
import io.sarl.util.concurrent.Collections3
import io.sarl.util.concurrent.NoReadWriteLock
import java.util.UUID
import org.eclipse.xtext.xbase.lib.Functions.Function1
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.mockito.Mockito.reset
import static org.mockito.Mockito.verifyZeroInteractions
import static org.mockito.Mockito.when

import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class BehaviorsSkillTest extends AbstractSreTest {

	@Nullable
	var contextId : UUID
	
	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : BehaviorsSkill

	@Nullable
	var eventBusListener : InformedEventListener

	@Nullable
	var eventBus : MyInternalEventBusSkill

	@Nullable
	var schedules : MyInternalSchedulesSkill

	@Before
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.eventBusListener = typeof(InformedEventListener).mock
		this.eventBus = new MyInternalEventBusSkill(this.eventBusListener).spy
		this.schedules = new MyInternalSchedulesSkill().spy
		this.^agentId = UUID::randomUUID
		this.^agent = new MyAgent(contextId, this.^agentId, this.eventBus, this.schedules).spy
		this.^skill = new BehaviorsSkill[NoReadWriteLock::SINGLETON]
		this.reflect.invoke(this.^skill, "setOwner", this.^agent)
		reset(this.schedules, this.eventBus, this.eventBusListener, this.^agent)
	}

	private def forceAlive : void {
		// Force being alive
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).state = AgentState::ALIVE
	}
	
	private def forceNoBehavior : void {
		this.eventBus.setRegisteredEventBusListeners(Collections3::emptySynchronizedSet)
		reset(this.schedules, this.eventBus, this.eventBusListener, this.^agent)
	}

	private def forceTwoBehaviors : Behavior[] {
		var beh1 = typeof(Behavior).mock

		var beh2 = typeof(Behavior).mock

		var theset = <Behavior>newHashSet
		theset += beh1
		theset += beh2
		this.eventBus.setRegisteredEventBusListeners(
			Collections3::unmodifiableSynchronizedSet(theset, NoReadWriteLock.SINGLETON))
		var array : Behavior[] = newArrayOfSize(theset.size)
		theset.toArray(array)
		return array
	}
	
	def forceInnerContext : OpenEventSpace {
		var innerContext = typeof(Context).mock
		var defaultSpace = typeof(OpenEventSpace).mock
		when(innerContext.defaultSpace).thenReturn(defaultSpace)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).innerContext = innerContext
		return defaultSpace
	}

	@Test
	def asEventListener {
		forceNoBehavior
		assertSame(this.eventBusListener, this.^skill.asEventListener)
	}

	@Test
	def getRegisteredBehaviors_noRegistration {
		forceNoBehavior
		var iterable = this.^skill.getRegisteredBehaviors
		assertFalse(iterable.iterator.hasNext)
	}

	@Test
	def getRegisteredBehaviors_registrations {
		var behs = forceTwoBehaviors
		var iterable = this.^skill.getRegisteredBehaviors
		var iterator = iterable.iterator
		assertSame(behs.get(0), iterator.next)
		assertSame(behs.get(1), iterator.next)
		assertFalse(iterator.hasNext)
	}

	@Test
	def hasRegisteredBehavior_noRegistration {
		forceNoBehavior
		assertFalse(this.^skill.hasRegisteredBehavior)
	}

	@Test
	def hasRegisteredBehavior_registrations {
		forceTwoBehaviors
		assertTrue(this.^skill.hasRegisteredBehavior)
	}

	@Test
	def registerBehavior_noFilter_notAlive {
		var beh1 = typeof(Behavior).mock
		
		var b = this.^skill.registerBehavior(beh1)

		assertSame(beh1, b)
		verifyZeroInteractions(this.eventBus)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def registerBehavior_noFilter_alive {
		var beh1 = typeof(Behavior).mock

		forceAlive

		var b = this.^skill.registerBehavior(beh1)

		assertSame(beh1, b)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedFilter = ArgumentCaptor::forClass(typeof(Function1))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1))
		this.eventBus.verify.registerEventBusListener(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		assertSame(beh1, capturedListener.value)
		assertNull(capturedFilter.value)
		assertNotNull(capturedCallback.value)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def registerBehavior_filter_notAlive {
		var beh1 = typeof(Behavior).mock
		var filter = mock(typeof(Function1))
		
		var b = this.^skill.registerBehavior(beh1, filter)

		assertSame(beh1, b)
		verifyZeroInteractions(this.eventBus)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def registerBehavior_filter_alive {
		var beh1 = typeof(Behavior).mock
		var filter = mock(typeof(Function1))
		
		forceAlive
		
		var b = this.^skill.registerBehavior(beh1, filter)

		assertSame(beh1, b)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedFilter = ArgumentCaptor::forClass(typeof(Function1))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1))
		this.eventBus.verify.registerEventBusListener(capturedListener.capture, capturedFilter.capture, capturedCallback.capture)
		assertSame(beh1, capturedListener.value)
		assertSame(filter, capturedFilter.value)
		assertNotNull(capturedCallback.value)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def unregisterBehavior {
		var beh1 = typeof(Behavior).mock
		
		var b = this.^skill.unregisterBehavior(beh1)

		assertSame(beh1, b)
		var capturedListener = ArgumentCaptor::forClass(typeof(Object))
		var capturedCallback = ArgumentCaptor::forClass(typeof(Procedure1))
		this.eventBus.verify.unregisterEventBusListener(capturedListener.capture, capturedCallback.capture)
		assertSame(beh1, capturedListener.value)
		assertNotNull(capturedCallback.value)
		var capturedBehavior = ArgumentCaptor::forClass(typeof(Behavior))
		this.schedules.verify.unregisterTasksForBehavior(capturedBehavior.capture)
		assertSame(beh1, capturedBehavior.value)
	}

	@Test
	def wake_noScope_noInnerContext_notAlive {
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event)
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def wake_noScope_noInnerContext_alive {
		var ^event = new Event {}
		assertNull(^event.source)
		
		forceAlive
		
		this.^skill.wake(^event)
		
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		this.eventBusListener.verify.receiveEvent(capturedEvent.capture)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def wake_matchingScope_noInnerContext_notAlive {
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event) [true]
		
		verifyZeroInteractions(this.eventBusListener)
	}

	@Test
	def wake_matchingScope_noInnerContext_alive {
		var ^event = new Event {}
		assertNull(^event.source)

		forceAlive
		
		this.^skill.wake(^event) [true]
		
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		this.eventBusListener.verify.receiveEvent(capturedEvent.capture)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def wake_notMatchingScope_noInnerContext {
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event) [false]
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
	}

	@Test
	def wake_noScope_innerContext_notAlive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		
		this.^skill.wake(^event)
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
		verifyZeroInteractions(defSpace)
	}

	@Test
	def wake_noScope_innerContext_alive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)

		forceAlive
		
		this.^skill.wake(^event)
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		defSpace.verify.emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		assertNull(capturedScope.value)
	}

	@Test
	def wake_matchingScope_innerContext_notAlive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [true]
		
		this.^skill.wake(^event, scope)
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
		verifyZeroInteractions(defSpace)
	}

	@Test
	def wake_matchingScope_innerContext_alive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [true]

		forceAlive
		
		this.^skill.wake(^event, scope)
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		verify(defSpace).emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		assertSame(scope, capturedScope.value)
	}

	@Test
	def wake_notMatchingScope_innerContext_notAlive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [false]
		
		this.^skill.wake(^event, scope)
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
		verifyZeroInteractions(defSpace)
	}

	@Test
	def wake_notMatchingScope_innerContext_alive {
		var defSpace = forceInnerContext
		var ^event = new Event {}
		assertNull(^event.source)
		var scope : Scope<Address> = [false]

		forceAlive
		
		this.^skill.wake(^event, scope)
		
		verifyZeroInteractions(this.eventBusListener)
		verifyZeroInteractions(this.schedules)
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		verify(defSpace).emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNotNull(capturedEvent.value.source)
		assertSame(scope, capturedScope.value)
	}

}