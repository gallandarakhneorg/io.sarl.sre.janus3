/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.spaces

import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.spaces.AbstractEventSpace
import io.sarl.sre.spaces.Participant
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.ManualMocking
import io.sarl.tests.api.Nullable
import io.sarl.util.concurrent.NoReadWriteLock
import java.util.Map
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor
import org.mockito.InjectMocks
import org.mockito.Mock

import static org.mockito.Mockito.doAnswer
import static org.mockito.Mockito.verify
import static org.mockito.Mockito.verifyZeroInteractions
import static org.mockito.Mockito.when

import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.MockitoAnnotations.initMocks

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ManualMocking
abstract class AbstractEventSpaceTest extends AbstractSreTest {

	@Nullable
	var agentId : UUID

	@Nullable
	var agentId2 : UUID

	@Nullable
	var spaceId : SpaceID

	@Nullable
	var address : Address

	@Nullable
	var listener1 : InformedEventListener

	@Nullable
	var listener2 : InformedEventListener 

	@Mock
	var executor : ExecutorService 

	@Mock
	var participants : Map<UUID, Participant> 

	@InjectMocks
	var ^space : AbstractEventSpace 

	@Before
	def setUp : void {
		this.agentId = UUID::randomUUID

		this.agentId2 = UUID::randomUUID

		this.spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))

		this.address = new Address(this.spaceId, this.agentId)

		this.^space = new AbstractEventSpace(this.spaceId,
			[NoReadWriteLock::SINGLETON], typeof(LoggingService).mock) {
			def getInternalParticipantStructure : Map<UUID, Participant> {
				return AbstractEventSpaceTest.this.participants
			}
		}

		this.listener1 = typeof(InformedEventListener).mock
		when(this.listener1.ID).thenReturn(this.agentId)

		this.listener2 = typeof(InformedEventListener).mock
		when(this.listener2.ID).thenReturn(this.agentId2)

		this.initMocks

		doAnswer [
			var r = it.getArguments().get(0) as Runnable
			r.run
			return null
		].when(this.executor).executeAsap(typeof(Runnable).any)
	}

	private def register : void {
		var participant1 = typeof(Participant).mock
		when(participant1.address).thenReturn(this.address)
		when(participant1.participant).thenReturn(this.listener1)
		var participant2 = typeof(Participant).mock
		when(participant2.address).thenReturn(new Address(this.spaceId, this.agentId2))
		when(participant2.participant).thenReturn(this.listener2)
		var keys = <UUID>newHashSet
		keys.add(this.agentId)
		keys.add(this.agentId2)
		when(this.participants.keySet).thenReturn(keys)
		var values = <Participant>newHashSet
		values.add(participant1)
		values.add(participant2)
		when(this.participants.values).thenReturn(values)
		when(this.participants.size).thenReturn(2)
		when(this.participants.remove(any)).thenReturn(participant1)
		when(this.participants.get(any)).thenAnswer [
			if (this.agentId == it.getArgument(0)) {
				return participant1
			}
			if (this.agentId2 == it.getArgument(0)) {
				return participant2
			}
			return null
		]
	}

	@Test
	def getAddressUUID {
		assertNull(this.^space.getAddress(this.listener1.ID))
		register
		assertSame(this.address, this.^space.getAddress(this.listener1.ID))
	}

	private def emitLocally(^event : Event, scope : Scope<Address>) {
		this.reflect.invoke(this.^space, "emitLocally", ^event, scope)
	}

	@Test
	def emitLocally_nullScope {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		emitLocally(^event, null)
		verifyZeroInteractions(this.listener1)
		verifyZeroInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		emitLocally(^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)

		verify(this.listener2).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}

	@Test
	def emitLocally_allParticipants {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		emitLocally(^event) [true]
		verifyZeroInteractions(this.listener1)
		verifyZeroInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		emitLocally(^event) [true]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)

		verify(this.listener2).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}

	@Test
	def emitLocally_singleAddress {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		emitLocally(^event) [this.address == it]
		verifyZeroInteractions(this.listener1)
		verifyZeroInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		emitLocally(^event) [this.address == it]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
		verifyZeroInteractions(this.listener2)
	}

	@Test
	def emit_nullScope {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)
		verifyZeroInteractions(this.listener1)
		verifyZeroInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event, null)

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)

		verify(this.listener2).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}

	@Test
	def emit_allParticipants {
		var ^event = mock(typeof(Event))
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [true]
		verifyZeroInteractions(this.listener1)
		verifyZeroInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [true]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)

		verify(this.listener2).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
	}

	@Test
	def emit_singleAddress {
		var ^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [this.address == it]
		verifyZeroInteractions(this.listener1)
		verifyZeroInteractions(this.listener2)

		register

		^event = typeof(Event).mock
		when(^event.source).thenReturn(this.address)
		this.^space.emit(null, ^event) [this.address == it]

		var argument = ArgumentCaptor::forClass(typeof(Event))

		verify(this.listener1).receiveEvent(argument.capture)
		assertSame(^event, argument.value)
		verifyZeroInteractions(this.listener2)
	}

}
