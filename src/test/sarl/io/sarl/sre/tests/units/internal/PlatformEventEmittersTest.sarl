/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.internal

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.sre.internal.AgentEventEmitter
import io.sarl.sre.internal.ContextMemberEventEmitter
import io.sarl.sre.internal.SpaceEventEmitter
import io.sarl.sre.internal.SubHolonContextEventEmitter
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.testutils.IddleTestingAgent
import io.sarl.sre.tests.units.internal.mocks.BehSkill
import io.sarl.sre.tests.units.internal.mocks.LogSkill
import io.sarl.sre.tests.units.internal.mocks.MyAgent0
import io.sarl.tests.api.Nullable
import io.sarl.util.concurrent.NoReadWriteLock
import java.util.UUID
import java.util.logging.Logger
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Suite
import org.junit.runners.Suite.SuiteClasses
import org.mockito.ArgumentCaptor

import static org.mockito.ArgumentMatchers.any
import static org.mockito.Mockito.never
import static org.mockito.Mockito.when

import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@RunWith(typeof(Suite))
@SuiteClasses(#[
	typeof(PlatformEventEmittersTest.SpaceEventEmitterTest),
	typeof(PlatformEventEmittersTest.AgentEventEmitterTest),
	typeof(PlatformEventEmittersTest.ContextMemberEventEmitterTest),
	typeof(PlatformEventEmittersTest.SubHolonContextEventEmitterTest)
])
class PlatformEventEmittersTest {

	static class SpaceEventEmitterTest extends AbstractSreTest {
		
		@Nullable
		var contextID : UUID
		
		@Nullable
		var emitter : SpaceEventEmitter
		
		@Nullable
		var defaultSpace : EventSpace

		@Nullable
		var logger : Logger

		@Before
		def setUp : void {
			this.contextID = UUID::randomUUID
			var spaceID = typeof(SpaceID).mock
			when(spaceID.contextID).thenReturn(this.contextID)
			when(spaceID.ID).thenReturn(UUID::randomUUID)
			this.defaultSpace = typeof(EventSpace).mock
			when(this.defaultSpace.spaceID).thenReturn(spaceID)
			this.logger = Logger::getLogger("SOME")
			this.logger.useParentHandlers = false
			this.logger = this.logger.spy
			this.emitter = new SpaceEventEmitter(contextID, defaultSpace, logger)
		}
		
		@Test
		def spaceCreated_localCreation {
			var spaceID = typeof(SpaceID).mock
			when(spaceID.contextID).thenReturn(this.contextID)
			var ^space = typeof(Space).mock
			when(^space.spaceID).thenReturn(spaceID)
			
			this.emitter.spaceCreated(^space, true)
			
			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
			assertNull(scope.value)
			var evt = ^event.value
			assertNotNull(evt)
			assertInstanceOf(typeof(SpaceCreated), evt)
			var spaceEvent = evt as SpaceCreated
			assertNotNull(spaceEvent.source)
			assertSame(spaceID, spaceEvent.spaceID)
		}

		@Test
		def spaceCreated_false {
			var spaceID = typeof(SpaceID).mock
			when(spaceID.contextID).thenReturn(this.contextID)
			var ^space = typeof(Space).mock
			when(^space.spaceID).thenReturn(spaceID)
			
			this.emitter.spaceCreated(^space, false)
			
			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			this.defaultSpace.verify(never).emit(any, ^event.capture, scope.capture)
		}

		@Test
		def spaceDestroyed_true {
			var spaceID = typeof(SpaceID).mock
			when(spaceID.contextID).thenReturn(this.contextID)
			var ^space = typeof(Space).mock
			when(^space.spaceID).thenReturn(spaceID)
			
			this.emitter.spaceDestroyed(^space, true)
			
			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
			assertNull(scope.value)
			var evt = ^event.value
			assertNotNull(evt)
			assertInstanceOf(typeof(SpaceDestroyed), evt)
			var spaceEvent = evt as SpaceDestroyed
			assertNotNull(spaceEvent.source)
			assertSame(spaceID, spaceEvent.spaceID)
		}

		@Test
		def spaceDestroyed_false {
			var spaceID = typeof(SpaceID).mock
			when(spaceID.contextID).thenReturn(this.contextID)
			var ^space = typeof(Space).mock
			when(^space.spaceID).thenReturn(spaceID)
			
			this.emitter.spaceDestroyed(^space, false)
			
			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			this.defaultSpace.verify(never).emit(any, ^event.capture, scope.capture)
		}

	}

	static class AgentEventEmitterTest extends AbstractSreTest {
		
		@Nullable
		var contextID : UUID
		
		@Nullable
		var parent : Context

		@Nullable
		var defaultSpace : OpenEventSpace

		@Nullable
		var agent1 : Agent

		@Nullable
		var agent2 : Agent

		@Nullable
		var life2 : AgentLife

		@Nullable
		var params : Object[]

		@Nullable
		var emitter : AgentEventEmitter
		
		@Nullable
		var logger : Logger

		@Before
		def setUp : void {
			this.contextID = UUID::randomUUID
			this.logger = Logger::getLogger("SOME")
			this.logger.useParentHandlers = false
			this.logger = this.logger.spy
			var spaceID = typeof(SpaceID).mock
			when(spaceID.contextID).thenReturn(this.contextID)
			when(spaceID.ID).thenReturn(UUID::randomUUID)
			this.defaultSpace = typeof(OpenEventSpace).mock
			when(this.defaultSpace.spaceID).thenReturn(spaceID)
			this.parent = typeof(Context).mock
			when(parent.ID).thenReturn(this.contextID)
			when(parent.defaultSpace).thenReturn(this.defaultSpace)
			this.agent1 = new IddleTestingAgent(this.contextID, UUID.randomUUID()).spy
			this.params = #[]
			this.agent2 = new IddleTestingAgent(this.contextID, UUID.randomUUID()).spy
			this.life2 = AgentLife::getLife(this.agent2)[NoReadWriteLock::SINGLETON]
			this.emitter = new AgentEventEmitter(this.logger)
		}
		
		@Test
		def agentSpawned {
			this.emitter.agentSpawned(this.contextID, this.parent, typeof(IddleTestingAgent),
					#[agent1, agent2], params);
			
			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
			assertNotNull(scope.value)
			var evt = ^event.value
			assertNotNull(evt)
			assertInstanceOf(typeof(AgentSpawned), evt)
			var spaceEvent = evt as AgentSpawned
			assertNotNull(spaceEvent.source)
			assertEquals(typeof(IddleTestingAgent).name, spaceEvent.agentType)
			assertContainsCollection(#[agent1.ID, agent2.ID], spaceEvent.agentIdentifiers)
		}

		@Test
		def agentDestroyed {
			var adr1 = new Address(
					new SpaceID(this.contextID, UUID::randomUUID, typeof(OpenEventSpaceSpecification)),
					this.agent2.ID)
			var ctx = typeof(Context).mock
			when(ctx.defaultSpace).thenReturn(this.defaultSpace)
			when(ctx.ID).thenReturn(this.contextID)
			this.life2.setDefaultContext(ctx, adr1);
			var ref1 = this.life2.defaultContext

			var secondContext = UUID::randomUUID
			var adr2 = new Address(
					new SpaceID(secondContext, UUID::randomUUID, typeof(OpenEventSpaceSpecification)),
					this.agent2.ID)
			ctx = typeof(Context).mock
			var space2 = typeof(OpenEventSpace).mock
			when(ctx.defaultSpace).thenReturn(space2)
			when(ctx.ID).thenReturn(secondContext)
			var ref2 = this.life2.addExternalContext(ctx, adr2)
			
			var contexts = #[ref1, ref2]
			
			this.emitter.agentDestroyed(agent2, contexts)

			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			
			this.defaultSpace.verify.emit(any, ^event.capture, scope.capture)
			assertNotNull(scope.value)
			var evt = ^event.value
			assertNotNull(evt)
			assertInstanceOf(typeof(AgentKilled), evt)
			var spaceEvent = evt as AgentKilled
			assertNotNull(spaceEvent.source)
			assertEquals(agent2.ID, spaceEvent.source.UUID)

			space2.verify.emit(any, ^event.capture, scope.capture)
			assertNotNull(scope.value)
			evt = ^event.value
			assertNotNull(evt)
			assertInstanceOf(typeof(AgentKilled), evt)
			spaceEvent = evt as AgentKilled
			assertNotNull(spaceEvent.source)
			assertEquals(agent2.ID, spaceEvent.source.UUID)
		}

	}

	static class ContextMemberEventEmitterTest extends AbstractSreTest {
		
		@Nullable
		var agentId : UUID

		@Nullable
		var emitter : ContextMemberEventEmitter 

		@Nullable
		var logger : Logger

		@Before
		def setUp : void {
			this.agentId = UUID::randomUUID
			this.logger = Logger::getLogger("SOME")
			this.logger.useParentHandlers = false
			this.logger = this.logger.spy
			this.emitter = new ContextMemberEventEmitter(this.logger)
		}

		@Test
		def memberJoined {
			var ctx = typeof(AgentContext).mock
			var ctxid = UUID::randomUUID
			var spaceid = UUID::randomUUID
			when(ctx.ID).thenReturn(ctxid)
			var ^space = typeof(EventSpace).mock
			var spaceidobj = new SpaceID(ctxid, spaceid, typeof(OpenEventSpaceSpecification))
			when(^space.spaceID).thenReturn(spaceidobj)
			when(ctx.defaultSpace).thenReturn(^space)
			this.emitter.memberJoined(ctx, spaceidobj, this.agentId, typeof(IddleTestingAgent).name)

			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			^space.verify.emit(any, ^event.capture, scope.capture)
			assertNotNull(^event.value)
			assertInstanceOf(typeof(MemberJoined), ^event.value)
			var evt = ^event.value as MemberJoined
			assertNotNull(evt.source)
			assertEquals(this.agentId, evt.agentID)
			assertEquals(ctxid, evt.source.UUID)
			assertNotNull(scope.value)
		}

		@Test
		def memberLeft {
			var ctx = typeof(AgentContext).mock
			var ctxid = UUID::randomUUID
			var spaceid = UUID::randomUUID
			when(ctx.ID).thenReturn(ctxid)
			var ^space = typeof(EventSpace).mock
			var spaceidobj = new SpaceID(ctxid, spaceid, typeof(OpenEventSpaceSpecification))
			when(^space.spaceID).thenReturn(spaceidobj)
			when(ctx.defaultSpace).thenReturn(^space)
			this.emitter.memberLeft(ctx, spaceidobj, this.agentId, typeof(IddleTestingAgent).name)

			var ^event = ArgumentCaptor::forClass(typeof(Event))
			var scope = ArgumentCaptor::forClass(typeof(Scope))
			^space.verify.emit(any, ^event.capture, scope.capture)
			assertNotNull(^event.value)
			assertInstanceOf(typeof(MemberLeft), ^event.value)
			var evt = ^event.value as MemberLeft
			assertNotNull(evt.source)
			assertEquals(this.agentId, evt.agentID)
			assertNotNull(scope.value)
		}
	}

	static class SubHolonContextEventEmitterTest extends AbstractSreTest {
		
		@Nullable
		var contextID : UUID

		@Nullable
		var agentId : UUID

		@Nullable
		var ^agent : MyAgent0

		@Nullable
		var behaviors : BehSkill

		@Nullable
		var emitter : SubHolonContextEventEmitter

		@Nullable
		var logger : Logging

		@Before
		def setUp : void {
			this.contextID = UUID::randomUUID
			this.agentId = UUID::randomUUID
			this.logger = new LogSkill().spy
			this.behaviors = new BehSkill().spy
			this.^agent = new MyAgent0(this.behaviors, this.logger, this.contextID, this.agentId).spy
			this.emitter = new SubHolonContextEventEmitter(this.^agent)[NoReadWriteLock::SINGLETON]
		}
		
		@Test
		def contextJoined {
			var id1 = UUID::randomUUID
			var id2 = UUID::randomUUID
			this.emitter.contextJoined(id1, id2)
			
			var ^event = ArgumentCaptor::forClass(typeof(Event))
			this.behaviors.verify.wake(^event.capture)
			assertNotNull(^event.value)
			assertInstanceOf(typeof(ContextJoined), ^event.value)
			var evt = ^event.value as ContextJoined
			assertNotNull(evt.source)
			assertEquals(id1, evt.holonContextID)
			assertEquals(id2, evt.defaultSpaceID)
		}

		@Test
		def contextLeft {
			var id1 = UUID::randomUUID
			this.emitter.contextLeft(id1)
			
			var ^event = ArgumentCaptor::forClass(typeof(Event))
			this.behaviors.verify.wake(^event.capture)
			assertNotNull(^event.value)
			assertInstanceOf(typeof(ContextLeft), ^event.value)
			var evt = ^event.value as ContextLeft
			assertNotNull(evt.source)
			assertEquals(id1, evt.holonContextID)
		}

	}

}
