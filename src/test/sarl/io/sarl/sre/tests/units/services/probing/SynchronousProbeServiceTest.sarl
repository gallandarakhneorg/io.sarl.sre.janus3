/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.probing

import io.sarl.sre.internal.SequenceListenerNotifier
import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.naming.ContextName
import io.sarl.sre.naming.NameParser
import io.sarl.sre.naming.NameScheme
import io.sarl.sre.services.namespace.FieldAccess
import io.sarl.sre.services.namespace.NamespaceService
import io.sarl.sre.services.probing.Probe
import io.sarl.sre.services.probing.SynchronousProbeService
import io.sarl.tests.api.AbstractSarlTest
import io.sarl.util.concurrent.NoReadWriteLock
import java.net.URI
import java.util.UUID
import javax.annotation.Nullable
import org.junit.Before
import org.junit.Test

import static org.mockito.ArgumentMatchers.*

import static extension org.mockito.ArgumentCaptor.*
import static extension org.mockito.Mockito.*
import io.sarl.sre.naming.SarlName

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SynchronousProbeServiceTest extends AbstractSarlTest {

	@Nullable
	var fieldAccess : FieldAccess

	@Nullable
	var namespaceService : NamespaceService

	@Nullable
	var nameParser : NameParser

	@Nullable
	var service : SynchronousProbeService

	@Nullable
	var uri0 : URI

	@Nullable
	var name0 : ContextName

	@Nullable
	var nameObject : SarlName

	@Before
	def setUp : void {
		this.nameObject = typeof(SarlName).mock
		when(this.nameObject.scheme).thenReturn(NameScheme::SPACE)
		this.fieldAccess = typeof(FieldAccess).mock
		when(this.fieldAccess.name).thenReturn(this.nameObject)
		this.namespaceService = typeof(NamespaceService).mock
		when(this.namespaceService.findObject(any)).thenReturn(this.fieldAccess)
		this.nameParser = typeof(NameParser).mock
		when(this.nameParser.normalize(any(typeof(URI)))).thenAnswer[it.getArgument(0) as URI]
		when(this.nameParser.decode(any(typeof(URI)))).thenAnswer[
			if (it.getArgument(0) === this.uri0) {
				return this.name0
			} else {
				var n = typeof(ContextName).mock
				when(n.toURI).thenReturn(it.getArgument(0) as URI)
				return n
			} 
		]
		when(this.nameParser.decode(any(typeof(String)))).thenAnswer [
			URI::create(it.getArgument(0).toString)
		]
		val coll = new SmartListenerCollection(new SequenceListenerNotifier)
		this.service = new SynchronousProbeService(this.namespaceService, this.nameParser,
			[coll], [NoReadWriteLock::SINGLETON]).spy
		this.name0 = typeof(ContextName).mock
		when(this.name0.scheme).thenReturn(NameScheme::CONTEXT)
		this.uri0 = URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1587")
		when(this.name0.toURI).thenReturn(this.uri0)
	}

	@Test
	def probe_SarlNameClassString : void {
		var name = UUID::randomUUID.toString
		var probe0 = this.service.probe(this.name0, typeof(Object), name)
		probe0.assertNotNull

		var probe1 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		probe0.assertSame(probe1)

		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1587"))
		var probe2 = this.service.probe(name1, typeof(Float), UUID::randomUUID.toString)
		probe0.assertSame(probe2)
	}

	@Test
	def probe_UriClassString : void {
		var name = UUID::randomUUID.toString
		var probe0 = this.service.probe(this.uri0, typeof(Object), name)
		probe0.assertNotNull

		var probe1 = this.service.probe(this.uri0, typeof(Integer), UUID::randomUUID.toString)
		probe0.assertSame(probe1)

		var probe2 = this.service.probe(URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1587"), typeof(Float),
			UUID::randomUUID.toString)
		probe0.assertSame(probe2)
	}

	@Test
	def probe_StringClassString : void {
		var name = UUID::randomUUID.toString
		var probe0 = this.service.probe("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1587", typeof(Object), name)
		probe0.assertNotNull

		var probe1 = this.service.probe("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1587", typeof(Integer),
			UUID::randomUUID.toString)
		probe0.assertSame(probe1)

		var probe2 = this.service.probe("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1587", typeof(Float),
			UUID::randomUUID.toString)
		probe0.assertSame(probe2)
	}
	
	@Test
	def getProbes_00 : void {
		this.service.probes.iterator.hasNext.assertFalse
	}

	@Test
	def getProbes_01 : void {
		var probe0 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		var iterator = this.service.probes.iterator
		iterator.hasNext.assertTrue
		probe0.assertSame(iterator.next)
		iterator.hasNext.assertFalse
	}

	@Test
	def getProbes_02 : void {
		var probe0 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1599"))
		var probe1 = this.service.probe(name1, typeof(Integer), UUID::randomUUID.toString)
		var iterator = this.service.probes.iterator
		iterator.hasNext.assertTrue
		probe0.assertSame(iterator.next)
		iterator.hasNext.assertTrue
		probe1.assertSame(iterator.next)
		iterator.hasNext.assertFalse
	}

	@Test
	def getProbes_03 : void {
		var probe0 = this.service.probe(this.name0, typeof(Integer), UUID::randomUUID.toString)
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1599"))
		var probe1 = this.service.probe(name1, typeof(Integer), UUID::randomUUID.toString)
		var name2 = typeof(ContextName).mock
		when(name2.toURI).thenReturn(URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1598"))
		var probe2 = this.service.probe(name2, typeof(String), UUID::randomUUID.toString)
		var iterator = this.service.probes.iterator
		iterator.hasNext.assertTrue
		probe0.assertSame(iterator.next)
		iterator.hasNext.assertTrue
		probe2.assertSame(iterator.next)
		iterator.hasNext.assertTrue
		probe1.assertSame(iterator.next)
		iterator.hasNext.assertFalse
	}

	@Test
	def releaseAllProbes : void {
		var probe0 = this.service.probe(this.name0, typeof(Object), UUID::randomUUID.toString)
		probe0.assertNotNull
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1599"))
		var probe1 = this.service.probe(name1, typeof(Object), UUID::randomUUID.toString)
		probe1.assertNotNull

		this.service.releaseAllProbes
		
		probe0.active.assertFalse
		probe1.active.assertFalse

		var capture = typeof(Probe).forClass
		this.service.verify(2.times).onProbeReleasedProbe(capture.capture)

		this.service.probes.iterator.hasNext.assertFalse
	}

	@Test
	def sync : void {
		var probe0 = this.service.probe(this.name0, typeof(Object), UUID::randomUUID.toString)
		probe0.assertNotNull
		var name1 = typeof(ContextName).mock
		when(name1.toURI).thenReturn(URI::create("context:fc1f2dbb-e9aa-4cfd-87cd-b4eda14c1599"))
		var probe1 = this.service.probe(name1, typeof(Object), UUID::randomUUID.toString)
		probe1.assertNotNull

		probe0.active.assertTrue
		probe1.active.assertTrue
		probe0.invalid.assertFalse
		probe1.invalid.assertFalse

		this.service.sync

		var iterator = this.service.probes.iterator
		iterator.hasNext.assertTrue
		probe0.assertSame(iterator.next)
		iterator.hasNext.assertTrue
		probe1.assertSame(iterator.next)
		iterator.hasNext.assertFalse

		probe0.active.assertTrue
		probe1.active.assertTrue
		probe0.invalid.assertFalse
		probe1.invalid.assertFalse
	}

	@Test
	def onProbeReleasedProbe : void {
		var probe0 = this.service.probe(this.name0, typeof(Object), UUID::randomUUID.toString)
		probe0.assertNotNull

		this.service.onProbeReleasedProbe(probe0)

		this.service.probes.iterator.hasNext.assertFalse
	}

}
