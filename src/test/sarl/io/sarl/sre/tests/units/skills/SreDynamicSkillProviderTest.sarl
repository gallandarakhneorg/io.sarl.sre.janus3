/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills

import com.google.inject.Injector
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.core.Time
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Capacity
import io.sarl.lang.core.Skill
import io.sarl.lang.util.ClearableReference
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.capacities.InternalSchedules
import io.sarl.sre.capacities.MicroKernelCapacity
import io.sarl.sre.skills.SreDynamicSkillProvider
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import java.util.Arrays
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.mockito.ArgumentMatchers.*

import static extension org.mockito.Mockito.*
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreDynamicSkillProviderTest extends AbstractSreTest {

	@Nullable
	var injector : Injector

	@Nullable
	var ^agent : Agent

	@Nullable
	var provider : MockedDynamicSkillProvider
	
	@Before
	def setUp : void {
		this.injector = typeof(Injector).mock
		when(this.injector.getInstance(any(typeof(Class)))).thenAnswer [
			return it.getArgument(0).mock
		]
		this.^agent = typeof(Agent).mock
		this.provider = new MockedDynamicSkillProvider(this.injector).spy
	}

	private def doInstallSkillTest(capType : Class<? extends Capacity>, adds : Class<? extends Capacity>*) {
		var reference = this.provider.installSkill(^agent, capType)
		assertNotNull(reference)
		var ^skill = reference.get
		assertNotNull(^skill)
		assertInstanceOf(capType, ^skill)
		
		var capturedAgent = ArgumentCaptor::forClass(typeof(Agent))
		var capturedCapacity = ArgumentCaptor::forClass(typeof(Class[]))
		var capturedSkill = ArgumentCaptor::forClass(typeof(Skill))
		this.provider.verify(1.times).registerSkill(capturedAgent.capture, capturedCapacity.capture, capturedSkill.capture)
		assertEquals(this.^agent, capturedAgent.value)
		var caps = <Class<? extends Capacity>>newArrayList
		caps += capType
		caps.addAll(Arrays::asList(adds))
		assertContainsCollection(
				caps,
				Arrays::asList(capturedCapacity.value))
		assertEquals(^skill, capturedSkill.value)
	}

	@Test
	def installSkill_MicroKernelCapacity {
		doInstallSkillTest(typeof(MicroKernelCapacity))
	}

	@Test
	def installSkill_Logging {
		doInstallSkillTest(typeof(Logging))
	}

	@Test
	def installSkill_Time {
		doInstallSkillTest(typeof(Time))
	}

	@Test
	def installSkill_InternalEventBusCapacity {
		doInstallSkillTest(typeof(InternalEventBusCapacity))
	}

	@Test
	def installSkill_Lifecycle {
		doInstallSkillTest(typeof(Lifecycle))
	}

	@Test
	def installSkill_InnerContextAccess {
		doInstallSkillTest(typeof(InnerContextAccess))
	}

	@Test
	def installSkill_Schedules {
		doInstallSkillTest(typeof(Schedules), typeof(InternalSchedules))
	}

	@Test
	def installSkill_InternalSchedules {
		doInstallSkillTest(typeof(InternalSchedules), typeof(Schedules))
	}

	@Test
	def installSkill_Behaviors {
		doInstallSkillTest(typeof(Behaviors))
	}

	@Test
	def installSkill_ExternalContextAccess {
		doInstallSkillTest(typeof(ExternalContextAccess))
	}

	@Test
	def installSkill_DefaultContextInteractions {
		doInstallSkillTest(typeof(DefaultContextInteractions))
	}

	private static class MockedDynamicSkillProvider extends SreDynamicSkillProvider {
		override registerSkill(^agent : Agent, ^capacity : Class<? extends Capacity>[], ^skill : Skill) : ClearableReference<Skill> {
			return new ClearableReference(^skill)
		}
	}
}
