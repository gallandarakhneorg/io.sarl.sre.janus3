/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.lifecycle

import io.sarl.lang.core.Event
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.skills.internal.EventBus

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
package skill MyEventBus implements InternalEventBusCapacity {

	override registerEventBusListener(listener : Object, filter : (Event)=>boolean, callback : (Object)=>void) {
	}

	override unregisterEventBusListener(listener : Object, callback : (Object)=>void) {
	}

	override unregisterEventBusListener(type : Class<?>, callback : (Object)=>void) {
	}

	override fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean) : Iterable<Event> {
		null
	}

	override fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean, listener : Object) : Iterable<Event> {
		null
	}

	override fireEvent(^event : Event) {
	}

	override getAssociatedEventBusListener : InformedEventListener {
		null
	}

	override getRegisteredEventBusListeners(type : Class<T>) : SynchronizedIterable<T> with T {
		null
	}

	override setEventBus(bus : EventBus) {
		throw new UnsupportedOperationException
	}

	override getEventBus : EventBus {
		throw new UnsupportedOperationException
	}
	
}
