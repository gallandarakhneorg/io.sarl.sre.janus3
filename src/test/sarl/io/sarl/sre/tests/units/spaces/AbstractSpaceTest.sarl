/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.spaces

import io.sarl.lang.core.SpaceID
import io.sarl.lang.util.SynchronizedSet
import io.sarl.sre.spaces.AbstractSpace
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import org.junit.Test

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractSpaceTest extends AbstractSreTest {

	@Test
	def getSpaceID {
		var spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var base = new AbstractSpace(spaceId) {
			def getParticipants : SynchronizedSet<UUID> {
				throw new UnsupportedOperationException
			}
		}
		assertEquals(spaceId, base.spaceID)
	}

	@Test
	@Deprecated
	def getID {
		var spaceId = new SpaceID(UUID::randomUUID, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var base = new AbstractSpace(spaceId) {
			def getParticipants : SynchronizedSet<UUID> {
				throw new UnsupportedOperationException
			}
		}
		assertEquals(spaceId, base.ID)
	}

}
