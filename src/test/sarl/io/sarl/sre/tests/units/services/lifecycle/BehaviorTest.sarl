/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.lifecycle

import io.sarl.core.AgentTask
import io.sarl.lang.core.Behavior
import io.sarl.sre.services.lifecycle.BehaviorLife
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import org.junit.Before
import org.junit.Test

import static org.junit.Assert.assertFalse
import static org.junit.Assert.assertNotNull
import static org.junit.Assert.assertNull
import static org.junit.Assert.assertSame
import static org.junit.Assert.assertTrue

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class BehaviorTest extends AbstractSreTest {

	@Nullable
	var ^behavior : Behavior

	@Nullable
	var life : BehaviorLife

	@Before
	def setUp : void {
		this.^behavior = typeof(Behavior).mock
		this.life = BehaviorLife::getLife(this.^behavior)
	}

	@Test
	def addTaskReference {
		var t1 = typeof(AgentTask).mock
		var t2 = typeof(AgentTask).mock
		this.life.addTaskReference(t1)
		this.life.addTaskReference(t2)
		
		var tasks = this.life.removeAllTaskReferences
		assertNotNull(tasks)
		var iterator = tasks.iterator
		assertTrue(iterator.hasNext)
		if (System.identityHashCode(t1) <= System.identityHashCode(t2)) {
			assertSame(t1, iterator.next.get)
			assertTrue(iterator.hasNext)
			assertSame(t2, iterator.next.get)
		} else {
			assertSame(t2, iterator.next.get)
			assertTrue(iterator.hasNext)
			assertSame(t1, iterator.next.get)
		}
		assertFalse(iterator.hasNext)
	}

	@Test
	def removeTaskReference {
		var t1 = typeof(AgentTask).mock
		var t2 = typeof(AgentTask).mock
		this.life.addTaskReference(t1)
		this.life.addTaskReference(t2)

		this.life.removeTaskReference(t1)
		
		var tasks = this.life.removeAllTaskReferences
		assertNotNull(tasks)
		var iterator = tasks.iterator
		assertTrue(iterator.hasNext)
		assertSame(t2, iterator.next.get)
		assertFalse(iterator.hasNext)
	}

	@Test
	def removeAllTaskReferences {
		assertNull(this.life.removeAllTaskReferences)

		var t1 = typeof(AgentTask).mock
		var t2 = typeof(AgentTask).mock
		this.life.addTaskReference(t1)
		this.life.addTaskReference(t2)

		this.life.removeTaskReference(t1)
		
		var tasks = this.life.removeAllTaskReferences()
		assertNotNull(tasks)
		var iterator = tasks.iterator
		assertTrue(iterator.hasNext)
		assertSame(t2, iterator.next.get)
		assertFalse(iterator.hasNext)

		assertNull(this.life.removeAllTaskReferences())
	}

}
