/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services

import com.google.common.util.concurrent.Service
import io.bootique.config.ConfigurationFactory
import io.sarl.sre.boot.factories.ServiceManagerFactory
import io.sarl.sre.services.AbstractServiceManager
import io.sarl.sre.services.logging.LoggerCreator
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import java.io.PrintStream
import java.util.List
import java.util.concurrent.atomic.AtomicInteger
import java.util.logging.Logger
import org.junit.Before
import org.junit.Test

import static org.junit.Assert.assertFalse
import static org.junit.Assert.assertSame
import static org.mockito.Mockito.when

import static extension org.mockito.ArgumentMatchers.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractServiceManagerTest<T extends AbstractServiceManager> extends AbstractSreTest {

	@Nullable
	var counter : AtomicInteger
	
	@Nullable
	var counter2 : AtomicInteger

	@Nullable
	var service1 : Serv1

	@Nullable
	var service2 : Serv2

	@Nullable
	var service3 : Serv3

	@Nullable
	var service4 : Serv4

	@Nullable
	var service5 : Serv5

	@Nullable
	var service6 : Serv6

	@Nullable
	var logger : Logger

	@Nullable
	var loggerCreator : LoggerCreator

	@Nullable
	var configFactory : ConfigurationFactory

	@Nullable
	var configuration : ServiceManagerFactory

	@Nullable
	var manager : T

	@Before
	def setUp : void {
		this.configuration = typeof(ServiceManagerFactory).mock
		when(this.configuration.startTimeout).thenReturn(0l)
		when(this.configuration.stopTimeout).thenReturn(0l)

		this.configFactory = typeof(ConfigurationFactory).mock
		when(this.configFactory.config(typeof(Class).any, anyString)).thenReturn(this.configuration)

		this.logger = typeof(Logger).mock
		this.loggerCreator = typeof(LoggerCreator).mock
		when(this.loggerCreator.createPlatformLogger).thenReturn(this.logger)
		when(this.loggerCreator.createModuleLogger(any, typeof(Logger).any)).thenReturn(this.logger)
		when(this.loggerCreator.createConsoleLogger(any, typeof(PrintStream).any)).thenReturn(this.logger)
		this.counter = new AtomicInteger
		this.counter2 = new AtomicInteger
		this.service1 = new Serv1Impl(counter, counter2)
		this.service2 = new Serv2Impl(counter, counter2)
		this.service3 = new Serv3Impl(counter, counter2)
		this.service4 = new Serv4Impl(counter, counter2)
		this.service5 = new Serv5Impl(counter, counter2)
		this.service6 = new Serv6Impl(counter, counter2)
		var services : List<? extends Service> = #[this.service1, this.service2, this.service3, this.service4, this.service5, this.service6]
		this.manager = newServiceManagerInstance(this.loggerCreator, services, this.configFactory)
	}

	protected abstract def newServiceManagerInstance(loggerCreator : LoggerCreator,
			services : Iterable<? extends Service>,
			configFactory : ConfigurationFactory) : T

	@Test
	def startServices {
		this.manager.startServices(this.logger)
		// Dependencies:
		// 1 ->
		// 2 -> 4, 5
		// 3 Free
		// 4 ->
		// 5 -> 1
		// 6 Infra ->
		//
		// Graph:
		// 6
		// 2 -> 5 -> 1
		//   -> 4
		// 3
		var services = <Serv>newTreeSet [a, b |
			if (a.startOrder <= b.startOrder) -1 else 1
		]
		services.add(this.service1)
		services.add(this.service2)
		services.add(this.service3)
		services.add(this.service4)
		services.add(this.service5)
		services.add(this.service6)

		var iterator = services.iterator
		assertSame(this.service1, iterator.next)
		assertSame(this.service2, iterator.next)
		assertSame(this.service3, iterator.next)
		assertSame(this.service4, iterator.next)
		assertSame(this.service5, iterator.next)
		assertSame(this.service6, iterator.next)
		assertFalse(iterator.hasNext)
	}
	
	@Test
	def stopServices {
		this.manager.startServices(this.logger)
		this.manager.stopServices(this.logger)
		// Dependencies:
		// 1 ->
		// 2 -> 4, 5
		// 3 Free
		// 4 ->
		// 5 -> 1
		// 6 Infra ->
		//
		// Graph:
		// 3
		// 2 -> 5 -> 1
		//   -> 4
		// 6
		var services = <Serv>newTreeSet [a, b |
			if (a.stopOrder <= b.getStopOrder()) -1 else 1
		]
		services.add(this.service1)
		services.add(this.service2)
		services.add(this.service3)
		services.add(this.service4)
		services.add(this.service5)
		services.add(this.service6)

		var iterator = services.iterator
		assertSame(this.service1, iterator.next)
		assertSame(this.service2, iterator.next)
		assertSame(this.service3, iterator.next)
		assertSame(this.service4, iterator.next)
		assertSame(this.service5, iterator.next)
		assertSame(this.service6, iterator.next)
		assertFalse(iterator.hasNext)
	}

}
