/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services

import com.google.common.util.concurrent.Service
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.ServicesConfig
import io.sarl.sre.services.AbstractServiceManager
import io.sarl.sre.services.logging.JulLoggerCreator
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.units.services.mocks.SreServ1
import io.sarl.sre.tests.units.services.mocks.SreServ1Impl
import io.sarl.sre.tests.units.services.mocks.SreServ2
import io.sarl.sre.tests.units.services.mocks.SreServ2Impl
import io.sarl.sre.tests.units.services.mocks.SreServ3
import io.sarl.sre.tests.units.services.mocks.SreServ3Impl
import io.sarl.sre.tests.units.services.mocks.SreServ4
import io.sarl.sre.tests.units.services.mocks.SreServ4Impl
import io.sarl.sre.tests.units.services.mocks.SreServ5
import io.sarl.sre.tests.units.services.mocks.SreServ5Impl
import io.sarl.tests.api.Nullable
import java.io.PrintStream
import java.util.List
import java.util.concurrent.atomic.AtomicInteger
import java.util.logging.Logger
import org.junit.Before
import org.junit.Test

import static org.mockito.Mockito.when

import static extension org.mockito.ArgumentMatchers.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractServiceManagerTest<T extends AbstractServiceManager> extends AbstractSreTest {

	@Nullable
	var counter : AtomicInteger
	
	@Nullable
	var counter2 : AtomicInteger

	@Nullable
	var service1 : SreServ1

	@Nullable
	var service2 : SreServ2

	@Nullable
	var service3 : SreServ3

	@Nullable
	var service4 : SreServ4

	@Nullable
	var service5 : SreServ5

	@Nullable
	var logger : Logger

	@Nullable
	var loggerCreator : JulLoggerCreator

	@Nullable
	var configuration : SreConfig

	@Nullable
	var manager : T

	@Before
	def setUp : void {
		this.configuration = typeof(SreConfig).mock
		var servicesConfig = typeof(ServicesConfig).mock
		when(this.configuration.services).thenReturn(servicesConfig)
		when(servicesConfig.startTimeout).thenReturn(-1l)
		when(servicesConfig.stopTimeout).thenReturn(-1l)

		this.logger = typeof(Logger).mock
		this.loggerCreator = typeof(JulLoggerCreator).mock
		when(this.loggerCreator.createPlatformLogger).thenReturn(this.logger)
		when(this.loggerCreator.createModuleLogger(any, typeof(Logger).any)).thenReturn(this.logger)
		when(this.loggerCreator.createConsoleLogger(any, typeof(PrintStream).any)).thenReturn(this.logger)
		this.counter = new AtomicInteger
		this.counter2 = new AtomicInteger
		this.service1 = new SreServ1Impl(counter, counter2)
		this.service2 = new SreServ2Impl(counter, counter2)
		this.service3 = new SreServ3Impl(counter, counter2)
		this.service4 = new SreServ4Impl(counter, counter2)
		this.service5 = new SreServ5Impl(counter, counter2)
		var services : List<? extends Service> = #[this.service1, this.service2, this.service3, this.service4, this.service5]
		this.manager = newServiceManagerInstance(this.loggerCreator, services, this.configuration)
	}

	protected abstract def newServiceManagerInstance(loggerCreator : JulLoggerCreator,
			services : Iterable<? extends Service>,
			config : SreConfig) : T

	@Test
	def startServices {
		this.manager.startServices(this.logger)

		assertPositiveOrZero(this.service1.startOrder)
		assertEquals(-1, this.service1.stopOrder)

		assertPositiveOrZero(this.service2.startOrder)
		assertEquals(-1, this.service2.stopOrder)

		assertPositiveOrZero(this.service3.startOrder)
		assertEquals(-1, this.service3.stopOrder)

		assertPositiveOrZero(this.service4.startOrder)
		assertEquals(-1, this.service4.stopOrder)

		assertPositiveOrZero(this.service5.startOrder)
		assertEquals(-1, this.service5.stopOrder)
	}
	
	@Test
	def stopServices {
		this.manager.startServices(this.logger)
		this.manager.stopServices(this.logger)

		assertPositiveOrZero(this.service1.startOrder)
		assertPositiveOrZero(this.service1.stopOrder)

		assertPositiveOrZero(this.service2.startOrder)
		assertPositiveOrZero(this.service2.stopOrder)

		assertPositiveOrZero(this.service3.startOrder)
		assertPositiveOrZero(this.service3.stopOrder)

		assertPositiveOrZero(this.service4.startOrder)
		assertPositiveOrZero(this.service4.stopOrder)

		assertPositiveOrZero(this.service5.startOrder)
		assertPositiveOrZero(this.service5.stopOrder)
	}

}
