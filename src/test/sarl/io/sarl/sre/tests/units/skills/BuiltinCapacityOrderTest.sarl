/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills

import io.sarl.lang.core.Skill
import io.sarl.sre.skills.BuiltinCapacitiesOrder
import io.sarl.sre.skills.bic.BehaviorsSkill
import io.sarl.sre.skills.bic.DefaultContextInteractionsSkill
import io.sarl.sre.skills.bic.ExternalContextAccessSkill
import io.sarl.sre.skills.bic.InnerContextAccessSkill
import io.sarl.sre.skills.bic.LifecycleSkill
import io.sarl.sre.skills.bic.LoggingSkill
import io.sarl.sre.skills.bic.SchedulesSkill
import io.sarl.sre.skills.bic.TimeSkill
import io.sarl.sre.skills.internal.InternalEventBusSkill
import io.sarl.sre.skills.internal.MicroKernelSkill
import io.sarl.sre.tests.testutils.AbstractSreTest
import org.arakhne.afc.util.IntegerList
import org.junit.Before
import org.junit.Test

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class BuiltinCapacityOrderTest extends AbstractSreTest {

	static val NB_BUILTIN_CAPACITIES = 10
	
	@Before
	def setUp {	
	}

	@Test
	def ensureAllBuilinSkillsAreSpecified {
		var skills = <Class<? extends Skill>>newHashSet
		for (type : BuiltinCapacitiesOrder::SKILL_INSTALLATION_ORDER) {
			skills += type
		}
		// SRE specific builtin capacities
		assertNotNull(skills.remove(typeof(MicroKernelSkill)))
		assertNotNull(skills.remove(typeof(InternalEventBusSkill)))
		// SARL specific builtin capacities
		assertNotNull(skills.remove(typeof(LoggingSkill)))
		assertNotNull(skills.remove(typeof(TimeSkill)))
		assertNotNull(skills.remove(typeof(LifecycleSkill)))
		assertNotNull(skills.remove(typeof(SchedulesSkill)))
		assertNotNull(skills.remove(typeof(InnerContextAccessSkill)))
		assertNotNull(skills.remove(typeof(BehaviorsSkill)))
		assertNotNull(skills.remove(typeof(ExternalContextAccessSkill)))
		assertNotNull(skills.remove(typeof(DefaultContextInteractionsSkill)))
		assertTrue(skills.empty)
	}

	@Test
	def computeInstallationOrder {
		var indexes = new IntegerList
		var order : int

		for (^skill : #[
				typeof(MicroKernelSkill).mock,
				typeof(InternalEventBusSkill).mock,
				typeof(LoggingSkill).mock,
				typeof(TimeSkill).mock,
				typeof(LifecycleSkill).mock,
				typeof(SchedulesSkill).mock,
				typeof(InnerContextAccessSkill).mock,
				typeof(BehaviorsSkill).mock,
				typeof(ExternalContextAccessSkill).mock,
				typeof(DefaultContextInteractionsSkill).mock]) {
			order = BuiltinCapacitiesOrder::computeInstallationOrder(^skill)
			assertTrue(order < NB_BUILTIN_CAPACITIES)
			assertTrue(indexes.add(order))
		}

		order = BuiltinCapacitiesOrder::computeInstallationOrder(typeof(MySkill).mock)
		assertTrue(order >= NB_BUILTIN_CAPACITIES)
		assertTrue(indexes.add(order))
	}

}