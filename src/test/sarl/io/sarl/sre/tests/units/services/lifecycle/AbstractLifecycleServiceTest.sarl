/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.lifecycle

import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.SpaceID
import io.sarl.sarlspecification.SarlSpecificationChecker
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.lifecycle.AbstractLifecycleService
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.services.lifecycle.AgentState
import io.sarl.sre.services.lifecycle.ContextReference
import io.sarl.sre.services.lifecycle.InvalidSarlSpecificationException
import io.sarl.sre.services.lifecycle.KernelAgentLifecycleListener
import io.sarl.sre.services.lifecycle.LifecycleServiceListener
import io.sarl.sre.services.lifecycle.SkillUninstaller
import io.sarl.sre.services.lifecycle.SpawnDisabledException
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import io.sarl.util.Collections3
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.List
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.mockito.ArgumentMatchers.any
import static org.mockito.Mockito.verifyNoMoreInteractions
import static org.mockito.Mockito.verifyZeroInteractions
import static org.mockito.Mockito.when

import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractLifecycleServiceTest<T extends AbstractLifecycleService> extends AbstractSreTest {

	@Nullable
	protected var contextId : UUID

	@Nullable
	protected var agentId : UUID
	
	@Nullable
	protected var ^agent : Agent

	@Nullable
	protected var agent2 : Agent

	@Nullable
	protected var outContext : Context

	@Nullable
	var executor : ExecutorService

	@Nullable
	var logger : LoggingService

	@Nullable
	protected var checker : SarlSpecificationChecker

	@Nullable
	var skillInstaller : SkillUninstaller

	@Nullable
	var eventBus : MyEventBus

	@Nullable
	protected var service : T
	
	@Before
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.outContext = typeof(Context).mock
		this.eventBus = new MyEventBus().spy
		when(this.outContext.ID).thenReturn(this.contextId)
		var ^space = typeof(OpenEventSpace).mock
		when(this.outContext.defaultSpace).thenReturn(^space)
		when(^space.spaceID).thenReturn(new SpaceID(this.contextId, UUID::randomUUID, typeof(OpenEventSpaceSpecification)))
		this.agentId = UUID::randomUUID()
		this.^agent = new MyAgent0(this.contextId, this.agentId).spy
		when(this.^agent.ID).thenReturn(this.agentId)
		this.agent2 = new MyAgent0(this.contextId, this.agentId, this.eventBus).spy
		when(this.^agent.ID).thenReturn(this.agentId)
		this.checker = typeof(SarlSpecificationChecker).mock
		this.service = newService.spy
		this.executor = typeof(ExecutorService).mock
		this.service.executorService = this.executor
		this.logger = typeof(LoggingService).mock
		this.service.loggingService = this.logger
		this.skillInstaller = typeof(SkillUninstaller).mock
		this.service.skillUninstaller = this.skillInstaller
		this.service.externalContextMemberListenerProvider = [ typeof(ExternalContextMemberListener).mock ]
		this.service.lifecycleServiceListenerProvider = [ typeof(LifecycleServiceListener).mock ]
	}

	protected abstract def newService : T

	protected def startService {
		startServiceManually(this.service)
	}
	
	private def createInnerContext(ids : UUID*) {
		var innerContext = typeof(Context).mock
		AgentLife::getLife(this.^agent).innerContext = innerContext
		var ^space = typeof(OpenEventSpace).mock
		when(innerContext.defaultSpace).thenReturn(^space)
		var set = <UUID>newHashSet
		set += this.agentId
		set += ids
		when(^space.participants).thenReturn(Collections3.unmodifiableSynchronizedSet(set, this))
	}

	private def createOuterContext(^agent : Agent) : Context {
		var contextId = UUID::randomUUID
		var context = typeof(Context).mock
		when(context.ID).thenReturn(contextId)
		var ^space = typeof(OpenEventSpace).mock
		when(context.defaultSpace).thenReturn(^space)
		when(^space.spaceID).thenReturn(new SpaceID(contextId, UUID::randomUUID, typeof(OpenEventSpaceSpecification)))
		var set = <UUID>newHashSet
		set += this.agentId
		set += #[^agent.ID]
		when(^space.participants).thenReturn(Collections3.unmodifiableSynchronizedSet(set, this))
		return context
	}

	@Test
	def isKillableAgent_noInnerContext {
		assertTrue(this.service.isKillableAgent(this.^agent))
	}

	@Test
	def isKillableAgent_emptyInnerContext {
		createInnerContext
		assertTrue(this.service.isKillableAgent(this.^agent))
	}

	@Test
	def isKillableAgent_oneChild {
		createInnerContext(UUID::randomUUID)
		assertFalse(this.service.isKillableAgent(this.^agent))
	}

	@Test
	def isKillableAgent_twoChild {
		createInnerContext(UUID::randomUUID, UUID::randomUUID)
		assertFalse(this.service.isKillableAgent(this.^agent))
	}

	@Test(expected = typeof(SpawnDisabledException))
	def spawnAgent_0_serviceNotStarted {
		var result = this.service.spawnAgent(0, null, this.outContext, null, null, null)
		result.throwAnyError
	}
	
	@Test(expected = typeof(SpawnDisabledException))
	def spawnAgent_0 {
		startService
		var result = this.service.spawnAgent(0, null, this.outContext, null, null, null)
		result.throwAnyError
	}

	@Test(expected = typeof(SpawnDisabledException))
	def spawnAgent_1_serviceNotStarted {
		var result = this.service.spawnAgent(1, null, this.outContext, null, null, null)
		result.throwAnyError
	}

	@Test
	def spawnAgent_1 {
		startService
		var newAgentId = UUID::randomUUID
		when(this.agent2.ID).thenReturn(newAgentId)
		var listener1 = typeof(LifecycleServiceListener).mock
		this.service.addLifecycleServiceListener(listener1)
		var listener2 = typeof(KernelAgentLifecycleListener).mock
		this.service.addKernelAgentLifecycleListener(listener2)
		
		when(this.checker.isValidSarlElement(any)).thenReturn(true)
		
		var result = this.service.spawnAgent(1, this.agentId, this.outContext, newAgentId, typeof(MyAgent0), 1, "a")
		var ids = result.spawnedAgents

		// Created agent identifiers
		assertNotNull(ids)
		assertContains(ids, newAgentId)
	
		// Agent State
		assertSame(AgentState.ALIVE, AgentLife::getLife(this.agent2).state)
		
		// Agent Initialize
		var capEvent = ArgumentCaptor::forClass(typeof(Event))
		var capGatherEvents = ArgumentCaptor::forClass(typeof(boolean))
		var capThrownExceptions = ArgumentCaptor::forClass(typeof(boolean))
		this.eventBus.verify.fireEventAndWait(capEvent.capture, capGatherEvents.capture.booleanValue,
			capThrownExceptions.capture.booleanValue)
		assertTrue(capGatherEvents.value)
		assertTrue(capThrownExceptions.value)
		assertInstanceOf(typeof(Initialize), capEvent.value)
		var initEvent = capEvent.value as Initialize
		assertNotNull(initEvent.source)
		assertEquals(this.agentId, initEvent.spawner)
		assertContains(initEvent.parameters, 1, "a")

		// Agent spawned
		var capSpawningAgent = ArgumentCaptor::forClass(typeof(UUID))
		var capParentContext = ArgumentCaptor::forClass(typeof(Context))
		var capAgentType = ArgumentCaptor::forClass(typeof(Class))
		var capAgents = ArgumentCaptor::forClass(typeof(List))
		var capParams = ArgumentCaptor::forClass(typeof(Object[]))
		listener1.verify.agentSpawned(
				capSpawningAgent.capture,
				capParentContext.capture,
				capAgentType.capture,
				capAgents.capture,
				capParams.capture)
		assertEquals(this.agentId, capSpawningAgent.value)
		assertSame(this.outContext, capParentContext.value)
		assertSame(typeof(MyAgent0), capAgentType.value)
		assertContains(#[capParams.value], 1, "a")
		var agents = capAgents.value
		assertEquals(1, agents.size)
		assertSame(this.agent2, agents.get(0))

		// Kernel event.
		verifyZeroInteractions(listener2)
	}

	@Test(expected = typeof(InvalidSarlSpecificationException))
	def spawnAgent_1_noSpec {
		startService
		var newAgentId = UUID::randomUUID
		var result = this.service.spawnAgent(1, this.agentId, this.outContext, newAgentId, typeof(InvalidMyAgent1), 1, "a")
		result.throwAnyError
	}

	@Test(expected = typeof(InvalidSarlSpecificationException))
	def spawnAgent_1_invalidSpec {
		startService
		var newAgentId = UUID::randomUUID
		var result = this.service.spawnAgent(1, this.agentId, this.outContext, newAgentId, typeof(InvalidMyAgent2), 1, "a")
		result.throwAnyError
	}

	@Test
	def killAgent_noInnerContext_serviceNotStarted {
		assertFalse(this.service.killAgent(this.^agent))
	}

	@Test
	def killAgent_noInnerContext_serviceStarted {
		var listener1 = typeof(LifecycleServiceListener).mock
		this.service.addLifecycleServiceListener(listener1)
		var listener2 = typeof(KernelAgentLifecycleListener).mock
		this.service.addKernelAgentLifecycleListener(listener2)

		startService
		var defaultContext = createOuterContext(this.agent2)
		AgentLife::getLife(this.agent2).setDefaultContext(defaultContext,
				new Address(defaultContext.defaultSpace.spaceID, this.^agent.ID))
		var outerContext = createOuterContext(this.agent2)
		AgentLife::getLife(this.agent2).addExternalContext(outerContext,
				new Address(outerContext.defaultSpace.spaceID, this.^agent.ID))

		assertTrue(this.service.killAgent(this.agent2))
		
		// Uninstall the skills
		var capAgent = ArgumentCaptor::forClass(typeof(Agent))
		this.skillInstaller.verify.uninstallSkillsBeforeDestroy(capAgent.capture)
		assertSame(this.agent2, capAgent.value)
		
		capAgent = ArgumentCaptor::forClass(typeof(Agent))
		var capSkills = ArgumentCaptor::forClass(typeof(Iterable))
		this.skillInstaller.verify.uninstallSkillsAfterDestroy(capAgent.capture, capSkills.capture)
		assertSame(this.agent2, capAgent.value)
		assertNotNull(capSkills.value)

		// Destroy event
		var capEvent = ArgumentCaptor::forClass(typeof(Event))
		var capGatherEvents = ArgumentCaptor::forClass(typeof(boolean))
		var capThrownExceptions = ArgumentCaptor::forClass(typeof(boolean))
		this.eventBus.verify.fireEventAndWait(capEvent.capture, capGatherEvents.capture.booleanValue,
			capThrownExceptions.capture.booleanValue)
		assertFalse(capGatherEvents.value)
		assertFalse(capThrownExceptions.value)
		assertInstanceOf(typeof(Destroy), capEvent.value)
		var destroyEvent = capEvent.value as Destroy
		assertNotNull(destroyEvent.source)
		
		// Agent destroy notification
		capAgent = ArgumentCaptor::forClass(typeof(Agent))
		var capContexts : ArgumentCaptor<Iterable<ContextReference>> = ArgumentCaptor::forClass(typeof(Iterable))
		listener1.verify.agentDestroyed(capAgent.capture, capContexts.capture)
		assertEquals(this.agent2, capAgent.value)
		assertContains(
			capContexts.value.map [it.getContext],
				defaultContext, outerContext)
		
		// Kernel destroy
		verifyNoMoreInteractions(listener2)
	}

	@Test
	def killAgent_emptyInnerContext_serviceNotStarted {
		createInnerContext
		assertTrue(this.service.isKillableAgent(this.^agent))
	}

	@Test
	def killAgent_emptyInnerContext_serviceStarted {
		startService
		createInnerContext
		assertTrue(this.service.isKillableAgent(this.^agent))
	}

	@Test
	def killAgent_oneChild {
		createInnerContext(UUID::randomUUID)
		assertFalse(this.service.isKillableAgent(this.^agent))
	}

	@Test
	def killAgent_twoChild {
		createInnerContext(UUID::randomUUID, UUID::randomUUID)
		assertFalse(this.service.isKillableAgent(this.^agent))
	}

}
