/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.bic

import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Event
import io.sarl.lang.core.Scope
import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.skills.bic.DefaultContextInteractionsSkill
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.units.skills.bic.mocks.MyAgent3
import io.sarl.tests.api.Nullable
import io.sarl.util.concurrent.NoReadWriteLock
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.mockito.Mockito.when

import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class DefaultContextInteractionsSkillTest extends AbstractSreTest {

	@Nullable
	var contextId : UUID

	@Nullable
	var agentId : UUID

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : DefaultContextInteractionsSkill

	@Before
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.^agentId = UUID::randomUUID
		this.^agent = new MyAgent3(contextId, this.^agentId).spy
		this.^skill = new DefaultContextInteractionsSkill[NoReadWriteLock::SINGLETON]
		this.reflect.invoke(this.^skill, "setOwner", this.^agent)
	}

	@Test
	def getDefaultContext {
		var ctx = typeof(Context).mock
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx, typeof(Address).mock)
		assertSame(ctx, this.^skill.defaultContext)
	}

	@Test
	def getDefaultSpace {
		var ctx = typeof(Context).mock
		var ^space = typeof(OpenEventSpace).mock
		when(ctx.defaultSpace).thenReturn(^space)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx, typeof(Address).mock)

		assertSame(^space, this.^skill.defaultSpace)
	}

	@Test
	def getDefaultAddress {
		var adr = typeof(Address).mock
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(typeof(Context).mock, adr)

		assertSame(adr, this.^skill.defaultAddress)
	}

	@Test
	def isDefaultContextAgentContext {
		var id0 = UUID::randomUUID
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(id0)
		var id1 = UUID::randomUUID
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(id1)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultContext(ctx0))
		assertTrue(this.^skill.isDefaultContext(ctx1))
	}

	@Test
	def isDefaultContextUUID {
		var id0 = UUID::randomUUID
		var ctx0 = typeof(Context).mock
		when(ctx0.ID).thenReturn(id0)
		var id1 = UUID::randomUUID
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(id1)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultContext(id0))
		assertTrue(this.^skill.isDefaultContext(id1))
	}

	@Test
	def isDefaultSpaceSpace {
		var ctx0 = typeof(Context).mock
		var space0 = typeof(OpenEventSpace).mock
		var id0 = typeof(SpaceID).mock
		when(space0.spaceID).thenReturn(id0)
		when(ctx0.defaultSpace).thenReturn(space0)
		var ctx1 = typeof(Context).mock
		var space1 = typeof(OpenEventSpace).mock
		var id1 = typeof(SpaceID).mock
		when(space1.spaceID).thenReturn(id1)
		when(ctx1.defaultSpace).thenReturn(space1)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultSpace(space0))
		assertTrue(this.^skill.isDefaultSpace(space1))
	}

	@Test
	def isDefaultSpaceSpaceID {
		var ctx0 = typeof(Context).mock
		var space0 = typeof(OpenEventSpace).mock
		var id0 = typeof(SpaceID).mock
		when(space0.spaceID).thenReturn(id0)
		when(ctx0.defaultSpace).thenReturn(space0)
		var ctx1 = typeof(Context).mock
		var space1 = typeof(OpenEventSpace).mock
		var id1 = typeof(SpaceID).mock
		when(space1.spaceID).thenReturn(id1)
		when(ctx1.defaultSpace).thenReturn(space1)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultSpace(id0))
		assertTrue(this.^skill.isDefaultSpace(id1))
	}

	@Test
	def isDefaultSpaceUUID {
		var ctx0 = typeof(Context).mock
		var space0 = typeof(OpenEventSpace).mock
		var id0 = UUID::randomUUID
		when(space0.spaceID).thenReturn(new SpaceID(UUID::randomUUID, id0, typeof(OpenEventSpaceSpecification)))
		when(ctx0.defaultSpace).thenReturn(space0)
		var ctx1 = typeof(Context).mock
		var space1 = typeof(OpenEventSpace).mock
		var id1 = UUID::randomUUID
		when(space1.spaceID).thenReturn(new SpaceID(UUID::randomUUID, id1, typeof(OpenEventSpaceSpecification)))
		when(ctx1.defaultSpace).thenReturn(space1)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx1, typeof(Address).mock)

		assertFalse(this.^skill.isDefaultSpace(id0))
		assertTrue(this.^skill.isDefaultSpace(id1))
	}

	@Test
	def isInDefaultSpace {
		var id0 = typeof(SpaceID).mock
		var adr0 = new Address(id0, UUID::randomUUID)
		var event0 = typeof(Event).mock
		when(event0.source).thenReturn(adr0)
		var space0 = typeof(OpenEventSpace).mock
		when(space0.spaceID).thenReturn(id0)

		var id1 = typeof(SpaceID).mock
		var adr1 = new Address(id1, UUID::randomUUID)
		var event1 = typeof(Event).mock
		when(event1.source).thenReturn(adr1)
		var space1 = typeof(OpenEventSpace).mock
		when(space1.spaceID).thenReturn(id1)

		var ctx0 = typeof(Context).mock
		when(ctx0.defaultSpace).thenReturn(space1)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx0, typeof(Address).mock)

		assertFalse(this.^skill.isInDefaultSpace(event0))
		assertTrue(this.^skill.isInDefaultSpace(event1))
	}

	@Test
	def emit_noScope {
		var ^space = typeof(OpenEventSpace).mock
		var ctx = typeof(Context).mock
		when(ctx.defaultSpace).thenReturn(^space)
		var ^event = new Event {}.spy
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx, typeof(Address).mock)
		
		this.^skill.emit(^event)
		
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		^space.verify.emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertNull(capturedScope.value)
		assertNotNull(^event.source)
	}

	@Test
	def emit_scope {
		var ^space = typeof(OpenEventSpace).mock
		var ctx = typeof(Context).mock
		when(ctx.defaultSpace).thenReturn(^space)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(ctx, typeof(Address).mock)
		var ^event = new Event {}.spy
		var scope = typeof(Scope).mock
		
		this.^skill.emit(^event, scope)
		
		var capturedSource = ArgumentCaptor::forClass(typeof(UUID))
		var capturedEvent = ArgumentCaptor::forClass(typeof(Event))
		var capturedScope = ArgumentCaptor::forClass(typeof(Scope))
		verify(^space).emit(capturedSource.capture, capturedEvent.capture, capturedScope.capture)
		assertEquals(this.^agentId, capturedSource.value)
		assertSame(^event, capturedEvent.value)
		assertSame(scope, capturedScope.value)
		assertNotNull(^event.source)
	}

}
