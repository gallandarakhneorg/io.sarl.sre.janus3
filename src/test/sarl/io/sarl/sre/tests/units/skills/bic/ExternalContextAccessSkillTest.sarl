/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.skills.bic

import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.context.InternalContextMembershipListener
import io.sarl.sre.services.lifecycle.AgentLife
import io.sarl.sre.services.lifecycle.AgentState
import io.sarl.sre.skills.bic.ExternalContextAccessSkill
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.sre.tests.units.skills.bic.mocks.MyAgent4
import io.sarl.sre.tests.units.skills.bic.mocks.MyInternalEventBusSkill2
import io.sarl.tests.api.ManualMocking
import io.sarl.tests.api.Nullable
import io.sarl.util.concurrent.NoReadWriteLock
import java.util.UUID
import org.junit.Before
import org.junit.Test
import org.mockito.ArgumentCaptor

import static org.mockito.ArgumentMatchers.any
import static org.mockito.Mockito.verifyNoMoreInteractions
import static org.mockito.Mockito.when

import static extension org.mockito.Mockito.times
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@ManualMocking
class ExternalContextAccessSkillTest extends AbstractSreTest {

	@Nullable
	var service : ContextService
	
	@Nullable
	var contextId : UUID
	
	@Nullable
	var agentId : UUID

	@Nullable
	var rootContext : Context

	@Nullable
	var defaultContext : Context

	@Nullable
	var defaultSpace : OpenEventSpace

	@Nullable
	var ^agent : Agent

	@Nullable
	var ^skill : ExternalContextAccessSkill

	@Nullable
	var eventBusListener : InformedEventListener

	@Nullable
	var eventBus : MyInternalEventBusSkill2

	@Nullable
	var emitter1 : ExternalContextMemberListener

	@Nullable
	var emitter2 : InternalContextMembershipListener
	
	@Before
	def setUp : void {
		this.contextId = UUID::randomUUID
		this.^agentId = UUID::randomUUID
		this.eventBusListener = typeof(InformedEventListener).mock
		this.eventBus = new MyInternalEventBusSkill2().spy
		when(this.eventBus.associatedEventBusListener).thenReturn(this.eventBusListener)
		this.rootContext = typeof(Context).mock
		this.service = typeof(ContextService).mock
		when(this.service.rootContext).thenReturn(this.rootContext)
		this.^agent = spy(new MyAgent4(contextId, this.^agentId, this.eventBus))
		var defSpaceId = new SpaceID(this.contextId, UUID::randomUUID, typeof(OpenEventSpaceSpecification))
		var adr = new Address(defSpaceId, this.^agentId)
		this.defaultSpace = typeof(OpenEventSpace).mock
		when(this.defaultSpace.spaceID).thenReturn(defSpaceId)
		this.defaultContext = typeof(Context).mock
		when(this.defaultContext.ID).thenReturn(this.contextId)
		when(this.defaultContext.defaultSpace).thenReturn(this.defaultSpace)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setDefaultContext(defaultContext, adr)
		this.emitter1 = typeof(ExternalContextMemberListener).mock
		this.emitter2 = typeof(InternalContextMembershipListener).mock
		this.^skill = new ExternalContextAccessSkill(this.service, [emitter1], [emitter2], [NoReadWriteLock::SINGLETON])
		this.reflect.invoke(this.^skill, "setOwner", this.^agent)
		this.reflect.invoke(this.^skill, "install")
	}

	private def forceOneExternalContextCreation : Context[] {
		var id1 = UUID::fromString("00000001-0000-0000-0000-000000000000")
		var ctx1 = typeof(Context).mock
		when(ctx1.ID).thenReturn(id1)
		var sid1 = new SpaceID(id1, UUID::fromString("00000001-0001-0000-0000-000000000000"), typeof(OpenEventSpaceSpecification))
		var space1 = typeof(OpenEventSpace).mock
		when(space1.spaceID).thenReturn(sid1)
		when(ctx1.defaultSpace).thenReturn(space1)
		var adr1 = new Address(sid1, this.^agentId)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).addExternalContext(ctx1, adr1)
		return #[ctx1]
	}

	private def forceTwoExternalContextCreation : Context[] {
		var first = forceOneExternalContextCreation
		var id2 = UUID::fromString("00000002-0000-0000-0000-000000000000")
		var ctx2 = typeof(Context).mock
		when(ctx2.ID).thenReturn(id2)
		var sid2 = new SpaceID(id2, UUID::fromString("00000001-0001-0000-0000-000000000000"), typeof(OpenEventSpaceSpecification))
		var space2 = typeof(OpenEventSpace).mock
		when(space2.spaceID).thenReturn(sid2)
		when(ctx2.defaultSpace).thenReturn(space2)
		var adr2 = new Address(sid2, this.^agentId)
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).addExternalContext(ctx2, adr2)

		return #[first.get(0), ctx2]
	}

	@Test
	def getUniverseContext {
		assertSame(this.rootContext, this.^skill.universeContext)
	}

	@Test
	def getContext_noExternalContext {
		assertSame(this.defaultContext, this.^skill.getContext(this.contextId))
		assertNull(this.^skill.getContext(UUID::randomUUID))
	}

	@Test
	def getContext_withExternalContext {
		var ctx = forceTwoExternalContextCreation
		assertSame(this.defaultContext, this.^skill.getContext(this.contextId))
		for (c : ctx) {
			assertSame(c, this.^skill.getContext(c.ID))
		}
		assertNull(this.^skill.getContext(UUID::randomUUID))
	}

	@Test
	def getAllContexts_noExternalContext {
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext)
	}

	@Test
	def getAllContexts_withExternalContext {
		var ctx = forceTwoExternalContextCreation
		var actual = this.^skill.allContexts
		assertContains(actual, ctx.get(0), ctx.get(1), this.defaultContext)
	}

	@Test
	def isInSpaceUUID {
		var spaceId1 = UUID::randomUUID
		var spaceId2 = UUID::randomUUID
		var ^event = typeof(Event).mock
		var adr1 = new Address(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)), this.^agentId)
		when(^event.source).thenReturn(adr1)
		
		assertTrue(this.^skill.isInSpace(^event, spaceId1))
		assertFalse(this.^skill.isInSpace(^event, spaceId2))
	}

	@Test
	def isInSpaceSpaceID {
		var spaceId1 = UUID::randomUUID
		var spaceId2 = UUID::randomUUID
		var ^event = typeof(Event).mock
		var adr1 = new Address(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)), this.^agentId)
		when(^event.source).thenReturn(adr1)
		
		assertTrue(this.^skill.isInSpace(^event, new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification))))
		assertFalse(this.^skill.isInSpace(^event, new SpaceID(this.contextId, spaceId2, typeof(OpenEventSpaceSpecification))))
		assertFalse(this.^skill.isInSpace(^event, new SpaceID(UUID::randomUUID, spaceId1, typeof(OpenEventSpaceSpecification))))
		assertFalse(this.^skill.isInSpace(^event, new SpaceID(UUID::randomUUID, spaceId2, typeof(OpenEventSpaceSpecification))))
	}

	@Test
	def isInSpaceSpace {
		var spaceId1 = UUID::randomUUID
		var spaceId2 = UUID::randomUUID
		var ^event = typeof(Event).mock
		var adr1 = new Address(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)), this.^agentId)
		when(^event.source).thenReturn(adr1)
	
		var space1 = typeof(Space).mock
		when(space1.spaceID).thenReturn(new SpaceID(this.contextId, spaceId1, typeof(OpenEventSpaceSpecification)))
		
		var space2 = typeof(Space).mock
		when(space2.spaceID).thenReturn(new SpaceID(this.contextId, spaceId2, typeof(OpenEventSpaceSpecification)))

		var space3 = typeof(Space).mock
		when(space3.spaceID).thenReturn(new SpaceID(UUID::randomUUID, spaceId1, typeof(OpenEventSpaceSpecification)))

		var space4 = typeof(Space).mock
		when(space4.spaceID).thenReturn(new SpaceID(UUID::randomUUID, spaceId2, typeof(OpenEventSpaceSpecification)))

		assertTrue(this.^skill.isInSpace(^event, space1))
		assertFalse(this.^skill.isInSpace(^event, space2))
		assertFalse(this.^skill.isInSpace(^event, space3))
		assertFalse(this.^skill.isInSpace(^event, space4))
	}

	@Test
	def join_defaultContext {
		assertFalse(this.^skill.join(this.contextId, this.defaultSpace.spaceID.ID))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	def join_joinedExternalContext {
		var ctxs = forceTwoExternalContextCreation
		
		assertFalse(this.^skill.join(ctxs.get(0).ID, ctxs.get(0).defaultSpace.spaceID.ID))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext, ctxs.get(0), ctxs.get(1))
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	def join_unknownContext {
		assertFalse(this.^skill.join(UUID::randomUUID, this.defaultSpace.spaceID.ID))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	def join_invalidSpaceId {
		// Create a context into the context service
		var ctxId = UUID::randomUUID
		var spId = UUID::randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)
		
		assertFalse(this.^skill.join(ctxId, this.defaultSpace.spaceID.ID))

		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	def join_validSpaceId_firstExternalContext_notAlive {
		// Create a context into the context service
		var ctxId = UUID::randomUUID
		var spId = UUID::randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		assertFalse(this.^skill.join(ctxId, spId))
	}

	@Test
	def join_validSpaceId_firstExternalContext_alive {
		// Create a context into the context service
		var ctxId = UUID::randomUUID
		var spId = UUID::randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		// Force alive
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).setState(AgentState::ALIVE)
		
		assertTrue(this.^skill.join(ctxId, spId))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext, context)
		
		var captedContextId = ArgumentCaptor::forClass(typeof(UUID))
		var captedSpaceId = ArgumentCaptor::forClass(typeof(UUID))
		verify(emitter2, times(1)).contextJoined(captedContextId.capture, captedSpaceId.capture)
		assertEquals(ctxId, captedContextId.value)
		assertEquals(spId, captedSpaceId.value)

		var captedContext = ArgumentCaptor::forClass(typeof(AgentContext))
		var captedSpaceID = ArgumentCaptor::forClass(typeof(SpaceID))
		var captedAgentID = ArgumentCaptor::forClass(typeof(UUID))
		var captedType = ArgumentCaptor::forClass(typeof(String))
		emitter1.verify(1.times).memberJoined(
				captedContext.capture, captedSpaceID.capture,
				captedAgentID.capture, captedType.capture)
		assertSame(context, captedContext.value)
		assertEquals(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)), captedSpaceID.value)
		assertEquals(this.^agentId, captedAgentID.value)
		assertEquals(this.^agent.class.name, captedType.value)
	}

	@Test
	def join_validSpaceId_withExternalContexts_notAlive {
		forceTwoExternalContextCreation
		
		// Create a context into the context service
		var ctxId = UUID::randomUUID
		var spId = UUID::randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		assertFalse(this.^skill.join(ctxId, spId))
	}

	@Test
	def join_validSpaceId_withExternalContexts_alive {
		var ctxs = forceTwoExternalContextCreation
		
		// Create a context into the context service
		var ctxId = UUID::randomUUID
		var spId = UUID::randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)))
		var context = typeof(Context).mock
		when(context.defaultSpace).thenReturn(^space)
		when(context.ID).thenReturn(ctxId)
		when(this.service.getContext(any)).thenReturn(context)

		// Force alive
		AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).state = AgentState::ALIVE

		assertTrue(this.^skill.join(ctxId, spId))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext, ctxs.get(0), ctxs.get(1), context)

		var captedContextId = ArgumentCaptor::forClass(typeof(UUID))
		var captedSpaceId = ArgumentCaptor::forClass(typeof(UUID))
		emitter2.verify(1.times).contextJoined(captedContextId.capture, captedSpaceId.capture)
		assertEquals(ctxId, captedContextId.value)
		assertEquals(spId, captedSpaceId.value)

		var captedContext = ArgumentCaptor::forClass(typeof(AgentContext))
		var captedSpaceID= ArgumentCaptor::forClass(typeof(SpaceID))
		var captedAgentID = ArgumentCaptor::forClass(typeof(UUID))
		var captedType = ArgumentCaptor::forClass(typeof(String))
		emitter1.verify(1.times).memberJoined(
				captedContext.capture, captedSpaceID.capture,
				captedAgentID.capture, captedType.capture)
		assertSame(context, captedContext.value)
		assertEquals(new SpaceID(ctxId, spId, typeof(OpenEventSpaceSpecification)), captedSpaceID.value)
		assertEquals(this.^agentId, captedAgentID.value)
		assertEquals(this.^agent.class.name, captedType.value)
	}

	@Test
	def leave_unknownContext {
		assertFalse(this.^skill.leave(UUID::randomUUID))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext)
		assertSame(this.defaultContext,
			AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).defaultContext.context)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	def leave_defaultContext_noExternalContext {
		assertFalse(this.^skill.leave(this.contextId))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext)
		assertSame(this.defaultContext,
			AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).defaultContext.context)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	def leave_defaultContext_twoExternalContext {
		var ctxs = forceTwoExternalContextCreation

		assertFalse(this.^skill.leave(this.contextId))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext, ctxs.get(0), ctxs.get(1))
		assertSame(this.defaultContext,
			AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).defaultContext.context)
		verifyNoMoreInteractions(emitter1)
		verifyNoMoreInteractions(emitter2)
	}

	@Test
	def leave_defaultContext_oneExternalContext {
		var ctxs = forceOneExternalContextCreation

		assertTrue(this.^skill.leave(this.contextId))
		
		var actual = this.^skill.allContexts
		assertContains(actual, ctxs.get(0))
		assertSame(ctxs.get(0), AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).defaultContext.context)

		var captedContextId = ArgumentCaptor::forClass(typeof(UUID))
		emitter2.verify(1.times).contextLeft(captedContextId.capture)
		assertEquals(this.contextId, captedContextId.value)

		var captedContext = ArgumentCaptor::forClass(typeof(AgentContext))
		var captedSpaceID = ArgumentCaptor::forClass(typeof(SpaceID))
		var captedAgentID = ArgumentCaptor::forClass(typeof(UUID))
		var captedType = ArgumentCaptor::forClass(typeof(String))
		emitter1.verify(1.times).memberLeft(captedContext.capture, captedSpaceID.capture, captedAgentID.capture, captedType.capture)
		assertSame(this.defaultContext, captedContext.value)
		assertEquals(new SpaceID(
				this.contextId,
				this.defaultSpace.spaceID.ID,
				typeof(OpenEventSpaceSpecification)),
				captedSpaceID.value)
		assertEquals(this.^agentId, captedAgentID.value)
		assertEquals(this.^agent.class.name, captedType.value)
	}

	@Test
	def leave_externalContext {
		var ctxs = forceTwoExternalContextCreation

		assertTrue(this.^skill.leave(ctxs.get(1).ID))
		
		var actual = this.^skill.allContexts
		assertContains(actual, this.defaultContext, ctxs.get(0))
		assertSame(this.defaultContext,
			AgentLife::getLife(this.^agent, [NoReadWriteLock::SINGLETON]).defaultContext.context)


		var captedContextId = ArgumentCaptor::forClass(typeof(UUID))
		emitter2.verify(1.times).contextLeft(captedContextId.capture)
		assertEquals(ctxs.get(1).ID, captedContextId.value)

		var captedContext = ArgumentCaptor::forClass(typeof(AgentContext))
		var captedSpaceID = ArgumentCaptor::forClass(typeof(SpaceID))
		var captedAgentID = ArgumentCaptor::forClass(typeof(UUID))
		var captedType = ArgumentCaptor::forClass(typeof(String))
		emitter1.verify(1.times).memberLeft(captedContext.capture, captedSpaceID.capture, captedAgentID.capture, captedType.capture)
		assertSame(ctxs.get(1), captedContext.value)
		assertEquals(new SpaceID(
				ctxs.get(1).ID,
				ctxs.get(1).defaultSpace.spaceID.ID,
				typeof(OpenEventSpaceSpecification)),
				captedSpaceID.value)
		assertEquals(this.^agentId, captedAgentID.value)
		assertEquals(this.^agent.class.name, captedType.value)
	}

}
