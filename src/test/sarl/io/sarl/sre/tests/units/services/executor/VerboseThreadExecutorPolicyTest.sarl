/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.executor

import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.executor.VerboseThreadExecutorPolicy
import io.sarl.sre.services.logging.LoggingService
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import java.util.concurrent.CancellationException
import java.util.concurrent.ThreadPoolExecutor
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Suite
import org.junit.runners.Suite.SuiteClasses
import org.mockito.ArgumentCaptor

import static org.junit.Assert.assertSame
import static org.junit.Assert.fail
import static org.mockito.Mockito.never
import static org.mockito.Mockito.only
import static org.mockito.Mockito.verifyZeroInteractions
import static org.mockito.Mockito.when

import static extension org.mockito.ArgumentMatchers.any
import static extension org.mockito.Mockito.verify

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@RunWith(typeof(Suite))
@SuiteClasses(#[
	typeof(VerboseThreadExecutorPolicyTest.NotShutDownTest),
	typeof(VerboseThreadExecutorPolicyTest.ShutDownTest)
])
@SuppressWarnings("all")
class VerboseThreadExecutorPolicyTest {

	static class NotShutDownTest extends AbstractSreTest {
	
		@Nullable
		var logService : LoggingService

		@Nullable
		var logger : Logger

		@Nullable
		var executor : ThreadPoolExecutor

		@Nullable
		var handler : VerboseThreadExecutorPolicy

		@Before
		def setUp : void {
			this.logger = typeof(Logger).mock
			when(this.logger.isLoggable(typeof(Level).any)).thenReturn(true)
			this.logService = typeof(LoggingService).mock
			when(this.logService.kernelLogger).thenReturn(this.logger)

			this.executor = typeof(ThreadPoolExecutor).mock
			when(this.executor.isShutdown).thenReturn(false)

			this.handler = new VerboseThreadExecutorPolicy(this.logService)
		}

		@Test
		def rejectedExecution {
			var runnable = typeof(Runnable).mock
			this.handler.rejectedExecution(runnable, this.executor)

			runnable.verify(only).run

			var argument0 = ArgumentCaptor::forClass(typeof(Runnable))
			this.executor.verify(never).submit(argument0.capture)
			
			var argument1 = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify(never).log(argument1.capture)
		}

		@Test
		def uncaughtException_Exception {
			var e = new Exception
			e.fillInStackTrace
			this.handler.uncaughtException(Thread.currentThread, e)

			var argument = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify.log(argument.capture)
			assertSame(Level::SEVERE, argument.value.level)
			assertSame(e, argument.value.thrown)
			assertEquals(this.class.name, argument.value.sourceClassName)
			assertEquals("uncaughtException_Exception", argument.value.sourceMethodName) //$NON-NLS-1$
		}

		@Test
		def uncaughtException_EarlyExit {
			try {
				ExecutorService.neverReturn
				fail("Early exit exception is expected")
			} catch (e : Exception) {
				this.handler.uncaughtException(Thread.currentThread, e)
				verifyZeroInteractions(this.logService)
			}
		}

		@Test
		def uncaughtException_Cancellation {
			var e = new CancellationException
			e.fillInStackTrace
			this.handler.uncaughtException(Thread.currentThread, e)

			var argument = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify.log(argument.capture)
			assertSame(Level::FINEST, argument.value.level)
			assertSame(e, argument.value.thrown)
			assertEquals(this.class.name, argument.value.sourceClassName)
			assertEquals("uncaughtException_Cancellation", argument.value.sourceMethodName) //$NON-NLS-1$
		}

		@Test
		def uncaughtException_Interrupt {
			var e = new InterruptedException
			e.fillInStackTrace
			this.handler.uncaughtException(Thread.currentThread, e)

			var argument = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify.log(argument.capture)
			assertSame(Level::FINEST, argument.value.level)
			assertSame(e, argument.value.thrown)
			assertEquals(this.class.name, argument.value.sourceClassName)
			assertEquals("uncaughtException_Interrupt", argument.value.sourceMethodName) //$NON-NLS-1$
		}

	}

	public static class ShutDownTest extends AbstractSreTest {
		
		@Nullable
		var logService : LoggingService

		@Nullable
		var logger : Logger

		@Nullable
		var executor : ThreadPoolExecutor

		@Nullable
		var handler : VerboseThreadExecutorPolicy

		@Before
		def setUp : void {
			this.logger = typeof(Logger).mock
			when(this.logger.isLoggable(typeof(Level).any)).thenReturn(true)
			this.logService = typeof(LoggingService).mock
			when(this.logService.kernelLogger).thenReturn(this.logger)

			this.executor = typeof(ThreadPoolExecutor).mock
			when(this.executor.isShutdown).thenReturn(true)

			this.handler = new VerboseThreadExecutorPolicy(this.logService)
		}

		@Test
		def rejectedExecution {
			var runnable = typeof(Runnable).mock
			this.handler.rejectedExecution(runnable, this.executor)

			verify(runnable, never).run

			var argument0 = ArgumentCaptor::forClass(typeof(Runnable))
			this.executor.verify(never).submit(argument0.capture)
			
			var argument1 = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify.log(argument1.capture)
			assertSame(Level::FINE, argument1.value.level)
		}

		@Test
		def uncaughtException_Exception {
			var e = new Exception
			e.fillInStackTrace
			this.handler.uncaughtException(Thread.currentThread, e)

			var argument = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify.log(argument.capture)
			assertSame(Level::SEVERE, argument.value.level)
			assertSame(e, argument.value.thrown)
			assertEquals(this.class.name, argument.value.sourceClassName)
			assertEquals("uncaughtException_Exception", argument.value.sourceMethodName) //$NON-NLS-1$
		}

		@Test
		def uncaughtException_EarlyExit {
			try {
				ExecutorService.neverReturn
				fail("Early exit exception is expected")
			} catch (e : Exception) {
				this.handler.uncaughtException(Thread.currentThread, e)
				verifyZeroInteractions(this.logService)
			}
		}

		@Test
		def uncaughtException_Cancellation {
			var e = new CancellationException
			e.fillInStackTrace
			this.handler.uncaughtException(Thread.currentThread, e)

			var argument = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify.log(argument.capture)
			assertSame(Level::FINEST, argument.value.level)
			assertSame(e, argument.value.thrown)
			assertEquals(this.class.name, argument.value.sourceClassName)
			assertEquals("uncaughtException_Cancellation", argument.value.sourceMethodName) //$NON-NLS-1$
		}

		@Test
		def uncaughtException_Interrupt {
			var e = new InterruptedException
			e.fillInStackTrace
			this.handler.uncaughtException(Thread.currentThread, e)

			var argument = ArgumentCaptor::forClass(typeof(LogRecord))
			this.logger.verify.log(argument.capture)
			assertSame(Level::FINEST, argument.value.level)
			assertSame(e, argument.value.thrown)
			assertEquals(this.class.name, argument.value.sourceClassName)
			assertEquals("uncaughtException_Interrupt", argument.value.sourceMethodName) //$NON-NLS-1$
		}

	}

}
