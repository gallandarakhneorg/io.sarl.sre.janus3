/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.units.services.context

import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.context.AbstractContextService
import io.sarl.sre.services.context.Context
import io.sarl.sre.tests.testutils.AbstractSreTest
import io.sarl.tests.api.Nullable
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import org.junit.Before
import org.junit.Test

import static org.junit.Assert.assertFalse
import static org.junit.Assert.assertNull
import static org.junit.Assert.assertSame
import static org.junit.Assert.assertTrue
import static org.mockito.Mockito.when

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractContextServiceTest<T extends AbstractContextService> extends AbstractSreTest {

	@Nullable
	protected var context : Context

	@Nullable
	protected var rootContext : Context

	@Nullable
	protected var rootContextId : UUID

	@Nullable
	protected var rootSpaceId : UUID

	@Nullable
	protected var service : T
	
	@Before
	def setUp : void {
		this.rootContextId = UUID::randomUUID
		this.rootContext = typeof(Context).mock
		when(this.rootContext.ID).thenReturn(this.rootContextId)
		this.rootSpaceId = UUID::randomUUID
		var ^space = typeof(OpenEventSpace).mock
		when(^space.spaceID).thenReturn(new SpaceID(this.rootContextId, this.rootSpaceId, typeof(OpenEventSpaceSpecification)))
		when(this.rootContext.defaultSpace).thenReturn(^space)
		this.context = typeof(Context).mock
		this.service = newService
		this.service.rootContext = this.rootContext
	}

	protected abstract def newService : T

	protected def startService {
		this.service.startServiceManually
	}

	@Test
	def createContextWithoutRegistration_root {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		var context = this.service.createContextWithoutRegistration(contextId, spaceId, true)

		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		assertTrue(context.isRootContext)
		
		assertTrue(context !== this.service.rootContext)
		assertNull(this.service.getContext(contextId))
	}

	@Test
	def createContextWithoutRegistration_notRoot {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		var context = this.service.createContextWithoutRegistration(contextId, spaceId, false)

		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		assertFalse(context.isRootContext)
		
		assertTrue(context !== this.service.rootContext)
		assertNull(this.service.getContext(contextId))
	}

	@Test
	def createContext_root {
		var context = this.service.createContext(this.rootContextId, this.rootSpaceId)
		assertSame(this.rootContext, context)
	}

	@Test
	def createContext_newContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
	
		var context = this.service.createContext(contextId, spaceId)
		
		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		assertFalse(context.isRootContext)

		assertTrue(context !== this.service.rootContext)
		assertSame(this.context, this.service.getContext(contextId))
	}

	@Test
	def createContext_existingContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
	
		var originalContext = this.service.createContext(contextId, spaceId)
		
		var context = this.service.createContext(contextId, spaceId)

		assertSame(originalContext, context)
		assertSame(this.context, context)
		assertEquals(contextId, context.ID)
		assertFalse(context.isRootContext)

		assertTrue(context !== this.service.rootContext)
		assertSame(this.context, this.service.getContext(contextId))
	}

	@Test
	def getContext_rootContext {
		assertSame(this.rootContext, this.service.getContext(this.rootContextId))
	}

	@Test
	def getContext_otherContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		
		assertNull(this.service.getContext(contextId))
		
		var context = this.service.createContext(contextId, spaceId)
		assertSame(context, this.service.getContext(contextId))
	}

	@Test
	def removeContext_emptyRepository {
		assertNull(this.service.removeContext(UUID::randomUUID))
	}

	@Test
	def removeContext_rootContext {
		assertNull(this.service.removeContext(this.rootContextId))
	}

	@Test
	def removeContext_unknownContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		this.service.createContext(contextId, spaceId)

		assertNull(this.service.removeContext(UUID::randomUUID))
	}

	@Test
	def removeContext_knownContext {
		var contextId = UUID::randomUUID
		var spaceId = UUID::randomUUID
		var context = this.service.createContext(contextId, spaceId)

		assertSame(context, this.service.removeContext(contextId))
	}

}
