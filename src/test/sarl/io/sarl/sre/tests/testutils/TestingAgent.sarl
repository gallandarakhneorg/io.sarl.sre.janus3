/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.testutils

import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.sre.services.executor.EarlyExitException
import java.util.Collection
import java.util.List
import java.util.Map
import java.util.UUID

/**
 * Abstract implementation of an agent that is used for testing SRE.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
abstract agent TestingAgent {

	uses Lifecycle, Schedules

	var results : Map<UUID, List<Object>>

	var initializationParameters : Object[]

	/** Replies the simple name of the given type name
	 *
	 * @param typeName the fully qualifed name of a type.
	 */
	static def simpleName(typeName : String) : String {
		var index = typeName.lastIndexOf("$")
		if (index >= 0) {
			return typeName.substring(index + 1)
		}
		return typeName
	}

	/** 
	 * Add a result.
	 * 
	 * @param result - the result.
	 */
	def addResult(result : Object) {
		if (this.results !== null) {
			synchronized (this.results) {
				var list = this.results.get(this.ID)
				if (list === null) {
					list = newArrayList
					this.results.put(this.ID, list)
				}
				list += result
			}
		}
	}

	/**
	 * Replies the number of results provided by the ran platform.
	 *
	 * @return the number of results.
	 */
	@Pure
	def getNumberOfResults : int {
		if (this.results !== null) {
			synchronized (this.results) {
				var list = this.results.get(this.ID)
				if (list !== null) {
					return list.size
				}
			}
		}
		return 0
	}

	/**
	 * Add a result.
	 * 
	 * @param result - the result.
	 */
	def addResults(results : Collection<?>) {
		if (this.results !== null) {
			synchronized (this.results) {
				var list = this.results.get(this.ID)
				if (list !== null) {
					list = newArrayList
					this.results.put(this.ID, list)
				}
				list += results
			}
		}
	}

	/**
	 * Replies a unmodifiable view on the results.
	 * @return the results.
	 */
	@Pure
	def getResults : List<Object> {
		if (this.results !== null) {
			synchronized (this.results) {
				var list = this.results.get(this.ID)
				if (list !== null) {
					return list.unmodifiableView
				}
			}
		}
		return emptyList
	}

	/**
	 * Replies the results.
	 * @return the results.
	 */
	@Pure
	def getRawResults : List<Object> {
		if (this.results === null) {
			this.results = newHashMap
		}
		synchronized (this.results) {
			var list = this.results.get(this.ID)
			if (list === null) {
				list = newArrayList
				this.results.put(this.ID, list)
			}
			return list
		}
	}

	/** Replies the initialization parameters of the agents.
	 *
	 * @return the initialization parameters.
	 */
	@Pure
	def getAgentInitializationParameters : Object[] {
		this.initializationParameters
	}

	on Initialize {
		this.initializationParameters = occurrence.parameters
		this.results = occurrence.parameters.get(0) as Map<UUID, List<Object>>
		try {
			if (runAgentTest) {
				in(1000) [killMe]
			}
		} catch (exception : Throwable) {
			if (!(exception instanceof EarlyExitException)) {
				addResult(exception)
			}
			throw exception
		}
	}

	/**
	 * Invoked to run the unit test. This function is invoked at agent initialization
	 *
	 * @return <code>true</code> for killing the agent during its initialization.
	 */
	abstract def runAgentTest : boolean

}
