/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.testutils

import com.google.common.util.concurrent.Service
import com.google.common.util.concurrent.Service.State
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.tests.api.AbstractSarlTest
import java.util.Properties
import org.junit.Rule
import org.junit.rules.TestWatcher
import org.junit.runner.Description

/**
 * Abstract class that is providing useful tools for unit tests.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractSreTest extends AbstractSarlTest {

	/** Short timeout in seconds.
	 * 
	 * @see #EXTRA_TIMEOUT
	 * @see #NO_TIMEOUT
	 * @see #STANDARD_TIMEOUT
	 */
	public static val SHORT_TIMEOUT = 20

	/** Standard timeout in seconds.
	 * 
	 * @see #EXTRA_TIMEOUT
	 * @see #NO_TIMEOUT
	 * @see #SHORT_TIMEOUT
	 */
	public static val STANDARD_TIMEOUT = 40

	/** Extra timeout in seconds.
	 * 
	 * @see #STANDARD_TIMEOUT
	 * @see #NO_TIMEOUT
	 * @see #SHORT_TIMEOUT
	 */
	public static val EXTRA_TIMEOUT = 240


	var savedProperties : Properties


	/**
	 * This rule permits to clean automatically the fields at the end of the test.
	 */
	@Rule
	public val rootSreWatchter = new TestWatcher {
		override starting(description : Description) {
			// Clear the system properties
			val props = System::getProperties
			savedProperties = props.clone as Properties
		}

		override finished(description : Description) {
			val sp = savedProperties
			savedProperties = null
			if (sp !== null) {
				val props = System::getProperties
				props.clear
				props.putAll(sp)
			}
		}
	}

	/** Start the given service manually.
	 *
	 * @param service the service to start.
	 */
	protected def startServiceManually(service : Service) {
		service.startAsync
		var state = service.state
		while (state !== null && state !== State.STOPPING && state !== State.FAILED && state !== State.RUNNING) {
			ExecutorService.yield
			state = service.state
		}
		if (state === State.FAILED) {
			throw new RuntimeException(service.failureCause)
		}
	}

}
