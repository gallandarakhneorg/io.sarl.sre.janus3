/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.internal

import io.sarl.core.AgentSpawned
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.sre.tests.testutils.TestingAgent
import java.util.UUID

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
package agent MyWaiterAgent0 extends TestingAgent {

	uses Schedules, Lifecycle, DefaultContextInteractions

	var spawnId : UUID
	
	override runAgentTest : boolean {
		in(500) [
			var id = typeof(MySpawnedAgent0).spawn(getRawResults)
			synchronized(this) {
				this.spawnId = id
			}
			assert id !== null
		]
		return false
	}

	on AgentSpawned {
		synchronized(getRawResults) {
			addResult("SPAWNER")
			addResult(occurrence)
			addResult(ID)
			addResult(defaultSpace.spaceID)
			synchronized (this) {
				assert this.spawnId !== null
				addResult(this.spawnId)
			}
		}
		killMe
	}

}
