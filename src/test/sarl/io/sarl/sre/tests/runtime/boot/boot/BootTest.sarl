/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.tests.runtime.boot.boot

import io.sarl.sre.boot.configs.subconfigs.BootConfig
import io.sarl.sre.boot.configs.subconfigs.RootContextType
import io.sarl.sre.tests.runtime.boot.boot.mocks.BootAgent0
import io.sarl.sre.tests.runtime.boot.boot.mocks.BootAgent1
import io.sarl.sre.tests.testutils.AbstractSreRunTest
import io.sarl.tests.api.Nullable
import java.util.UUID
import org.arakhne.afc.bootique.variables.VariableNames
import org.junit.Before
import org.junit.Test

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class BootTest extends AbstractSreRunTest {

	@Nullable
	var defaultID : UUID

	@Nullable
	var bootID0 : UUID

	@Nullable
	var bootID1 : UUID
	
	@Before
	def setUp : void {
		this.defaultID = UUID::fromString(BootConfig::ROOT_CONTEXT_ID_VALUE)
		this.bootID0 = UUID::nameUUIDFromBytes(typeof(BootAgent0).name.bytes)
		this.bootID1 = UUID::nameUUIDFromBytes(typeof(BootAgent1).name.bytes)
	}

	@Test
	def bootAgentId_killInOnInitialize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::DEFAULT.name)
		typeof(BootAgent0).runSre(false, true, STANDARD_TIMEOUT)
		assertNull(bootAgent)
	}

	@Test
	def bootAgentId_killAfterOnInitialize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::DEFAULT.name)
		typeof(BootAgent1).runSre(false, true, STANDARD_TIMEOUT)
		assertNotNull(bootAgent)
	}
	
	@Test
	def defaultContextUUID_killInOnInitalize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::DEFAULT.name)
		typeof(BootAgent0).runSre(false, true, STANDARD_TIMEOUT)
		var id = getResult(typeof(UUID), 0)
		assertNull(id)
	}

	@Test
	def defaultContextUUID_killAfterOnInitalize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::DEFAULT.name)
		typeof(BootAgent1).runSre(false, true, STANDARD_TIMEOUT)
		var id = getResult(typeof(UUID), 0)
		assertEquals(defaultID, id)
		assertNotEquals(bootID0, id)
		assertNotEquals(bootID1, id)
	}

	@Test
	def bootContextUUID_killInOnInitialize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::BOOT_AGENT_NAME.name)
		typeof(BootAgent0).runSre(false, true, STANDARD_TIMEOUT)
		var id = getResult(typeof(UUID), 0)
		assertNull(id)
	}

	@Test
	def bootContextUUID_killAfterOnInitialize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::BOOT_AGENT_NAME.name)
		typeof(BootAgent1).runSre(false, true, STANDARD_TIMEOUT)
		var id = getResult(typeof(UUID), 0)
		assertNotEquals(defaultID, id)
		assertNotEquals(bootID0, id)
		assertEquals(bootID1, id)
	}

	
	@Test
	def randomContextUUID_killInOnInitialize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
				RootContextType::RANDOM.name)
		typeof(BootAgent0).runSre(false, true, STANDARD_TIMEOUT)
		var id = getResult(typeof(UUID), 0)
		assertNull(id)
	}

	@Test
	def randomContextUUID_killAfterOnInitialize {
		System::setProperty(VariableNames::toPropertyName(BootConfig::ROOT_CONTEXT_BOOT_TYPE_NAME),
			RootContextType::RANDOM.name)
		typeof(BootAgent1).runSre(false, true, STANDARD_TIMEOUT)
		var id = getResult(typeof(UUID), 0)
		assertNotEquals(defaultID, id)
		assertNotEquals(bootID0, id)
		assertNotEquals(bootID1, id)
	}

}
