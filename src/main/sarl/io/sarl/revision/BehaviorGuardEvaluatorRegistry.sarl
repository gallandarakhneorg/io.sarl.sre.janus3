/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.revision

import com.google.common.base.Objects
import com.google.common.base.Throwables
import com.google.common.cache.CacheBuilder
import com.google.common.cache.LoadingCache
import com.google.common.collect.Collections2
import com.google.common.collect.ImmutableMap
import com.google.common.collect.ImmutableSet
import com.google.common.collect.Maps
import com.google.common.reflect.TypeToken
import io.sarl.lang.annotation.PerceptGuardEvaluator
import io.sarl.lang.core.Event
import java.lang.reflect.Method
import java.util.Arrays
import java.util.Collection
import java.util.Iterator
import java.util.List
import java.util.Map
import java.util.Map.Entry
import java.util.Set
import java.util.TreeMap
import java.util.TreeSet
import java.util.concurrent.CopyOnWriteArraySet
import io.sarl.lang.util.OutParameter

/**
 * Registry of all {@code BehaviorGuardEvaluator} classes containing a method to evaluate the guard of a given behavior (on clause in SARL behavior).
 * This class has been inspired by the {@code com.google.common.eventbus.SuscriberRegistry} class of Google Guava library.
 *
 * <p>This class is not thread-safe.
 *
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 *
 */
class BehaviorGuardEvaluatorRegistry {

	private static def reloadClass(context : Class<?>, type : Class<?>) : Class<?> {
		var ld = context.classLoader
		if (ld === null) {
			ld = type.classLoader
		}
		try {
			return ld.loadClass(type.name)
		} catch (ex : Throwable) {
			return type
		}
	}

	private static def safeCast(obj : Object) : T with T {
		obj as T
	}

	private static def exploreTypeHierarchy(concreteClass : Class<?>) : Set<Class<?>> {
		TypeToken::of(concreteClass).types.rawTypes.safeCast
	}

	private static def getTypeHierarchyOnDemand(concreteClass : Class<?>) : ImmutableSet<Class<?>> {
		assert concreteClass !== null
		val typeHierarchy = concreteClass.exploreTypeHierarchy
		try {
			val eventType = concreteClass.reloadClass(typeof(Event))
			if (eventType.isAssignableFrom(concreteClass)) {
				return ImmutableSet::copyOf(typeHierarchy.filter [ eventType.isAssignableFrom(it) ])
			}
		} catch (ex : Exception) {
			//
		}
		ImmutableSet::copyOf(typeHierarchy)
	}

	private static def getAnnotatedMethodMapOnDemand(concreteClass : Class<?>) : Map<Class<? extends Event>, Collection<Method>> {
		assert concreteClass !== null
		// TODO verify if it effectively explores the whole type hierarchy
		val typeHierarchy = concreteClass.exploreTypeHierarchy
		val supertypes = typeHierarchy.filter [ !it.isInterface && typeof(Object) != it ]

		val identifiers = new TreeMap

		// Traverse all methods of the whole inheritance hierarchy
		for (supertype : supertypes) {
			for (method : supertype.declaredMethods) {
				if (method.isAnnotationPresent(typeof(PerceptGuardEvaluator)) && !method.synthetic) {
					val parameterTypes = method.parameterTypes
					val ident = new MethodIdentifier(method, parameterTypes)
					identifiers.putIfAbsent(ident, method)
				}
			}
		}

		val buffer : Map<Class<? extends Event>, Collection<Method>> = new TreeMap [ elt1, elt2 | elt1.name <=> elt2.name ]
		for (method : identifiers.values) {
			val parameterTypes = method.parameterTypes
			// Check the prototype of the event handler in debug mode only
			assert checkEventHandlerPrototype(parameterTypes)
			val eventType = parameterTypes.get(0) as Class<? extends Event>
			var methods = buffer.get(eventType)
			if (methods === null) {
				methods = newArrayList
				buffer.put(eventType, methods)
			}
			methods += method
		}

		ImmutableMap::copyOf(buffer)
	}

	private static def checkEventHandlerPrototype(parameterTypes : Class<?>[]) : boolean {
		try {
			if (parameterTypes.length === 2
				&& parameterTypes.get(0) !== null
				&& reloadClass(parameterTypes.get(0), typeof(Event)).isAssignableFrom(parameterTypes.get(0))
				&& parameterTypes.get(1) !== null
				&& reloadClass(parameterTypes.get(1), typeof(Collection)).isAssignableFrom(parameterTypes.get(1))) {
				return true
			}
		} catch (ex : Exception) {
			//
		}
		return false
	}

	private static def getAnnotatedMethodsPerEvent(listenerType : Class<?>) : Map<Class<? extends Event>, Collection<Method>> {
		try {
			PERCEPT_GUARD_EVALUATOR_METHOD_CACHE.getUnchecked(listenerType)
		} catch (ex : Exception) {
			throw Throwables::propagate(ex)
		}
	}

	/**
	 * Thread-safe cache of classes to their flattened hierarchy of supertypes.
	 */
	static val FLATTEN_HIERARCHY_CACHE
			: LoadingCache<Class<?>, ImmutableSet<Class<?>>>
			= CacheBuilder::newBuilder.weakKeys.build [ it.getTypeHierarchyOnDemand ]

	/**
	 * A thread-safe cache that contains the mapping from each class to all methods in that class and all super-classes, that are annotated with
	 * the annotation given by {@link #perceptGuardEvaluatorAnnotation}. The cache is shared across all instances of this class; this greatly
	 * improves performance if multiple EventBus instances are created and objects of the same class are registered on all of them.
	 */
	static val PERCEPT_GUARD_EVALUATOR_METHOD_CACHE
			: LoadingCache<Class<?>, Map<Class<? extends Event>, Collection<Method>>>
			= CacheBuilder::newBuilder.weakKeys.build [ it.getAnnotatedMethodMapOnDemand ]

	/**
	 * It stores the information related to a given method especially its prototype.
	 *
	 * @author $Author: ngaud$
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 *
	 */
	private static final class MethodIdentifier implements Comparable<MethodIdentifier> {

		/**
		 * the name of the considered method.
		 */
		val name : String

		/**
		 * The list of the type of the various parameters of the considered method.
		 */
		val parameterTypes : List<Class<?>> 

		/**
		 * Creates a new method identifier according to the name and the list of parameter types of the considered method.
		 *
		 * @param method
		 *            - the name of the considered method.
		 * @param parameterTypes
		 *            - The list of the type of the various parameters of the considered method.
		 */
		new (method : Method, parameterTypes : Class<?>[]) {
			// Useful to maintain the getDeclaringClass to obtain method of all classes with the inheritance hierarchy
			this.name = method.declaringClass + method.name
			this.parameterTypes = Arrays::asList(parameterTypes)
		}

		override hashCode : int {
			Objects::hashCode(this.name, this.parameterTypes)
		}

		override equals(object : Object) : boolean {
			if (object instanceof MethodIdentifier) {
				return this.name == object.name && this.parameterTypes == object.parameterTypes
			}
			return false
		}

		override compareTo(obj : MethodIdentifier) : int {
			if (obj === null) {
				return -1
			}
			var cmp = this.name <=> obj.name
			if (cmp !== 0) {
				return cmp
			}
			cmp = this.parameterTypes.size <=> obj.parameterTypes.size
			if (cmp !== 0) {
				return cmp
			}
			val it1 = this.parameterTypes.iterator
			val it2 = obj.parameterTypes.iterator
			while (it1.hasNext) {
				assert it2.hasNext
				cmp = it1.next.name <=> it2.next.name
				if (cmp !== 0) {
					return cmp
				}
			}
			return 0
		}

		override toString : String {
			this.name
		}

	}

	/** Iterator on guard evaluators.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	private static class EvaluatorIterator implements Iterator<Pair<Class<? extends Event>, Collection<BehaviorGuardEvaluator>>> {

		val listener : Object

		val iterator : Iterator<Entry<Class<? extends Event>, Collection<Method>>>

		new (listener : Object) {
			val methods = getAnnotatedMethodsPerEvent(listener.class)
			this.iterator = methods.entrySet.iterator
			this.listener = listener
		}

		override hasNext : boolean {
			this.iterator.hasNext
		}

		override next : Pair<Class<? extends Event>, Collection<BehaviorGuardEvaluator>> {
			val entry = this.iterator.next
			new Pair(entry.key, Collections2::transform(entry.value)
					[ new BehaviorGuardEvaluator(this.listener, it) ])
		}

	}

	/** Iterator on behavior guard evaluators.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.5.0
	 */
	private static class EvaluatorCollectionIterator implements Iterator<BehaviorGuardEvaluator> {

		val behaviorGuardEvaluators : Map<Class<? extends Event>, Pair<(Event) => Boolean, Set<BehaviorGuardEvaluator>>>

		val ^event : Event

		val eventTypeIterator : Iterator<Class<?>>

		val skipSubscriberFiltering : boolean

		var evaluators : Iterator<BehaviorGuardEvaluator>

		new (behaviorGuardEvaluators : Map<Class<? extends Event>, Pair<(Event) => Boolean, Set<BehaviorGuardEvaluator>>>,
				^event : Event,
				eventTypes : Iterator<Class<?>>,
				skipSubscriberFiltering : boolean) {
			assert behaviorGuardEvaluators !== null
			assert ^event !== null
			this.skipSubscriberFiltering = skipSubscriberFiltering
			this.behaviorGuardEvaluators = behaviorGuardEvaluators
			this.^event = ^event
			this.eventTypeIterator = eventTypes
			searchNext
		}

		private def searchNext : void {
			while ((this.evaluators === null || !this.evaluators.hasNext) && this.eventTypeIterator.hasNext) {
				val eventType = this.eventTypeIterator.next
				val eventSubscribers = this.behaviorGuardEvaluators.get(eventType)
				if (eventSubscribers.isValidSubscriber) {
					this.evaluators = eventSubscribers.value.iterator
				}
			}
		}

		protected def isValidSubscriber(subscriber : Pair<(Event) => Boolean, Set<BehaviorGuardEvaluator>>) : boolean {
			if (subscriber !== null && subscriber.value !== null) {
				return this.skipSubscriberFiltering || subscriber.key === null || subscriber.key.apply(this.^event)
			}
			return false
		}

		override hasNext : boolean {
			this.evaluators !== null && this.evaluators.hasNext
		}

		override next : BehaviorGuardEvaluator {
			assert this.evaluators !== null
			val next = this.evaluators.next
			assert next !== null
			searchNext
			return next
		}

	}

	/** Iterator on behavior guard evaluators.
	 *
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.5.0
	 */
	private static class EvaluatorCollectionFilteringIterator implements Iterator<BehaviorGuardEvaluator> {

		val iterator : Iterator<BehaviorGuardEvaluator>

		val subscriber : Object

		var next : BehaviorGuardEvaluator

		new (iterator : Iterator<BehaviorGuardEvaluator>, subscriber : Object) {
			assert iterator !== null
			assert subscriber !== null
			this.iterator = iterator
			this.subscriber = subscriber
			searchNext
		}

		private def searchNext {
			this.next = null
			while (this.next === null && this.iterator.hasNext) {
				val evaluator = this.iterator.next
				if (evaluator.target === this.subscriber) {
					this.next = evaluator
				}
			}
		}

		override hasNext : boolean {
			this.next !== null
		}

		override next : BehaviorGuardEvaluator {
			assert this.next !== null
			val next = this.next
			searchNext
			return next
		}

	}

	/**
	 * All registered {@code BehaviorGuardEvaluator}s (class containing at least one PerceptGuardEvaluator method), indexed by event type.
	 *
	 * <p>The {@link CopyOnWriteArraySet} values make it easy and relatively lightweight to get an immutable snapshot of all current
	 * {@code BehaviorGuardEvaluator}s to an event without any locking.
	 */
	val behaviorGuardEvaluators : Map<Class<? extends Event>, Pair<(Event) => Boolean, Set<BehaviorGuardEvaluator>>>

	var active = true

	/**
	 * Instanciates a new registry linked with the {@link PerceptGuardEvaluator} annotation.
	 *
	 * <p>The registry will use concurrent data structures.
	 */
	new {
		this(true)
	}

	/**
	 * Instanciates a new registry linked with the {@link PerceptGuardEvaluator} annotation.
	 *
	 * @param concurrent indicates if the internal data structures must support thread concurrency, or not.
	 */
	new (concurrent : boolean) {
		this(if (concurrent) Maps::newConcurrentMap else Maps::newHashMap)
	}

	/**
	 * Instanciates a new registry linked with the {@link PerceptGuardEvaluator} annotation.
	 *
	 * @param buffer the buffer to be used for storing the behavior guard evaluators.
	 */
	new (buffer : Map<Class<? extends Event>, Pair<(Event) => Boolean, Set<BehaviorGuardEvaluator>>>) {
		assert buffer !== null
		this.behaviorGuardEvaluators = buffer
	}

	/**
	 * Registers all {@code PerceptGuardEvaluator} methods on the given listener object.
	 *
	 * <p>If the filter is provided, it will be used for determining if the given behavior accepts a specific event.
	 * If the filter function replies {@code true} for a specific event as argument, the event is fired in the
	 * behavior context. If the filter function replies {@code false}, the event is not fired in the behavior context.
	 *
	 * @param listener the new {@code BehaviorGuardEvaluator} to add
	 * @param filter the filter function.
	 * @param callback function which is invoked just after the first registration of the object. It could be {@code null}.
	 * @since 0.5.0
	 */
	def register(listener : Object, filter : (Event) => Boolean = null, callback : (Object) => void = null) {
		if (this.active) {
			var firstInit = false
			val listenerMethods = new EvaluatorIterator(listener)
			while (listenerMethods.hasNext) {
				val entry = listenerMethods.next
				val eventType = entry.key
				val eventMethodsInListener = entry.value

				val pair = this.behaviorGuardEvaluators.get(eventType)
				var eventSubscribers : Set<BehaviorGuardEvaluator>

				if (pair === null) {
					eventSubscribers = new CopyOnWriteArraySet
					this.behaviorGuardEvaluators.put(eventType, new Pair(filter, eventSubscribers))
					firstInit = true
				} else {
					eventSubscribers = pair.value
				}

				if (eventSubscribers.addAll(eventMethodsInListener)) {
					firstInit = true
				}
			}
			if (firstInit && callback !== null) {
				callback.apply(listener)
			}
		}
	}

	/**
	 * Unregisters all BehaviorGuardEvaluators on all the listener objects.
	 *
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 * @since 0.5.0
	 */
	def unregisterAll(callback : (Object) => void = null) : void {
		if (this.active) {
			this.active = false
			try {
				if (callback !== null) {
					val iterator = this.behaviorGuardEvaluators.values.iterator
					val subscribers = new TreeSet [term1, term2 |
						if (term1 === term2) {
							return 0
						}
						return System::identityHashCode(term1) <=> System::identityHashCode(term2)
					]
					while (iterator.hasNext) {
						val pair = iterator.next
						for (evaluator : pair.value) {
							if (subscribers += evaluator.target) {
								callback.apply(evaluator.target)
							}
						}
						iterator.remove
					}
				} else {
					this.behaviorGuardEvaluators.clear
				}
			} finally {
				this.active = true
			}
		}
	}

	/**
	 * Unregisters all BehaviorGuardEvaluators on the given listener object.
	 *
	 * @param listener the {@code BehaviorGuardEvaluator} to remove
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 * @since 0.5.0
	 */
	def unregister(listener : Object, callback : (Object) => void = null) {
		if (this.active) {
			// TODO EvaluatorIterator is not efficient
			val listenerMethods = new EvaluatorIterator(listener)
			var listenerCallback = new OutParameter(callback)
			while (listenerMethods.hasNext) {
				val entry = listenerMethods.next
				val eventType = entry.key

				val pair = this.behaviorGuardEvaluators.get(eventType)

				if (pair !== null && pair.value !== null) {
					var candidates = pair.value
					candidates.removeIf [
						if (it.target === listener) {
							var cb = listenerCallback.get
							if (cb !== null) {
								cb.apply(listener)
								listenerCallback.set(null)
							}
							return true
						}
						return false
					]
				}
			}
		}
	}
	/** 
	 * Unregisters all BehaviorGuardEvaluators on the listener objects of the givne type.
	 * 
	 * @param listenerType the type of the {@code BehaviorGuardEvaluator} to remove
	 * @param callback function which is invoked just before the object is unregistered. It could be {@code null}.
	 * @since 0.7
	 */
	def unregister(listenerType : Class<?>, callback : (Object)=>void = null) {
		if (this.active) {
			var listenerCallback = callback
			val listeners = new TreeSet [a, b | Integer::compare(System::identityHashCode(a), System::identityHashCode(b))]
			for (handler : this.behaviorGuardEvaluators.entrySet) {
				var pair = handler.value
				if (pair !== null) {
					var candidates = pair.value
					if (candidates !== null) {
						candidates.removeIf [
							var tgt = it.target
							if (tgt !== null && listenerType.isInstance(tgt)) {
								if (listenerCallback !== null && listeners.add(tgt)) {
									listenerCallback.apply(tgt)
								}
								return true
							}
							return false
						]
					}
				}
			}
		}
	}

	/** 
	 * Gets an iterator representing an immutable snapshot of all BehaviorGuardEvaluators to the given event at the time this method is called.
	 *
	 * @param event
	 *            -the event to process
	 * @return the set of guard evaluators associated to the specified event
	 */
	def getBehaviorGuardEvaluators(^event : Event) : Iterable<BehaviorGuardEvaluator> {
		val eventTypes = flattenHierarchy(^event.class)
		new EvaluatorCollectionIterator(this.behaviorGuardEvaluators, ^event, eventTypes.iterator, false).toIterable
	}

	/**
	 * Gets an iterator representing an immutable snapshot of all BehaviorGuardEvaluators of the given listener
	 * to the given event at the time this method is called.
	 *
	 * <p>Caution: This function does not apply filtering function given to {@link #register(Object, Function1, Procedure1)}.
	 *
	 * @param event -the event to process
	 * @param listener the owner of the BehaviorGuardEvaluators (never {@code null}).
	 * @return the set of guard evaluators associated to the specified event
	 * @since 0.5.0
	 */
	def getBehaviorGuardEvaluatorsFor(^event : Event, listener : Object) : Iterable<BehaviorGuardEvaluator> {
		val eventTypes = flattenHierarchy(^event.class)
		return [
			val base = new EvaluatorCollectionIterator(this.behaviorGuardEvaluators, ^event, eventTypes.iterator, true)
			new EvaluatorCollectionFilteringIterator(base, listener)
		]
	}

	/** Replies if a listener with the given type is registered.
	 *
	 * @param type the type of listener.
	 * @return {@code true} if a listener of the given type is registered.
	 * @since 0.5.0
	 */
	def hasRegisteredEventListener(type : Class<?>) : boolean {
		// TODO: Not efficient implementation
		for (pair : this.behaviorGuardEvaluators.values) {
			val listeners = pair.value
			if (listeners !== null) {
				for (evaluator : listeners) {
					val target = evaluator.target
					if (type.isInstance(target)) {
						return true
					}
				}
			}
		}
		return false
	}

	/** Extract the registered listeners with the given type.
	 *
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @param collection the collection of listeners that is filled by this function. This argument could be {@code null}.
	 * @return the number of listeners of the given type.
	 * @since 0.5.0
	 */
	def getRegisteredEventListeners(type : Class<T>, collection : Collection<? super T>) : int with T {
		// TODO: Not efficient implementation
		val addedObjects = new TreeSet [ elt1, elt2 |
			if (elt1 === elt2) {
				return 0
			}
			System::identityHashCode(elt1) <=> System::identityHashCode(elt2)
		]
		for (pair : this.behaviorGuardEvaluators.values) {
			val listeners = pair.value
			if (listeners !== null) {
				for (evaluator : listeners) {
					val target = evaluator.target
					if (type.isInstance(target) && addedObjects.add(target)) {
						if (collection !== null) {
							collection += type.cast(target)
						}
					}
				}
			}
		}
		addedObjects.size
	}

	/** Extract the registered listeners with the given type.
	 * 
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @return the listeners.
	 * @since 0.6.0
	 */
	def getRegisteredEventListeners(type : Class<T>) : Iterable<T> with T {
		val addedObjects = new TreeSet [ elt1, elt2 |
			if (elt1 === elt2) {
				return 0
			}
			System::identityHashCode(elt1) <=> System::identityHashCode(elt2)
		]
		return this.behaviorGuardEvaluators.values.map[it.value].flatten.map[it.target].filter [
			type.isInstance(it) && addedObjects.add(it)
		].map[type.cast(it)]
	}

	/**
	 * Flattens a class's type hierarchy into a set of {@code Class} objects including all super-classes (transitively) and all interfaces implemented
	 * by these super-classes.
	 *
	 * @param concreteClass
	 *            - the class you find the hierarchy
	 * @return the set of class in the hierarchy of the specififed class
	 */
	private static def flattenHierarchy(concreteClass : Class<?>) : ImmutableSet<Class<?>> {
		try {
			FLATTEN_HIERARCHY_CACHE.getUnchecked(concreteClass)
		} catch (e : Exception) {
			throw Throwables.propagate(e.cause)
		}
	}

}
