/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.capacities

import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.sre.services.lifecycle.AgentState
import io.sarl.sre.skills.internal.EventBus

/** 
 * Capacity that provides an event bus to notify the different components of an agent.
 * 
 * <p><strong>This capacity is provided by the SRE kernel, not SARL.</strong>
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
capacity InternalEventBusCapacity {

	/** 
	 * Register the given object on the event bus for receiving any event.
	 * 
	 * <p>If the filter is provided, it will be used for determining if the given behavior accepts a specific event.
	 * If the filter function replies {@code true} for a specific event as argument, the event is fired in the
	 * behavior context. If the filter function replies {@code false}, the event is not fired in the behavior context.
	 * 
	 * @param listener the listener on the SARL events.
	 * @param filter the filter function.
	 * @param callback function which is invoked just after the first registration of the object. It could be {@code null}.
	 * @since 0.5.0
	 */
	def registerEventBusListener(listener : Object, filter : (Event)=>boolean = null, callback : (Object) => void = null)

	/** 
	 * Unregister the given object on the event bus for receiving any event.
	 * 
	 * @param listener the listener on the SARL events.
	 * @param callback function which is invoked just before the object is unregistered.
	 * @since 0.5.0
	 */
	def unregisterEventBusListener(listener : Object, callback : (Object)=>void = null)

	/** 
	 * Unregister the listeners of the given type on the event bus for receiving any event.
	 * 
	 * @param listenerType the type of the listeners on the SARL events.
	 * @param callback function which is invoked just before the object is unregistered.
	 * @since 0.7.0
	 */
	def unregisterEventBusListener(listenerType : Class<?>, callback : (Object)=>void = null)

	/** Fire the given event into the agent context, and wait for the execution of all the event handlers.
	 *
	 * <p>This function does not set the event's source if it is not already set.
	 *
	 * <p>All the exceptions thrown by the event handlers are gathered and fired into a single exception after
	 * all the event handlers have been executed or failed.
	 * 
	 * <p>This function does not considered the agent's state for determining of the event should be fired.
	 * In other words, the given event is always fired, whatever the agent's state. 
	 * 
	 * @param event the event to fire.
	 * @param gatherEvents indicates if the events that are received during the execution of this function are gathered and replied. 
	 * @param thrownExceptions indicates if any exception, which occurs into the event handler should be thrown outside this function.
	 *     If {@code true}, an exception is thrown outside and should be catch. If {@code false}, the exceptions are logging out
	 *     to the agent's logger, and never thrown outside this function.
	 * @param listener the sole receiver of the event. If {@code null}, all the listeners on the event bus will
	 *     receive the event. If not {@code null}, only the given listener will receive the event.
	 * @return the events that were received during the execution of this function. These events are not fired into the agent context yet.
	 * @since 0.7.0
	 */
	def fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean,
		listener : Object) : Iterable<Event>

	/** Fire the given event into the agent context, and wait for the execution of all the event handlers.
	 * 
	 * <p>This function does not set the event's source if it is not already set.
	 * 
	 * <p>All the exceptions thrown by the event handlers are gathered and fired into a single exception after
	 * all the event handlers have been executed or failed.
	 * 
	 * <p>This function does not considered the agent's state for determining of the event should be fired.
	 * In other words, the given event is always fired, whatever the agent's state. 
	 * 
	 * @param event the event to fire.
	 * @param gatherEvents indicates if the events that are received during the execution of this function are gathered and replied. 
	 * @param thrownExceptions indicates if any exception, which occurs into the event handler should be thrown outside this function.
	 *     If {@code true}, an exception is thrown outside and should be catch. If {@code false}, the exceptions are logging out
	 *     to the agent's logger, and never thrown outside this function.
	 * @return the events that were received during the execution of this function. These events are not fired into the agent context yet.  
	 */
	def fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean) : Iterable<Event>

	/** Fire the given event into the agent context, and do not wait for the termination of the event handlers.
	 * 
	 * <p>This function does not set the event's source if it is not already set.
	 *
	 * <p>Any exception thrown by an event handler is catch by the associated thread.
	 *
	 * <p>The event is not fired if the agent's state does not allow it.
	 * See {@link AgentState}. 
	 * 
	 * @param event the event to fire.
	 */
	def fireEvent(^event : Event)

	/**  Replies the event listener linked to the owner of this capacity.
	 * 
	 * @return the event listener of the owner of this skill.
	 */
	def getAssociatedEventBusListener : EventListener

	/** 
	 * Replies the registered listeners.
	 *
	 * @param <T> the type of the listeners.
	 * @param type the type of the listeners.
	 * @return the registered listeners.
	 */
	def getRegisteredEventBusListeners(type : Class<T>) : SynchronizedIterable<T> with T

	/** Set the backend event bus.
	 * 
	 * @param bus the new event bus.
	 */
	def setEventBus(bus : EventBus)

	/** Replies the backend event bus.
	 * 
	 * @return the event bus instance.
	 */
	def getEventBus : EventBus

}
