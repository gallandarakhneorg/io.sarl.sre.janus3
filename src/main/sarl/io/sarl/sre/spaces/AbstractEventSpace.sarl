/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.spaces

import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.logging.LoggingService
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Address
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Scope
import io.sarl.lang.util.SynchronizedSet
import io.sarl.util.AddressScope
import io.sarl.util.Collections3
import io.sarl.util.Scopes
import java.text.MessageFormat
import java.util.Map
import java.util.UUID
import javax.inject.Inject
import java.util.Iterator

/** 
 * Abstract implementation of an event space.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
abstract class AbstractEventSpace extends AbstractSpace implements EventSpace {

	val mutexInstance = new Object

	/** 
	 * Logging service.
	 */
	protected var logger : LoggingService

	private var executor : ExecutorService

	/** Set the logging service to use.
	 * 
	 * @param logger the logger.
	 */
	@Inject
	def setLoggingService(logger : LoggingService) {
		this.logger = logger
	}

	/** Set the executor service to use.
	 *
	 * @param executor the executor.
	 */
	@Inject
	def setExecutor(executor : ExecutorService) {
		this.executor = executor
	}

	/** Replies the mutex for synchronization. */
	final def getMutex {
		this.mutexInstance
	}

	/** Replies the internal data structure for storing the space's participants.
	 *
	 * @return the entire participant structure.
	 */
	protected abstract def getInternalParticipantStructure : Map<UUID, Participant>
	
	protected final def registerToSpace(entity : EventListener) : Address {
		assert entity !== null
		var id = entity.ID
		var address = new Address(this.spaceID, id)
		var participant = Participant::createAndInit(address, entity)
		synchronized (mutex) {
			this.internalParticipantStructure.put(id, participant)
		}
		return address
	}

	protected final def unregisterFromSpace(entity : EventListener) : Address {
		assert entity !== null
		var participant : Participant = null
		var becomesEmpty : boolean
		synchronized (mutex) {
			var structure = this.internalParticipantStructure
			participant = structure.remove(entity.ID)
			becomesEmpty = structure.empty
		}
		if (participant !== null) {
			if (becomesEmpty) {
				fireDestroyableSpace
			}
			return participant.address
		}
		return null
	}

	def getAddress(id : UUID) : Address {
		assert id !== null
		var participant : Participant = null
		synchronized (mutex) {
			participant = this.internalParticipantStructure.remove(id)
		}
		if (participant !== null) {
			return participant.address
		}
		return null
	}

	def getParticipants : SynchronizedSet<UUID> {
		var mut = mutex
		synchronized (mut) {
			Collections3.unmodifiableSynchronizedSet(this.internalParticipantStructure.keySet, mut)
		}
	}

	@Deprecated
	final def emit(^event : Event, scope : Scope<Address>) {
		emit(null, ^event, scope)
	}

	final def emit(eventSource : UUID, ^event : Event, scope : Scope<Address>) {
		assert ^event !== null
		ensureEventSource(eventSource, ^event)
		assert this.spaceID == ^event.source.spaceID, "The source address must belong to this space"
		try {
			^event.emitLocally(scope)
		} catch (e : Throwable) {
			this.logger.kernelLogger.severe(MessageFormat::format(Messages::AbstractEventSpace_0, ^event, scope, e))
		}
	}

	/** Ensure that the given event has a source.
	 * 
	 * @param eventSource the source of the event.
	 * @param event the event to emit.
	 * @since 0.6.0
	 */
	protected def ensureEventSource(eventSource : UUID, ^event : Event) {
		if (^event.source === null) {
			if (eventSource !== null) {
				^event.source = new Address(spaceID, eventSource)
			} else {
				throw new AssertionError("Every event must have a source")
			}
		}
	}

	private def lazyParticipant(address : Address) : Participant {
		var links = SREutils::getSreSpecificData(address, typeof(AddressLazyLinks))
		if (links === null) {
			links = new AddressLazyLinks
			SREutils::setSreSpecificData(address, links)
		}
		var participant = links.participant
		if (participant !== null) {
			return participant
		}
		participant = this.internalParticipantStructure.get(address.UUID)
		links.participant = participant
		return participant
	}

	/** Replies the participants that matches the given scope.
	 *
	 * @param scope the scope.
	 * @return the matching participants.
	 */
	protected def getScopedParticipants(scope : Scope<? super Address>) : Iterator<Participant> {
		if (scope === null || scope === Scopes::allParticipants) {
			this.internalParticipantStructure.values.iterator
		} else if (scope instanceof AddressScope) {
			scope.addresses.map[it.lazyParticipant].filter[it !== null].iterator
		} else {
			this.internalParticipantStructure.values.filter [scope.matches(it.address)].iterator
		}
	}
	
	/** 
	 * Do the emission of the event.
	 * 
	 * <p>This function emits the event <strong>only on the internal event bus</strong> of the listeners.
	 * 
	 * <p>This function launch a task for each matching listener.
	 * 
	 * @param event the event to emit.
	 * @param scope description of the scope of the event, i.e. the receivers of the event.
	 */
	protected def emitLocally(^event : Event, scope : Scope<? super Address>) {
		assert ^event !== null
		// Distinguish the emit and reception processes into two different tasks.
		// The emit process is run in the current thread.
		// The reception process should be treated into a separate thread in order
		// to never block the sender process.
		synchronized (mutex) {
			val participants = getScopedParticipants(scope)
			participants.forEach [
					it.getParticipant.receiveEvent(^event)
			]

			/*participants.forEach [
				var receptionTask : Runnable = [
					it.getParticipant.receiveEvent(^event)
				]
				this.executor.executeAsap(receptionTask)
			]*/

			/*while (participants.hasNext) {
				var participant = participants.next
				var receptionTask : Runnable = [
					participant.getParticipant.receiveEvent(^event)
				]
				this.executor.executeAsap(receptionTask)
			}*/
		}
	}

	/** 
	 * Description of a participant.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.6.0
	 */
	public static class Participant {
		
		val participantAddress : Address
	
		val participant : EventListener

		/** Create a participant.
		 * 
		 * @param address the address of the participant.
		 * @param eventListener the participant.
		 */
		package static def createAndInit(address : Address, eventListener : EventListener) : Participant {
			var participant = new Participant(address, eventListener)
			var links = new AddressLazyLinks
			links.participant = participant
			SREutils::setSreSpecificData(address, links)
			return participant
		}

		/** Constructor.
		 *
		 * @param address the address of the participant.
		 * @param eventListener the participant.
		 */
		private new (address : Address, eventListener : EventListener) {
			this.participantAddress = address
			this.participant = eventListener
		}

		/** Replies participant address. */
		def getAddress : Address {
			this.participantAddress
		}

		/** Replies the participant. */
		def getParticipant : EventListener {
			this.participant
		}

		override equals(obj : Object) : boolean {
			if (obj instanceof Participant) {
				return obj.address == address
			}
			return false
		}

		override hashCode : int {
			address.hashCode
		}

		override toString : String {
			this.participantAddress?.toString
		}
		
	}

}
