/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.spaces

import io.sarl.core.OpenEventSpace
import io.sarl.lang.core.Address
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.SpaceID
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.services.logging.LoggingService
import io.sarl.util.RestrictedAccessEventSpace
import java.security.AccessControlException
import java.security.Principal
import java.security.acl.Acl
import java.security.acl.Permission
import java.util.Map
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Provider

/** 
 * Default implementation of an event space which has a local repository.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class OpenLocalEventSpace extends AbstractEventSpace implements OpenEventSpace {

	val repository = <UUID, Participant>newTreeMap(null)

	override getInternalParticipantStructure : Map<UUID, Participant> {
		this.repository 
	}

	def register(entity : EventListener) : Address {
		entity.registerToSpace
	}

	def unregister(entity : EventListener) : Address {
		entity.unregisterFromSpace
	}

}

/** 
 * Default implementation of a restricted-access event space.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class RestrictedAccessLocalEventSpace extends AbstractEventSpace implements RestrictedAccessEventSpace {

	val repository = <UUID, Participant>newTreeMap(null)

	val acl : Acl

	val accessPermission : Permission

	/** 
	 * Constructs an event space.
	 * 
	 * @param id identifier of the space.
	 * @param acl Access Control List
	 * @param accessPermission permission that corresponds to the registration in the space.
	 * @param lockProvider the provider of synchronization locks.
	 * @param logger the logger service.
	 */
	new (id : SpaceID, acl : Acl, accessPermission : Permission, lockProvider : Provider<ReadWriteLock>,
		logger : LoggingService) {
		super(id, lockProvider, logger)
		assert acl !== null
		assert accessPermission !== null
		this.acl = acl
		this.accessPermission = accessPermission
	}

	override getInternalParticipantStructure : Map<UUID, Participant> {
		this.repository
	}

	/** 
	 * Replies the Access Control List.
	 * 
	 * @return the acl.
	 */
	def getAccessControlList : Acl {
		this.acl
	}

	/** 
	 * Replies the permission to register into this space.
	 * 
	 * @return the permission.
	 */
	def getRegistrationPermission : Permission {
		this.accessPermission
	}

	def register(entity : EventListener, requester : Principal) : Address {
		if (this.accessControlList.checkPermission(requester, this.registrationPermission)) {
			return (entity as InformedEventListener).registerToSpace
		}
		throw new AccessControlException(Messages::RestrictedAccessLocalEventSpace_0)
	}

	def register(entity : P) : Address with P extends EventListener & Principal {
		if (this.accessControlList.checkPermission(entity, this.registrationPermission)) {
			return (entity as InformedEventListener).registerToSpace
		}
		throw new AccessControlException(Messages::RestrictedAccessLocalEventSpace_0)
	}

	/** 
	 * Unregisters the entity inside this space.
	 * Before unregistering an agent, the Space should emit a MemberLeft
	 * event where the source is the address of the unregistered agent.
	 * 
	 * @param entity the event listener to unregister.
	 * @return the former entity's address
	 * @fires ParticipantUnregistered
	 */
	def unregister(entity : EventListener) : Address {
		entity.unregisterFromSpace
	}

}

