/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.spaces

import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Address
import io.sarl.lang.core.SREutils
import io.sarl.sre.capacities.InformedEventListener

/** 
 * Description of a participant.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.6.0
 */
class Participant {
		
	val participantAddress : Address

	val participant : InformedEventListener

	/** Create a participant.
	 * 
	 * @param address the address of the participant.
	 * @param eventListener the participant.
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	package static def createAndInit(address : Address, eventListener : InformedEventListener) : Participant {
		var participant = new Participant(address, eventListener)
		var links = new AddressLazyLinks
		links.participant = participant
		SREutils::setSreSpecificData(address, links)
		return participant
	}

	/** Constructor.
	 *
	 * @param address the address of the participant.
	 * @param eventListener the participant.
	 */
	private new (address : Address, eventListener : InformedEventListener) {
		this.participantAddress = address
		this.participant = eventListener
	}

	/** Replies participant address. */
	def getAddress : Address {
		this.participantAddress
	}

	/** Replies the participant. */
	def getParticipant : InformedEventListener {
		this.participant
	}

	override equals(obj : Object) : boolean {
		if (obj instanceof Participant) {
			return obj.address == address
		}
		return false
	}

	override hashCode : int {
		address.hashCode
	}

	override toString : String {
		this.participantAddress?.toString
	}
	
}
