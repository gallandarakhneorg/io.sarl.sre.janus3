/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.spaces

import com.google.inject.Injector
import io.sarl.core.OpenEventSpace
import io.sarl.core.OpenEventSpaceSpecification
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.EventSpaceSpecification
import io.sarl.lang.core.SpaceID
import io.sarl.sre.services.logging.LoggingService
import io.sarl.util.RestrictedAccessEventSpace
import io.sarl.util.RestrictedAccessEventSpaceSpecification
import java.security.acl.Acl
import java.security.acl.Permission
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Provider

/** 
 * Abstract specification for standard event spaces into the SRE. 
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
abstract class AbstractSreEventSpaceSpecification {

	val injector : Injector

	val lockProvider : Provider<ReadWriteLock>

	val logger : LoggingService

	val spaceParticipantListenerFactory : SpaceParticipantListenerFactory

	val defaultSpace : OpenEventSpace

	/** Constructor.
	 * 
	 * @param injector the injector to use for creating the space.
	 * @param lockProvider the provider of synchronization locks.
	 * @param defaultSpace the default space.
	 * @param spaceParticipantListenerFactory the factory of listeners on space participant events.
	 * @param logger the logging service. 
	 */
	new (injector : Injector, lockProvider : Provider<ReadWriteLock>,
		defaultSpace : OpenEventSpace,
		spaceParticipantListenerFactory : SpaceParticipantListenerFactory,
		logger : LoggingService) {
		this.injector = injector;
		this.lockProvider = lockProvider
		this.defaultSpace = defaultSpace
		this.spaceParticipantListenerFactory = spaceParticipantListenerFactory
		this.logger = logger
	}

	protected def createSpaceInstance(id : SpaceID, params : Object*) : OpenLocalEventSpace {
		val listener = this.spaceParticipantListenerFactory.create(this.defaultSpace, this.logger.kernelLogger)
		val ^space = new OpenLocalEventSpace(id, this.lockProvider, listener, this.logger)
		this.injector.injectMembers(^space)
		return ^space
	}

}

/** 
 * Specification for standard event spaces into the SRE. 
 * 
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreEventSpaceSpecification extends AbstractSreEventSpaceSpecification implements EventSpaceSpecification {

	def ^create(id : SpaceID, params : Object*) : EventSpace {
		id.createSpaceInstance(params)
	}

}

/** 
 * Event space specification related to the SRE. 
 * 
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreOpenEventSpaceSpecification extends AbstractSreEventSpaceSpecification implements OpenEventSpaceSpecification {
	
	def ^create(id : SpaceID, params : Object*) : OpenEventSpace {
		id.createSpaceInstance(params)
	}

}

/** 
 * Default implementation of the specification of a restricted-access event space.
 * 
 * <p>The initialization parameters of {@link #create(SpaceID, Object...)} must contain an instance of {@link Acl}. This instance is
 * the Access Control List. The first parameter that is a {@link Permission} will be assumed as the permission to have to be
 * allowed to access to the space.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreRestrictedAccessEventSpaceSpecification implements RestrictedAccessEventSpaceSpecification {

	var injector : Injector

	val lockProvider : Provider<ReadWriteLock>

	val logger : LoggingService

	val spaceParticipantListenerFactory : SpaceParticipantListenerFactory

	val defaultSpace : EventSpace

	/** Constructor.
	 * 
	 * @param injector the injector to use for creating the space..
	 * @param lockProvider the provider of synchronization locks.
	 * @param defaultSpace the default space.
	 * @param spaceParticipantListenerFactory the factory of listeners on space participant events.
	 * @param logger the logging service. 
	 */
	new (injector : Injector, lockProvider : Provider<ReadWriteLock>, defaultSpace : OpenEventSpace,
		spaceParticipantListenerFactory : SpaceParticipantListenerFactory, logger : LoggingService) {
		this.injector = injector;
		this.lockProvider = lockProvider
		this.defaultSpace = defaultSpace
		this.spaceParticipantListenerFactory = spaceParticipantListenerFactory
		this.logger = logger
	}

	def ^create(id : SpaceID, params : Object*) : RestrictedAccessEventSpace {
		var acl : Acl = null
		var permission : Permission = null
		for (o : params) {
			if (o instanceof Acl) {
				acl = o
			} else if (o instanceof Permission) {
				permission = o
			}
		}
		if (acl !== null) {
			if (permission === null) {
				permission = new RegistrationPermission
			}
			val listener = this.spaceParticipantListenerFactory.create(this.defaultSpace, this.logger.kernelLogger)
			val ^space = new RestrictedAccessLocalEventSpace(id, acl, permission, this.lockProvider, listener, this.logger)
			this.injector.injectMembers(^space)
			return ^space
		}
		throw new IllegalArgumentException
	}

}
