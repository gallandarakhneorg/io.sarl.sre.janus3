/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.spaces

import com.google.inject.Injector
import io.sarl.lang.core.SpaceID
import io.sarl.util.OpenEventSpace
import javax.inject.Inject
import io.sarl.util.OpenEventSpaceSpecification
import io.sarl.lang.core.EventSpaceSpecification
import io.sarl.lang.core.EventSpace
import io.sarl.util.RestrictedAccessEventSpaceSpecification
import io.sarl.util.RestrictedAccessEventSpace
import java.security.acl.Acl
import java.security.acl.Permission

/** 
 * Specification for standard event spaces into the SRE. 
 * 
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreEventSpaceSpecification implements EventSpaceSpecification {

	val injector : Injector
	
	/** Constructor.
	 * 
	 * @param injector the injector to use for creating the space..
	 */
	@Inject
	new (injector : Injector) {
		this.injector = injector;
	}

	def ^create(id : SpaceID, params : Object*) : EventSpace {
		val ^space = new OpenLocalEventSpace(id)
		this.injector.injectMembers(^space)
		return ^space
	}

}

/** 
 * Event space specification related to the SRE. 
 * 
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreOpenEventSpaceSpecification implements OpenEventSpaceSpecification {

	var injector : Injector

	/** Constructor.
	 * 
	 * @param injector the injector to use for creating the space..
	 */
	@Inject
	new (injector : Injector) {
		this.injector = injector;
	}
	
	def ^create(id : SpaceID, params : Object*) : OpenEventSpace {
		val ^space = new OpenLocalEventSpace(id)
		this.injector.injectMembers(^space)
		return ^space
	}

}

/** 
 * Default implementation of the specification of a restricted-access event space.
 * 
 * <p>The initialization parameters of {@link #create(SpaceID, Object...)} must contain an instance of {@link Acl}. This instance is
 * the Access Control List. The first parameter that is a {@link Permission} will be assumed as the permission to have to be
 * allowed to access to the space.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SreRestrictedAccessEventSpaceSpecification implements RestrictedAccessEventSpaceSpecification {

	var injector : Injector

	/** Constructor.
	 * 
	 * @param injector the injector to use for creating the space..
	 */
	@Inject
	new (injector : Injector) {
		this.injector = injector;
	}

	def ^create(id : SpaceID, params : Object*) : RestrictedAccessEventSpace {
		var acl : Acl = null
		var permission : Permission = null
		for (o : params) {
			if (o instanceof Acl) {
				acl = o
			} else if (o instanceof Permission) {
				permission = o
			}
		}
		if (acl !== null) {
			if (permission === null) {
				permission = new RegistrationPermission
			}
			val ^space = new RestrictedAccessLocalEventSpace(id, acl, permission)
			this.injector.injectMembers(^space)
			return ^space
		}
		throw new IllegalArgumentException
	}

}
