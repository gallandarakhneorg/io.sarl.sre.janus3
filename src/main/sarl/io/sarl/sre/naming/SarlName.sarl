/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.naming

import java.io.Serializable
import java.lang.ref.WeakReference
import java.net.URI

/** 
 * This class represents a component name. Each component in a name is an atomic name.
 * 
 * <p>The components of a name are numbered. The indexes of a
 * name with N components range from 0 up to, but not including, N.
 * An empty compound name has no components.
 * 
 * <h1>Multithreaded Access</h1>
 * A {@code SName} instance is not synchronized against concurrent
 * multithreaded access. Multiple threads trying to access and modify a
 * {@code SName} should lock the object.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
abstract class SarlName implements Cloneable, Serializable, Comparable<SarlName> {

	transient var associatedObject : WeakReference<Object>

	val uri : URI

	var scheme : NameScheme

	protected new (uri : URI) {
		assert uri !== null
		this.uri = uri
	}

	/** Replies the scheme of this name. */
	def getScheme : NameScheme {
		if (this.scheme === null) {
			this.scheme = INameParser::getSchemeObject(toURI.scheme)
		}
		return this.scheme
	}

	@Pure
	override compareTo(name : SarlName) : int {
		if (name === null) 1 else this.uri.compareTo(name.uri)
	}

	/** Replies the URI associated to this name. */
	def toURI : URI {
		this.uri
	}

	/** Replies the name of the fragment. */
	def getFragment : String {
		this.uri.fragment
	}

	/** Replies if this name has a fragment associated to it.
	 */
	def hasFragment : boolean {
		!this.uri.fragment.isNullOrEmpty
	}
	
	/** Replies the associated object.
	 */
	final def getAssociatedObject : Object {
		this.associatedObject?.get
	}

	/** Change the associated object.
	 */
	final def setAssociatedObject(obj : Object) {
		this.associatedObject = if (obj === null) null else new WeakReference(obj)
	}

}
