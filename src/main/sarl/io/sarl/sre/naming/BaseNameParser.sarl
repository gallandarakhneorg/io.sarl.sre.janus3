/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.naming

import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Capacity
import java.net.URI
import java.util.StringTokenizer
import java.util.UUID
import com.google.common.util.concurrent.Service

/** 
 * Parser of names that is accepting URI-based syntax.
 * 
 * <p>The different types of names are: <ul>
 * <li>Context:<ul>
 * <li>{@code "context:[/]{0-2}contextId[#fragmentName]"}</li>
 * </ul></li>
 * <li>Space:<ul>
 * <li>{@code "space:[/]{0-2}contextId/spaceId[#fragmentName]"}</li>
 * </ul></li>
 * <li>Agent:<ul>
 * <li>{@code "agent:[/]{0-2}agentId[#fragmentName]"}</li>
 * <li>{@code "agent:[/]{0-2}contextId/agentId[#fragmentName]"}</li>
 * <li>{@code "agent:[/]{0-2}contextId/spaceId/agentId[#fragmentName]"}</li>
 * </ul></li>
 * <li>Skill:<ul>
 * <li>{@code "skill:[/]{0-2}agentId/capacityName[#fragmentName]"}</li>
 * <li>{@code "skill:[/]{0-2}contextId/agentId/capacityName[#fragmentName]"}</li>
 * <li>{@code "skill:[/]{0-2}contextId/spaceId/agentId/capacityName[#fragmentName]"}</li>
 * </ul></li>
 * <li>Behavior:<ul>
 * <li>{@code "behavior:[/]{0-2}agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
 * <li>{@code "behavior:[/]{0-2}contextId/agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
 * <li>{@code "behavior:[/]{0-2}contextId/spaceId/agentId/behaviorName[/behaviorIndex][#fragmentName]"}</li>
 * </ul></li>
 * <li>Service:<ul>
 * <li>{@code "service:[/]{0-2}serviceName][#fragmentName]"}</li>
 * </ul></li>
 * </ul>
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class BaseNameParser implements NameParser {

	@Pure	
	def normalize(name : URI) : URI {
		try {
			val scheme = name.scheme
			val schemeObj = scheme.schemeObject
			if (schemeObj !== null
				&& name.query.isNullOrEmpty
				&& name.userInfo.isNullOrEmpty
				&& name.port === -1) {
				switch (schemeObj) {
					case CONTEXT: {
						return name.refactor(1, 1)
					}
					case SPACE: {
						return name.refactor(2, 2)
					}
					case AGENT: {
						return name.refactor(1, 3)
					}
					case SKILL: {
						return name.refactor(2, 4)
					}
					case BEHAVIOR: {
						return name.refactor(2, 5, true)
					}
					case SERVICE: {
						return name.refactor(1, 1)
					}
				}
			}
		} catch (ex : Throwable) {
			//
		}
		return null
	}

	/** Refactors the URI.
	 * 
	 * @param uri the URI to refactor.
	 * @param minElements is the expected minimum number of path components.
	 * @param maxElements is the expected maximum number of path components.
	 * @param lastIsInteger indicates if the last component could be an integer. In this case, 
	 * the expected number of not-integer components becomes [{@code minElements}, {@code maxElements - 1}]. 
	 * @return the new URI. 
	 */
	protected def refactor(uri : URI, minElements : int, maxElements : int, lastIsInteger : boolean = false) : URI {
		val newPath = new StringBuilder
		if (!uri.host.isNullOrEmpty) {
			newPath.append("/").append(uri.host)
		}
		if (!uri.path.isNullOrEmpty) {
			if (!uri.path.startsWith("/")) {
				newPath.append("/")
			}
			newPath.append(uri.path)
		}
		if (newPath.length === 0) {
			if (!uri.schemeSpecificPart.isNullOrEmpty) {
				if (!uri.schemeSpecificPart.startsWith("/")) {
					newPath.append("/")
				}
				newPath.append(uri.schemeSpecificPart)
			}
		}
		val path = newPath.toString
		if (!path.empty) {
			val validatedPath = validatePath(path, minElements, maxElements, lastIsInteger)
			if (!validatedPath.isNullOrEmpty) {
				return new URI(uri.scheme, null, validatedPath.toString, uri.fragment)
			}
		}
		return null
	}

	/** Validate the path.
	 *
	 * @param path the path to validate.
	 * @param minElements is the expected minimum number of path components.
	 * @param maxElements is the expected maximum number of path components.
	 * @param lastIsInteger indicates if the last component could be an integer. In this case, 
	 * the expected number of not-integer components becomes [{@code minElements}, {@code maxElements - 1}]. 
	 * @return the validated path.
	 */
	protected def validatePath(path : String, minElements : int, maxElements : int, lastIsInteger : boolean = false) : String {
		if (path.isNullOrEmpty) {
			return if ((minElements..maxElements).contains(0)) "" else null
		}
		var tokenizer = new StringTokenizer(path, "/")
		var buffer = new StringBuilder
		var lastComponent : String = null
		var nb = 0
		while (tokenizer.hasMoreTokens) {
			var token = tokenizer.nextToken
			if (token.isNullOrEmpty) {
				return null
			}
			buffer.append("/").append(token)
			lastComponent = token
			nb++
		}
		if (lastIsInteger) {
			try {
				// Fails if the component is not an integer
				Integer::parseUnsignedInt(lastComponent, 10)
				if ((minElements + 1 .. maxElements).contains(nb)) {
					return buffer.toString
				}
			} catch (ex : Throwable) {
				if ((minElements .. maxElements - 1).contains(nb)) {
					return buffer.toString
				}
			}
		} else if ((minElements .. maxElements).contains(nb)) {
			return buffer.toString
		}
		return null
	}

	/** Decode the name of a service.
	 */
	protected def decodeService(name : URI) : ServiceName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token = tokenizer.nextToken
			return new ServiceName(name, Class::forName(token) as Class<? extends Service>)
		}
		return null
	}

	/** Decode the name of a context.
	 */
	protected def decodeContext(name : URI) : ContextName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token = tokenizer.nextToken
			return new ContextName(name, UUID::fromString(token))
		}
		return null
	}

	/** Decode the name of a space.
	 */
	protected def decodeSpace(name : URI) : SpaceName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token0 = tokenizer.nextToken
			if (tokenizer.hasMoreTokens) {
				val token1 = tokenizer.nextToken
				return new SpaceName(name, UUID::fromString(token0), UUID::fromString(token1))
			}
		}
		return null
	}

	/** Decode the name of an agent.
	 */
	protected def decodeAgent(name : URI) : AgentName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token0 = tokenizer.nextToken
			if (tokenizer.hasMoreTokens) {
				val token1 = tokenizer.nextToken
				if (tokenizer.hasMoreTokens) {
					val token2 = tokenizer.nextToken
					return new AgentName(name, UUID::fromString(token0), UUID::fromString(token1),
						UUID::fromString(token2))
				}
				return new AgentName(name, UUID::fromString(token0), null, UUID::fromString(token1))
			}
			return new AgentName(name, null, null, UUID::fromString(token0))
		}
		return null
	}

	/** Decode the name of a skill.
	 */
	protected def decodeSkill(name : URI) : SkillName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token0 = tokenizer.nextToken
			if (tokenizer.hasMoreTokens) {
				val token1 = tokenizer.nextToken
				if (tokenizer.hasMoreTokens) {
					val token2 = tokenizer.nextToken
					if (tokenizer.hasMoreTokens) {
						val token3 = tokenizer.nextToken
						return new SkillName(name, UUID::fromString(token0), UUID::fromString(token1),
							UUID::fromString(token2), Class::forName(token3) as Class<? extends Capacity>)
					}
					return new SkillName(name, UUID::fromString(token0), null, UUID::fromString(token1),
						Class::forName(token2) as Class<? extends Capacity>)
				}
				return new SkillName(name, null, null, UUID::fromString(token0),
					Class::forName(token1) as Class<? extends Capacity>)
			}
		}
		return null
	}

	/** Decode the name of a behavior.
	 */
	protected def decodeBehavior(name : URI) : BehaviorName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token0 = tokenizer.nextToken
			if (tokenizer.hasMoreTokens) {
				val token1 = tokenizer.nextToken
				if (tokenizer.hasMoreTokens) {
					val token2 = tokenizer.nextToken
					if (tokenizer.hasMoreTokens) {
						val token3 = tokenizer.nextToken
						if (tokenizer.hasMoreTokens) {
							// 5 components
							val token4 = tokenizer.nextToken
							return new BehaviorName(name, UUID::fromString(token0),
								UUID::fromString(token1), UUID::fromString(token2),
								Class::forName(token3) as Class<? extends Behavior>,
								Integer.parseUnsignedInt(token4, 10))
						}
						// 4 components
						try {
							var beh = Class::forName(token2) as Class<? extends Behavior>
							return new BehaviorName(name, UUID::fromString(token0), null,
								UUID::fromString(token1), beh, Integer.parseUnsignedInt(token3, 10))
						} catch (ex : Throwable) {
							return new BehaviorName(name, UUID::fromString(token0), UUID::fromString(token1),
								UUID::fromString(token2),  Class::forName(token3) as Class<? extends Behavior>,
								-1)
						}
					}
					// 3 components
					try {
						var beh = Class::forName(token1) as Class<? extends Behavior>
						return new BehaviorName(name, null, null, UUID::fromString(token0),
							beh, Integer.parseUnsignedInt(token2, 10))
					} catch (ex : Throwable) {
						return new BehaviorName(name, UUID::fromString(token0), null,
							UUID::fromString(token1), Class::forName(token2) as Class<? extends Behavior>,
							-1)
					}
				}
				// 2 components
				return new BehaviorName(name, null, null, UUID::fromString(token0),
					Class::forName(token1) as Class<? extends Behavior>, -1)
			}
		}
		return null
	}

	@Pure
	override decode(name : URI) : SarlName {
		try {
			if (name !== null && name.path !== null && name.path.startsWith("/")) {
				var scheme = name.scheme.getSchemeObject
				if (scheme !== null) {
					switch (scheme) {
						case CONTEXT: {
							return name.decodeContext
						}
						case SPACE: {
							return name.decodeSpace
						}
						case AGENT: {
							return name.decodeAgent
						}
						case SKILL: {
							return name.decodeSkill
						}
						case BEHAVIOR: {
							return name.decodeBehavior
						}
						case SERVICE: {
							return name.decodeService
						}
					}
				}
			}
		} catch (ex : Throwable) {
			//
		}
		return null
	}

}
