/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.naming

import com.google.inject.ImplementedBy
import java.net.URI

/** 
 * Parser of names
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@ImplementedBy(typeof(BaseNameParser))
interface NameParser {

	/** Parse the scheme.
	 */
	@Pure
	static def getSchemeObject(scheme : String) : NameScheme {
		if (scheme !== null) {
			for (s : NameScheme::values) {
				if (scheme.equalsIgnoreCase(s.name)) {
					return s
				}
			}
		}
		return null
	}

	/** 
	 * Parse the string representation of the name, and create the URI representation.
	 * 
	 * @param name the string representation of the name.
	 * @return the URI representation of the given name, or {@code null} if the given string cannot be parsed.
	 */
	@Pure
	def decode(name : String) : URI {
		if (!name.isNullOrEmpty) {
			try {
				var uri = URI::create(name)
				return normalize(uri)
			} catch (ex : Throwable) {
				//
			}
		}
		return null
	}

	/** 
	 * Parse the string representation of the name, and create the URI representation.
	 * 
	 * @param name the string representation of the name.
	 * @return the URI representation of the given name, or {@code null} if the given string cannot be parsed.
	 */
	@Pure
	def normalize(name : URI) : URI
	
	/** 
	 * Parse the URI of the name, and create the name object.
	 * The argument must be a normalized URI that is computed by {@link #normalize(URI)}.
	 * 
	 * @param name the normalized URI representation of the name. See {@link #normalize(URI)}.
	 * @return the name, or {@code null} if the given URI cannot be parsed.
	 */
	@Pure
	def decode(name : URI) : SarlName

}
