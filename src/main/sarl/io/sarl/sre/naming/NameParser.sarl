/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.naming

import io.sarl.sre.boot.internal.naming.SchemeNameParsers
import java.net.URI
import java.util.Set
import javax.inject.Inject

/** 
 * Parser of names that is accepting URI-based syntax.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class NameParser implements INameParser {

	val schemeNameParser = <NameScheme, ISchemeNameParser<?>>newTreeMap(null)

	/** Change the set of scheme name parsers that is used by this base name parser.
	 *
	 * <p>This function is annotated in order to be used by the Guice injector.
	 *
	 * @param parsers the set of scheme name parsers.
	 */
	@SuppressWarnings("raw_type")
	@Inject
	def setSchemeNameParsers(@SchemeNameParsers parsers : Set<ISchemeNameParser>) {
		if (parsers !== null) {
			this.schemeNameParser.clear
			for (parser : parsers) {
				parser.addSchemeNameParser
			}
		}
	}	

	override addSchemeNameParser(parser : ISchemeNameParser<?>) {
		assert parser !== null
		this.schemeNameParser.put(parser.scheme, parser)
	}

	override removeSchemeNameParser(scheme : NameScheme) : ISchemeNameParser<?> {
		assert scheme !== null
		this.schemeNameParser.remove(scheme)
	}

	@Pure	
	def normalize(name : URI) : URI {
		try {
			val scheme = name.scheme
			val schemeObj = scheme.schemeObject
			if (schemeObj !== null
				&& name.query.isNullOrEmpty
				&& name.userInfo.isNullOrEmpty
				&& name.port === -1) {
				var parser = this.schemeNameParser.get(schemeObj)
				if (parser !== null) {
					return parser.refactor(name)
				}
			}
		} catch (ex : Throwable) {
			//
		}
		return null
	}

	@Pure
	override decode(name : URI) : SarlName {
		try {
			if (name !== null && name.path !== null && name.path.startsWith("/")) {
				var scheme = name.scheme.getSchemeObject
				if (scheme !== null) {
					var parser = this.schemeNameParser.get(scheme)
					if (parser !== null) {
						return parser.decode(name)
					}
				}
			}
		} catch (ex : Throwable) {
			//
		}
		return null
	}

}
