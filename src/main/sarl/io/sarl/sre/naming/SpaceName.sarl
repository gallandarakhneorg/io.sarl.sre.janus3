/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.naming

import io.sarl.lang.core.Space
import io.sarl.lang.util.ClearableReference
import java.net.URI
import java.util.UUID
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * This class represents a space name.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SpaceName extends SarlName {

	transient var ^space : ClearableReference<Space>

	@Accessors
	val contextId : UUID

	@Accessors
	val spaceId : UUID

	/** Constructor.
	 *
	 * @param uri the uri of the context.
	 * @param contextId the identifier of the context.
	 * @param spaceId the identifier of the context.
	 */
	protected new (uri : URI, contextId : UUID, spaceId : UUID) {
		super(uri)
		this.contextId = contextId
		this.spaceId = spaceId
	}

	override getAssociatedObject : Object {
		getAssociatedSpace.get
	}

	/** Replies the space instance that is associated to this name.
	 * The associated space may be {@code null}. In this case, it does
	 * not mean that the space instance does not exist into the system.
	 * It means that the space instance is not explicitly associated
	 * to the name.
	 * 
	 * @return the associated space, or {@code null} if there is no
	 * space with the given name or if the space is not yet known.
	 */
	def getAssociatedSpace : ClearableReference<Space> {
		if (this.^space === null) {
			this.^space = new ClearableReference(null)
		}
		return this.^space
	}

	/** Change the space instance that is associated to this name.
	 * The associated space may be {@code null}. In this case, it does
	 * not mean that the space instance does not exist into the system.
	 * It means that the space instance is not explicitly associated
	 * to the name.
	 * 
	 * @param spacce the associated space, or {@code null} if there is no
	 * space with the given name or if the space is not yet known.
	 */
	def setAssociatedSpace(^space : Space) {
		this.^space = if(^space === null) null else new ClearableReference(^space)
	}

}
