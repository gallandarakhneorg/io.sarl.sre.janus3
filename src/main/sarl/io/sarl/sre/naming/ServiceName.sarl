/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2019 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.naming

import com.google.common.util.concurrent.Service
import io.sarl.lang.util.ClearableReference
import java.net.URI
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * This class represents a service name.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class ServiceName extends SarlName {

	transient var service : ClearableReference<Service>

	@Accessors
	val serviceType : Class<? extends Service>

	/** Constructor.
	 *
	 * @param uri the uri of the context.
	 * @param service the type of service.
	 */
	protected new (uri : URI, service : Class<? extends Service>) {
		super(uri)
		this.serviceType = service
	}

	override getAssociatedObject : Object {
		getAssociatedService.get
	}

	/** Replies the service instance that is associated to this name.
	 * The associated service may be {@code null}. In this case, it does
	 * not mean that the service instance does not exist into the system.
	 * It means that the service instance is not explicitly associated
	 * to the name.
	 *
	 * @return the associated service, or {@code null} if there is no
	 *     context with the given name or if the service is not yet known.
	 */
	def getAssociatedService : ClearableReference<Service> {
		if (this.service === null) {
			this.service = new ClearableReference(null)
		}
		return this.service
	}

	/** Change the service instance that is associated to this name.
	 * The associated service may be {@code null}. In this case, it does
	 * not mean that the service instance does not exist into the system.
	 * It means that the service instance is not explicitly associated
	 * to the name.
	 * 
	 * @param context the associated service, or {@code null} if there is no
	 * context with the given name or if the service is not yet known.
	 */
	def setAssociatedService(service : Service) {
		this.service = if (service === null) null else new ClearableReference(service)
	}

}
