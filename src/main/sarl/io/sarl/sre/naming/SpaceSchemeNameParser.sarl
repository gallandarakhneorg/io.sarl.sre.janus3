/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.naming

import java.net.URI
import java.util.StringTokenizer
import java.util.UUID

/** 
 * Parser of space names that is accepting URI-based syntax.
 * 
 * <p>The different types of names are: <ul>
 * <li>{@code "space:[/]{0-2}contextId/spaceId[#fragmentName]"}</li>
 * </ul>
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SpaceSchemeNameParser extends AbstractSchemeNameParser<SpaceName> {

	/** Constructor.
	 * 
	 * @param scheme the name scheme that is supported by this parser. By default it is {@link NameScheme.SPACE}.
	 */
	new (scheme : NameScheme = NameScheme::SPACE) {
		super(scheme)
	}

	@Pure	
	override refactor(name : URI) : URI {
		return name.refactor(2, 2)
	}

	@Pure
	override decode(name : URI) : SpaceName {
		val tokenizer = new StringTokenizer(name.path, "/")
		if (tokenizer.hasMoreTokens) {
			val token0 = tokenizer.nextToken
			if (tokenizer.hasMoreTokens) {
				val token1 = tokenizer.nextToken
				return new SpaceName(name, UUID::fromString(token0), UUID::fromString(token1))
			}
		}
		return null
	}

}
