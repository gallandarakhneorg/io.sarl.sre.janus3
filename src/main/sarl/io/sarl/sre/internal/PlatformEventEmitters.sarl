/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.internal

import io.sarl.core.AgentKilled
import io.sarl.core.AgentSpawned
import io.sarl.core.Behaviors
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.Logging
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.core.SpaceCreated
import io.sarl.core.SpaceDestroyed
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Address
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.util.ClearableReference
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.context.InternalContextMembershipListener
import io.sarl.sre.services.context.InternalContextMembershipListenerFactory
import io.sarl.sre.services.context.SpaceRepositoryListener
import io.sarl.sre.services.context.SpaceRepositoryListenerFactory
import io.sarl.sre.services.lifecycle.ContextReference
import io.sarl.sre.services.lifecycle.LifecycleServiceListener
import java.lang.ref.WeakReference
import java.text.MessageFormat
import java.util.List
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import java.util.logging.Logger
import javax.inject.Provider

import static io.sarl.sre.services.lifecycle.AgentLife.*
import io.sarl.sre.spaces.SpaceParticipantListener
import io.sarl.sre.spaces.Participant
import io.sarl.core.ParticipantJoined
import io.sarl.core.ParticipantLeft
import io.sarl.sre.spaces.SpaceParticipantListenerFactory

/** Emit the space platform events.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SpaceEventEmitter implements SpaceRepositoryListener {

	val logger : Logger

	val defaultSpace : EventSpace
	
	new (contextID : UUID, defaultSpace : EventSpace, logger : Logger) {
		this.defaultSpace = defaultSpace
		this.logger = logger
	}

	override spaceCreated(^space : Space, isLocalCreation : boolean) {
		this.logger.config [MessageFormat::format(Messages::SpaceEventEmitter_0, ^space.spaceID)]
		// Send the event in the default space of the context.
		if (isLocalCreation && this.defaultSpace !== null) {
			var spaceId = this.defaultSpace.spaceID
			var addr = new Address(spaceId, spaceId.contextID)
			// The first parameter is null because the event has an address.
			this.defaultSpace.emit(null, new SpaceCreated(addr, ^space.spaceID))
		}
	}

	override spaceDestroyed(^space : Space, isLocalDestruction : boolean) {
		this.logger.config[MessageFormat::format(Messages::SpaceEventEmitter_1, ^space.spaceID)]
		// Send the event in the default space of the context.
		if (isLocalDestruction && this.defaultSpace !== null) {
			var spaceId = this.defaultSpace.spaceID
			var addr = new Address(spaceId, spaceId.contextID)
			// The first parameter is null because the event has an address.
			this.defaultSpace.emit(null, new SpaceDestroyed(addr, ^space.spaceID))
		}
	}

}

/** Factory for a space event emitter.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7.0
 */
class SpaceEventEmitterFactory implements SpaceRepositoryListenerFactory {

	def create(contextID : UUID, defaultSpace : EventSpace, logger : Logger) : SpaceRepositoryListener {
		new SpaceEventEmitter(contextID, defaultSpace, logger)
	}

}

/** Emit the space participant platform events.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SpaceParticipantEventEmitter implements SpaceParticipantListener {

	val logger : Logger

	val defaultSpace : EventSpace

	new (defaultSpace : EventSpace, logger : Logger) {
		this.defaultSpace = defaultSpace
		this.logger = logger
	}

	override participantJoined(participant : Participant) {
		this.logger.config[MessageFormat::format(Messages::SpaceParticipantEventEmitter_0, participant.address)]
		// Send the event in the default space of the context.
		if (this.defaultSpace !== null) {
			var participantAddr = participant.address
			var addr = new Address(this.defaultSpace.spaceID, participantAddr.UUID)
			// The first parameter is null because the event has an address.
			this.defaultSpace.emit(null, new ParticipantJoined(addr, participantAddr.spaceID))
		}
	}

	override participantLeft(participant : Participant) {
		this.logger.config[MessageFormat::format(Messages::SpaceParticipantEventEmitter_1, participant.address)]
		// Send the event in the default space of the context.
		if (this.defaultSpace !== null) {
			var participantAddr = participant.address
			var addr = new Address(this.defaultSpace.spaceID, participantAddr.UUID)
			// The first parameter is null because the event has an address.
			this.defaultSpace.emit(null, new ParticipantLeft(addr, participantAddr.spaceID))
		}
	}

}

/** Factory for a space participant event emitter.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SpaceParticipantEventEmitterFactory implements SpaceParticipantListenerFactory {

	def create(defaultSpace : EventSpace, logger : Logger) : SpaceParticipantListener {
		new SpaceParticipantEventEmitter(defaultSpace, logger)
	}

}


/** Emit the agent platform events.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class AgentEventEmitter implements LifecycleServiceListener {

	val logger : Logger

	new (logger : Logger) {
		this.logger = logger
	}

	override agentSpawned(spawningAgent : UUID, parent : Context, agentType : Class<? extends Agent>,
		spawnedAgents : List<Agent>, initializationParameters : Object[]) {
		val identifiers = spawnedAgents.map[it.ID]
		this.logger.config [MessageFormat::format(Messages::AgentEventEmitter_0, identifiers)]
		 // Send the event in the default space.
		val defSpace = parent.defaultSpace
		assert defSpace !== null, "A context does not contain a default space"
		val source = new Address(defSpace.spaceID, spawningAgent ?: parent.ID)
		assert source !== null
		val ^event = new AgentSpawned(source, agentType.name, identifiers)
		// The first parameter is null because the event has an address.
		// TODO: Not efficient filtering
		defSpace.emit(null, ^event) [!identifiers.contains(it.UUID)]
	}
	
	override agentDestroyed(^agent : Agent, outerContexts : Iterable<ContextReference>) {
		this.logger.config[MessageFormat::format(Messages::AgentEventEmitter_1, ^agent.ID)]
		val size = outerContexts.size
		val spaces = <EventSpace>newArrayOfSize(size)
		val events = <AgentKilled>newArrayOfSize(size)
		var i = 0
		for (contextReference : outerContexts) {
			val ^event = new AgentKilled(contextReference.addressInDefaultSpace, ^agent.ID, ^agent.class.name)
			spaces.set(i, contextReference.defaultSpace)
			events.set(i, ^event)
			i++
		} 
		for (i = 0; i < size; i++) {
			// The first parameter is null because the event has an address.
			spaces.get(i).emit(null, events.get(i)) [it.UUID != ^agent.ID]
		}
	}
	
}

/** Emit the context member platform events.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class ContextMemberEventEmitter implements ExternalContextMemberListener {

	val logger : Logger

	/** Constructors.
	 *
	 * @param owner the owner of this emitter.
	 * @param logger the logger to use.
	 */
	new (logger : Logger) {
		this.logger = logger
	}

	override memberJoined(joinedContext : AgentContext, joinedContextSpaceId : SpaceID,
		joiningAgentID : UUID, joiningAgentType : String) {
		val contextID = joinedContext.ID
		this.logger.config [
			MessageFormat::format(Messages::ContextMemberEventEmitter_2, joiningAgentID, contextID)
		]
		val defSpace = joinedContext.defaultSpace
		val source = new Address(joinedContextSpaceId, contextID)
		// The first parameter is null because the event has an address.
		defSpace.emit(null, new MemberJoined(source, contextID, joiningAgentID, joiningAgentType)) [
			it.UUID != joiningAgentID
		]
	}

	override memberLeft(leftContext : AgentContext, leftContextSpaceId : SpaceID, leftMemberID : UUID,
		agentType : String) {
		val contextID = leftContext.ID
		this.logger.config [
			MessageFormat::format(
				Messages::ContextMemberEventEmitter_3,
				leftMemberID,
				contextID
		)]
		val defSpace = leftContext.defaultSpace
		val source = new Address(leftContextSpaceId, leftContext.ID)
		// The first parameter is null because the event has an address.
		defSpace.emit(null, new MemberLeft(source, leftMemberID, agentType)) [
			it.UUID != leftMemberID
		]
	}

}

/** Emit the context member platform events.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
class SubHolonContextEventEmitter implements InternalContextMembershipListener {

	val owner : WeakReference<Agent>

	val lockProvider : Provider<ReadWriteLock>

	var behaviorSkill : ClearableReference<Skill>

	var loggingSkill : ClearableReference<Skill>

	/** Constructors.
	 * 
	 * @param owner the owner of this emitter.
	 * @param lockProvider the provider of synchronization locks.
	 */
	new (owner : Agent, lockProvider : Provider<ReadWriteLock>) {
		this.owner = new WeakReference(owner)
		this.lockProvider = lockProvider
	}

	private def getBehaviors : Behaviors {
		var o = this.owner.get
		if (o !== null) {
			if (this.behaviorSkill?.get === null) {
				this.behaviorSkill = SREutils::getInternalSkillReference(o, typeof(Behaviors))
			}
			return SREutils::castInternalSkillReference(o, this.behaviorSkill, typeof(Behaviors))
		}
		return null
	}

	private def getLogging : Logging {
		var o = this.owner.get
		if (o !== null) {
			if (this.loggingSkill?.get === null) {
				this.loggingSkill = SREutils::getInternalSkillReference(o, typeof(Logging))
			}
			return SREutils::castInternalSkillReference(o, this.loggingSkill, typeof(Logging))
		}
		return null
	}
	
	override contextJoined(futureContext : UUID, futureContextDefaultSpaceID : UUID) {
		var o = this.owner.get
		if (o !== null) {
			this.logging.debug[MessageFormat::format(Messages::ContextMemberEventEmitter_0, o.ID, futureContext)]
			var evt = new ContextJoined(futureContext, futureContextDefaultSpaceID)
			evt.source = getLife(o, this.lockProvider).addressInInnerDefaultSpace
			this.behaviors?.wake(evt)
		}
	}

	override contextLeft(contextID : UUID) {
		var o = this.owner.get
		if (o !== null) {
			this.logging.debug[MessageFormat::format(Messages::ContextMemberEventEmitter_1, o.ID, contextID)]
			var evt = new ContextLeft(contextID)
			evt.source = getLife(o, this.lockProvider).addressInInnerDefaultSpace
			this.behaviors?.wake(evt)
		}
	}

}

/** 
 * Factory of the listeners on events related to the membership within a context.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7.0
 */
class SubHolonContextEventEmitterFactory implements InternalContextMembershipListenerFactory {

	def create(owner : Agent, lockProvider : Provider<ReadWriteLock>) : InternalContextMembershipListener {
		new SubHolonContextEventEmitter(owner, lockProvider)
	}

}

