/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.namespace

import java.lang.reflect.Field
import org.eclipse.xtend.lib.annotations.Accessors
import java.lang.reflect.Modifier

/** 
 * Accessor to a field.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class FieldAccess {

	@Accessors(PUBLIC_GETTER)
	val field : Field

	@Accessors(PUBLIC_GETTER)
	val instance : Object

	/** Constructor.
	 *
	 * @param field the field declaration.
	 * @param instance the object to have access to.
	 */
	new (field : Field, instance : Object) {
		assert !Modifier::isStatic(field.modifiers)
		this.field = field
		this.instance = instance
		this.field.accessible = true
	}

	/** Replies the value of the field.
	 *
	 * @return the field's value.
	 */
	@Pure
	def get : Object {
		try {
			return this.field.get(this.instance)
		} catch (ex : Throwable) {
			//
		}
		return null
	}

	/** Change the value of the field.
	 * 
	 * @param value the field's value.
	 * @return the value before setting.
	 * @throws IllegalArgumentException if the given value cannot be assigned to the field.
	 */
	def set(value : Object) : Object throws IllegalArgumentException {
		try {
			val oldValue = this.field.get(this.instance)
			this.field.set(this.instance, value)
			return oldValue
		} catch (ex : IllegalArgumentException) {
			throw ex
		} catch (ex : Throwable) {
			//
		}
		return null
	}

	@Pure
	override toString : String {
		this.field.name
	}

}
