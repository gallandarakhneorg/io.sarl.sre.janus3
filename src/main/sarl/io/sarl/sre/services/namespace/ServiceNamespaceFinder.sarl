/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.namespace

import com.google.common.util.concurrent.Service
import com.google.inject.Injector
import io.sarl.sre.naming.NameScheme
import io.sarl.sre.naming.ServiceName
import org.eclipse.xtend.lib.annotations.Accessors
import javax.inject.Inject

/** 
 * Implementation of a finder of service into the namespaces.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class ServiceNamespaceFinder implements INamespaceFinder<ServiceName, Service> {

	@Accessors(PROTECTED_GETTER)
	var injector : Injector

	/** Change the injector.
	 */
	@Inject
	def setInjector(injector : Injector) {
		this.injector = injector
	}

	override getScheme : NameScheme {
		NameScheme::SERVICE
	}

	override find(name : ServiceName) : Service {
		if (name === null) {
			return null
		}
		var id = name.serviceType
		if (id !== null) {
			try {
				return this.injector.getInstance(id)
			} catch (ex : Throwable) {
				//
			}
		}
		return null
	}
	
}
