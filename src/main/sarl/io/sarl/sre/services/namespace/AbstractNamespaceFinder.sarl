/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.namespace

import com.google.inject.Inject
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Space
import io.sarl.sre.naming.SarlName
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.spaces.SpaceWithParticipants
import java.util.UUID
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Abstract implementation of a finder into the namespaces.
 * 
 * @param <N> the type of name that is supported by this finder.
 * @param <O> the type of object that is searching for.
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
abstract class AbstractNamespaceFinder<N extends SarlName, O> implements INamespaceFinder<N, O> {

	@Accessors(PROTECTED_GETTER)
	var contextService : ContextService

	/** Change the context service.
	 */
	@Inject
	def setContextService(service : ContextService) {
		this.contextService = service
	}

	/** Find the agent.
	 */
	@SuppressWarnings("use_reserved_sarl_annotation")
	@PrivateAPI(isCallerOnly = true)
	protected def findAgent(contextId : UUID, spaceId : UUID, agentId : UUID) : Agent {
		if (agentId !== null) {
			var cid = contextId
			var ctx : Context
			if (cid === null) {
				ctx = this.contextService.rootContext
			} else {
				ctx = this.contextService.getContext(cid)
				if (ctx === null) {
					return null
				}
			}
			assert ctx !== null
			var sid = spaceId
			var ^space : Space
			if (sid === null) {
				^space = ctx.defaultSpace
			} else {
				^space = ctx.getSpace(sid)
				if (^space === null) {
					return null
				}
			}
			if (^space instanceof SpaceWithParticipants) {
				var participantMap = ^space.internalParticipantStructure
				var participant = participantMap.get(agentId)
				if (participant !== null) {
					var listener = participant.participant
					return listener.ownerInstance
				}
			}
		}
		return null
	}

}
