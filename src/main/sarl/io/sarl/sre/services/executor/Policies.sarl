/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.executor

import io.sarl.sre.services.logging.LoggingService
import java.lang.Thread.UncaughtExceptionHandler
import java.text.MessageFormat
import java.util.concurrent.CancellationException
import java.util.concurrent.RejectedExecutionHandler
import java.util.concurrent.ThreadPoolExecutor
import java.util.logging.Level
import java.util.logging.LogRecord
import javax.inject.Inject
import javax.inject.Singleton

/** 
 * Abstract implementation of the thread executor policies for rejected tasks and
 * uncaught exceptions.
 * 
 * <p>The handler for rejected tasks runs the rejected task
 * directly in the calling thread of the {@code execute} method,
 * unless the executor has been shut down, in which case the task
 * is discarded (see {@link ThreadPoolExecutor.CallerRunsPolicy}).
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see {@link ThreadPoolExecutor.CallerRunsPolicy} 
 */
@Singleton
abstract class AbstractThreadExecutorPolicy implements RejectedExecutionHandler, UncaughtExceptionHandler {

	/**
	 * Run the given task within the current thread if the executor is not shut down.
	 * The task is not run by the given executor. The executor is used for checking if
	 * the executor service is shut down.
	 * 
	 * @param runnable the runnable task to be executed
	 * @param executor the executor attempting to give the shut down status
	 * @return {@code true} if the task is run. {@code false} if the task was not run.
	 * @see {@link ThreadPoolExecutor.CallerRunsPolicy} 
	 */
    protected static def runRejectedTask(runnable : Runnable, executor : ThreadPoolExecutor) : boolean {
		// Runs the task directly in the calling thread of the {@code execute} method,
		// unless the executor has been shut down, in which case the task
		// is discarded.
		if (!executor.isShutdown) {
			runnable.run
			return true
		}
		return false
	}

	override rejectedExecution(runnable : Runnable, executor : ThreadPoolExecutor) {
		runRejectedTask(runnable, executor)
	}

}

/** 
 * A handler for rejected tasks that log a warning on the platform logger.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
abstract class AbstractLoggingThreadExecutorPolicy extends AbstractThreadExecutorPolicy {

	protected val logger : LoggingService

	/** 
	 * @param logger the logging service that must be used for output the errors.
	 */
	@Inject
	new (logger : LoggingService) {
		assert logger !== null
		this.logger = logger
	}

	/** Log the given error.
	 *
	 * @param exception the error.
	 * @param taskId the identifier of the task.
	 * @param taslName the name of the task.
	 */
	protected final def log(exception : Throwable, taskId : String, taskName : String) {
		assert exception !== null
		if (exception instanceof EarlyExitException) {
			return
		}
		var cause = exception
		while (cause.cause !== null && cause.cause !== cause) {
			cause = cause.cause
		}
		var record : LogRecord
		if (cause instanceof EarlyExitException) {
			return
		}
		if (cause instanceof CancellationException || exception instanceof CancellationException) {
			// Avoid too much processing if the error could not be logged
			if (!this.logger.kernelLogger.isLoggable(Level::FINEST)) {
				return
			}
			record = new LogRecord(Level::FINEST, MessageFormat::format(Messages::AbortPolicy_1, taskId, taskName))
		} else if (cause instanceof InterruptedException || exception instanceof InterruptedException) {
			// Avoid too much processing if the error could not be logged
			if (!this.logger.kernelLogger.isLoggable(Level::FINEST)) {
				return
			}
			record = new LogRecord(Level::FINEST, MessageFormat::format(Messages::AbortPolicy_2, taskId, taskName))
		} else {
			// Avoid too much processing if the error could not be logged
			if (!this.logger.kernelLogger.isLoggable(Level::SEVERE)) {
				return
			}
			record = new LogRecord(Level::SEVERE,
				MessageFormat::format(Messages::AbortPolicy_3, cause.localizedMessage, taskId, taskName))
		}

		record.setThrown(cause)

		val trace = cause.stackTrace
		if (trace !== null && trace.length > 0) {
			val elt = trace.get(0)
			assert elt !== null
			record.sourceClassName = elt.className
			record.sourceMethodName = elt.methodName
		}

		this.logger.kernelLogger.log(record)
	}

}

/**
 * A handler for rejected tasks and uncaught exceptions that logs a warning on the platform logger
 * when a task is rejected, and an error for each uncaught exception.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @see {@link ThreadPoolExecutor.CallerRunsPolicy}
 */
@Singleton
class VerboseThreadExecutorPolicy extends AbstractLoggingThreadExecutorPolicy {

	override rejectedExecution(runnable : Runnable, executor : ThreadPoolExecutor) {
		if (!runRejectedTask(runnable, executor)) {
			val record = new LogRecord(Level::FINE, MessageFormat::format(Messages::AbortPolicy_0, runnable.toString))
			this.logger.kernelLogger.log(record)
		}
    }
	
	override uncaughtException(t : Thread, e : Throwable) {
		e.log(Long::toString(t.id), t.name)
	}

}

/** 
 * A handler for rejected tasks and uncaught exceptions that logs nothing.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
class QuietThreadExecutorPolicy extends AbstractThreadExecutorPolicy {

	override uncaughtException(t : Thread, e : Throwable) {
	}

}
