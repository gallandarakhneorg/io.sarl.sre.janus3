/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.executor

import com.google.common.util.concurrent.Service
import io.sarl.sre.services.time.TimeListener
import io.sarl.sre.services.time.TimeService
import java.util.Collection
import java.util.Deque
import java.util.List
import java.util.Map
import java.util.concurrent.Callable
import java.util.concurrent.Delayed
import java.util.concurrent.Future
import java.util.concurrent.ScheduledFuture
import java.util.concurrent.ThreadPoolExecutor
import java.util.concurrent.TimeUnit
import java.util.logging.Logger
import javax.inject.Inject
import javax.inject.Singleton
import io.sarl.sre.services.PreReleasableService

/** 
 * Service that executes the tasks synchronously (without threads).
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 2.0.6.0
 */
@Singleton
class SynchronousExecutorService extends AbstractExecutorService implements PreReleasableService, TimeListener {

	@Inject
	var timeService : TimeService

	val scheduledTasks : Map<Long, Deque<JanusScheduledFuture<?>>> = newTreeMap(null)

	val scheduledTaskBuffer : Map<Long, Deque<JanusScheduledFuture<?>>> = newTreeMap(null)

	var previousTime : long = 0
	
	override getServiceDependencies : Collection<Class<? extends Service>> {
		#[ typeof(TimeService) ]
	}

	/** Change the time service that is used by this executor service.
	 *
	 * @param service the new service.
	 */
	@Inject
	def setTimeService(service : TimeService) {
		this.timeService = service
	}

	/** Create a task with the given runnable.
	 *
	 * @param runnable the runnable.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrap(runnable : Runnable, logger : Logger, value : T = null) : FutureRunnable<T> with T {
		if (runnable instanceof FutureRunnable<?>) {
			return runnable as FutureRunnable<T>
		}
		return new FutureRunnable(runnable, logger, value)
	}

	/** Create a task with the given runnable.
	 * 
	 * @param runnable the runnable.
	 * @param time the execution time.
	 * @param delay the delay of execution.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrapScheduled(runnable : Runnable, time : double, delay : long, logger : Logger, period : long, interTaskDelay : long) : ScheduledFutureRunnable<T> with T {
		val precision = this.timeService.timePrecision
		var reschedule : (ScheduledFutureRunnable<T>)=>void = null 
		if (period > 0) {
			reschedule = [
				var currentTime = this.timeService.getTime(precision)
				var executionDelay = Math::max(period - (currentTime - time) as long, 0)
				scheduleAtFixedRate(logger, executionDelay, period, precision, it)
			]
		} else if (interTaskDelay > 0) {
			reschedule = [
				scheduleWithFixedDelay(logger, interTaskDelay, interTaskDelay, precision, it)
			]
		}
		if (runnable instanceof ScheduledFutureRunnable<?>) {
			runnable.time = time
			runnable.delay = delay
			runnable.timeUnit = precision
			runnable.value = null
			runnable.reschedulingTask = reschedule as (ScheduledFutureRunnable<?>)=>void
			return runnable as ScheduledFutureRunnable<T>
		} else {
			return new ScheduledFutureRunnable(runnable, time, delay, precision, logger, null, reschedule)
		}
	}

	/** Create a task with the given runnable.
	 * 
	 * @param runnable the runnable.
	 * @param time the executino time.
	 * @param delay the delay of execution.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrapScheduled(callable : Callable<T>, time : double, delay : long, logger : Logger) : ScheduledFutureCallable<T> with T {
		if (callable instanceof ScheduledFutureCallable<?>) {
			return callable as ScheduledFutureCallable<T>
		}
		return new ScheduledFutureCallable(callable, time, delay, this.timeService.timePrecision, logger)
	}

	/** Create a task with the given callable.
	 *
	 * @param <T> the type of the returned value.
	 * @param callable the callable.
	 * @param logger the logger to use.
	 * @return the task.
	 */
	protected def wrap(callable : Callable<T>, logger : Logger) : FutureCallable<T> with T {
		if (callable instanceof FutureCallable<?>) {
			return callable as FutureCallable<T>
		}
		return new FutureCallable(callable, logger)
	}

	def executeAsap(logger : Logger, task : Runnable) : Future<?> {
		var future = task.wrap(logger)
		future.run
		return future
	}

	def executeAsap(logger : Logger, result : T, task : Runnable) : Future<T> with T {
		var future = task.wrap(logger, result)
		future.run
		return future
	}

	def executeAsap(logger : Logger, task : Callable<T>) : Future<T> with T {
		var future = task.wrap(logger)
		future.call
		return future
	}

	def schedule(logger : Logger, delay : long, unit : TimeUnit, command : Runnable) : ScheduledFuture<?> {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(delay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger, 0, 0));
	}

	def schedule(logger : Logger, delay : long, unit : TimeUnit, command : Callable<T>) : ScheduledFuture<T> with T {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(delay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger));
	}

	def scheduleAtFixedRate(logger : Logger, initialDelay : long, period : long,
		unit : TimeUnit, command : Runnable) : ScheduledFuture<?> {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(initialDelay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		var periodInMillis = precision.convert(period, unit)
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger, periodInMillis, 0));
	}

	def scheduleWithFixedDelay(logger : Logger, initialDelay : long, delay : long,
		unit : TimeUnit, command : Runnable) : ScheduledFuture<?> {
		var precision = this.timeService.timePrecision
		var delayInMillis = precision.convert(initialDelay, unit)
		var time = (this.timeService.getTime(precision) + delayInMillis) as long
		var periodInMillis = precision.convert(delay, unit)
		return scheduleAtTime(time, command.wrapScheduled(time, delayInMillis, logger, 0, periodInMillis));
	}

	def purge {
		var es = executorService
		if (es instanceof ThreadPoolExecutor) {
			es.purge
		}
	}

	def executeBlockingTasks(logger : Logger, thrownExceptions : boolean = false, task : Collection<Runnable>) {
		task.executeInThreadsAndWait(thrownExceptions) [ catchErrors, runnable |
			if(catchErrors) runnable.wrap(logger) else runnable.wrap(null)
		]
	}

	def executeBlockingTask(logger : Logger, nbExecutions : int, runGroupSize : int, task : Runnable) : int {
		executeInThreadsAndWait(task.wrap(logger), nbExecutions, runGroupSize)
	}

	/**
	 * Future that embeddes a runnable task. 
	 * 
	 * @param <T> the type of the returned value.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 2.0.6.0
	 */
	private static class FutureRunnable<T> extends JanusRunnable implements Future<T> {

		val value : T

		var finished = false

		/** Construct.
		 *
		 * @param runnable the task to run.
		 * @param logger the logger to use.
		 * @param value the returned value.
		 */
		new (runnable : Runnable, logger : Logger, value : T) {
			super(runnable, logger)
			this.value = value
		}
	
		def cancel(mayInterruptIfRunning : boolean) : boolean {
			false
		}
		
		def get : T {
			this.value
		}
		
		def get(timeout : long, unit : TimeUnit) : T {
			get
		}
		
		def isCancelled : boolean {
			false
		}
		
		def isDone : boolean {
			this.finished
		}

		override run {
			try {
				runWithEarlyExitSupport
			} finally {
				this.finished = true
			}
		}
	
	}

	/** 
	 * Future that embeddes a scheduled runnable task. 
	 * 
	 * @param <T> the type of the returned value.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 2.0.6.0
	 */
	static interface JanusScheduledFuture<T> extends ScheduledFuture<T> {
		
		/** Replies the execution time.
		 *
		 * @return the execution time in millis.
		 */
		def getTime : double
	}

	/** 
	 * Future that embeddes a scheduled runnable task. 
	 * 
	 * @param <T> the type of the returned value.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 2.0.6.0
	 */
	private static class ScheduledFutureRunnable<T> extends JanusRunnable implements JanusScheduledFuture<T> {

		var delay : long

		var time : double

		var value : T

		var reschedulingTask : (ScheduledFutureRunnable<T>)=>void
		
		var timeUnit : TimeUnit

		var finished = false

		/** Construct.
		 * 
		 * @param runnable the task to run.
		 * @param time the execution time.
		 * @param timeUnit the time unit.
		 * @param logger the logger to use.
		 * @param value the returned value.
		 * @param reschedulingTask the action to do for rescheduling the task.
		 */
		new (runnable : Runnable, time : double, delay : long, timeUnit : TimeUnit, logger : Logger,
			value : T, reschedulingTask : (ScheduledFutureRunnable<T>)=>void) {
			super(runnable, logger)
			this.time = time
			this.delay = delay
			this.value = value
			this.timeUnit = timeUnit
			this.reschedulingTask = reschedulingTask
		}

		def cancel(mayInterruptIfRunning : boolean) : boolean {
			false
		}

		def get : T {
			this.value
		}

		def get(timeout : long, unit : TimeUnit) : T {
			get
		}

		def isCancelled : boolean {
			false
		}

		def isDone : boolean {
			this.finished
		}

		override run {
			try {
				runWithEarlyExitSupport
			} finally {
				if (this.success && this.reschedulingTask !== null) {
					this.reschedulingTask.apply(this)
				} else {
					this.finished = true
				}
			}
		}
		
		def getTime : double {
			this.time
		}
		
		def getDelay(unit : TimeUnit) : long {
			unit.convert(this.delay, this.timeUnit)
		}
		
		def compareTo(o : Delayed) : int {
			if (o === this) return 0
            if (o instanceof ScheduledFutureRunnable<?>) {
            	var cmp = Double::compare(time, o.time)
            	if (cmp !== 0) {
            		return cmp
            	}
			}
			return Long::compare(TimeUnit::NANOSECONDS.delay, o.getDelay(TimeUnit::NANOSECONDS))
		}
	
	}
	/** 
	 * Future that embeddes a scheduled callable task. 
	 * 
	 * @param <T> the type of the returned value.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 2.0.6.0
	 */
	private static class ScheduledFutureCallable<T> extends JanusCallable<T> implements JanusScheduledFuture<T> {

		val delay : long

		val time : double

		val timeUnit : TimeUnit

		var value : T

		var finished = false

		/** Construct.
		 * 
		 * @param callable the task to run.
		 * @param time the execution time.
		 * @param timeUnit the time unit.
		 * @param logger the logger to use.
		 */
		new (callable : Callable<T>, time : double, delay : long, timeUnit : TimeUnit, logger : Logger) {
			super(callable, logger)
			this.time = time
			this.delay = delay
			this.timeUnit = timeUnit
			this.value = value
		}

		def cancel(mayInterruptIfRunning : boolean) : boolean {
			false
		}

		def get : T {
			this.value
		}

		def get(timeout : long, unit : TimeUnit) : T {
			get
		}

		def isCancelled : boolean {
			false
		}

		def isDone : boolean {
			this.finished
		}

		override call : T {
			try {
				this.value = callWithEarlyExitSupport
			} finally {
				this.finished = true
			}
		}

		def getTime : double {
			this.time
		}

		def getDelay(unit : TimeUnit) : long {
			unit.convert(this.delay, this.timeUnit)
		}

		def compareTo(o : Delayed) : int {
			if(o === this) return 0
			if (o instanceof ScheduledFutureRunnable<?>) {
				var cmp = Double::compare(time, o.time)
				if (cmp !== 0) {
					return cmp
				}
			}
			return Long::compare(TimeUnit::NANOSECONDS.delay, o.getDelay(TimeUnit::NANOSECONDS))
		}

	}

	/** 
	 * Future that embeddes a callable task. 
	 * 
	 * @param <T> the type of the returned value.
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 2.0.6.0
	 */
	private static class FutureCallable<T> extends JanusCallable<T> implements Future<T> {

		var finished = false

		var value : T

		/** Construct.
		 * 
		 * @param callaable the task to run.
		 * @param logger the logger to use.
		 */
		new (callable : Callable<T>, logger : Logger) {
			super(callable, logger)
		}

		def cancel(mayInterruptIfRunning : boolean) : boolean {
			false
		}

		def get : T {
			this.value
		}

		def get(timeout : long, unit : TimeUnit) : T {
			get
		}

		def isCancelled : boolean {
			false
		}

		def isDone : boolean {
			this.finished
		}

		override call : T {
			try {
				this.value = callWithEarlyExitSupport
			} finally {
				this.finished = true
			}
			return this.value
		}

	}
	
	protected override onStart {
		this.timeService.addTimeListener(this)
	}

	def onPreStop {
		this.timeService.removeTimeListener(this)
	}

	protected override onStop {
	}
	
	def timeChanged(service : TimeService) {
		syncBuffer
		var currentTime = service.getTime(this.timeService.timePrecision) as long
		var scheduledTasks = getScheduledTasks(this.previousTime, currentTime)
		this.previousTime = currentTime
		for (task : scheduledTasks) {
			if (!task.done && !task.cancelled) {
				if (task instanceof ScheduledFutureRunnable<?>) {
					task.run
				} else if (task instanceof ScheduledFutureCallable<?>) {
					task.call
				}
			}
		}
	}

	def timeUnitChanged(service : TimeService) {
		synchronized (this) {
			this.scheduledTaskBuffer.clear
			this.scheduledTasks.clear
		}
	}

	/** Schedule the given task at the given time in millis.
	 * 
	 * @param time the execution time in millis.
	 * @param command the command to run.
	 */
	protected def scheduleAtTime(time : long, command : JanusScheduledFuture<T>) : JanusScheduledFuture<T> with T {
		var tasks = this.scheduledTaskBuffer.get(time)
		if (tasks === null) {
			tasks = newLinkedList
			this.scheduledTaskBuffer.put(time, tasks)
		}
		tasks += command
		return command
	}

	private def syncBuffer {
		var iterator = this.scheduledTaskBuffer.entrySet.iterator
		synchronized (this) {
			while (iterator.hasNext) {
				var entry = iterator.next
				iterator.remove
				var tasks = this.scheduledTasks.get(entry.key)
				if (tasks === null) {
					tasks = newLinkedList
					this.scheduledTasks.put(entry.key, tasks)
				}
				tasks += entry.value
			}
		}
	}

	/** Replies the scheduled tasks that could be run for the given time.
	 * 
	 * <p>The replied tasks are removed from the schedule.
	 * 
	 * @param startTime the time before the tasks should be consumed but not replied
	 * @param endTime the time until the tasks should be consumed and replied.
	 * @return the scheduled tasks.
	 */
	def getScheduledTasks(startTime : long, endTime : long) : List<JanusScheduledFuture<?>> {
		var consumedTasks = newLinkedList
		synchronized (this) {
			var iterator = this.scheduledTasks.entrySet.iterator
			while (iterator.hasNext) {
				var entry = iterator.next
				if (entry.key <= endTime) {
					iterator.remove
					if (entry.key >= startTime) {
						consumedTasks += entry.value
					}
				}
			}
		}
		consumedTasks
	}

	/** Replies the scheduled tasks.
	 * 
	 * <p>The replied tasks are not removed from the schedule.
	 * 
	 * @return the scheduled tasks.
	 */
	def getScheduledTasks() : List<JanusScheduledFuture<?>> {
		var tasks = newLinkedList
		synchronized (this) {
			for (list : this.scheduledTasks.values) {
				tasks += list
			}
			for (list : this.scheduledTaskBuffer.values) {
				tasks += list
			}
		}
		tasks
	}

}
