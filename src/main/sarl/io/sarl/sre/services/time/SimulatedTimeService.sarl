/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.time

import com.google.common.util.concurrent.Service
import io.sarl.sre.services.AbstractDependentService
import java.util.concurrent.TimeUnit
import javax.inject.Singleton
import org.arakhne.afc.util.ListenerCollection

/**
 * Time service based on a simulated time.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7.0
 */
@Singleton
class SimulatedTimeService extends AbstractDependentService implements TimeService {

	var listeners : ListenerCollection<TimeListener> = null

	var osTimeOfPreviousStep = 0.0

	var osFactor = 1.0

	var simulatedTime = 0.0

	val simulatedPrecision : TimeUnit

	/** Replies the OS current time.
	 * 
	 * @return the OS current time in ms.
	 */
	def getOSCurrentTime : long {
		System::currentTimeMillis
	}

	/** Create a simulated time service.
	 *
	 * @param simulatedPrecision is the time unit of the simulated time.
	 */
	new (simulatedPrecision : TimeUnit = TimeUnit::SECONDS) {
		this.simulatedPrecision = simulatedPrecision;
		this.osTimeOfPreviousStep = this.OSCurrentTime
	}

	
	final def getServiceType : Class<? extends Service> {
		typeof(TimeService)
	}

	def getTimePrecision : TimeUnit {
		this.simulatedPrecision
	}

	def getTime(timeUnit : TimeUnit) : double {
		val tp = timePrecision
		val tu = timeUnit ?: tp
		if (tu === tp) {
			return this.simulatedTime
		}
		return this.simulatedTime.convertFromTo(tp, tu)
	}

	def getOSTimeFactor : double {
		this.osFactor
	}

	def evolveTimeIfPossible(timeDelta : double) {
		assert timeDelta > 0.0
		this.simulatedTime += timeDelta
		var osdelta = this.OSCurrentTime - this.osTimeOfPreviousStep
		this.osFactor = osdelta / timeDelta
		fireTimeChanged
	}

	/** Notifies about time changes.
	 */
	protected def fireTimeChanged {
		var list : ListenerCollection<TimeListener>
		synchronized(this) {
			list = this.listeners
		}
		if (list !== null) {
			for (listener : list.getListeners(typeof(TimeListener))) {
				listener.timeChanged(this)
			}
		}
	}
	
	def addTimeListener(listener : TimeListener) {
		synchronized (this) {
			if (this.listeners === null) {
				this.listeners = new ListenerCollection
			}
			this.listeners.add(typeof(TimeListener), listener);
		}
	}
	
	def removeTimeListener(listener : TimeListener) {
		synchronized (this) {
			if (this.listeners !== null) {
				this.listeners.remove(typeof(TimeListener), listener);
				if (this.listeners.empty) {
					this.listeners = null
				}
			}
		}
	}
	
}
