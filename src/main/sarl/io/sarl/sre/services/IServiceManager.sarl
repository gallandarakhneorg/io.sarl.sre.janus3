/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services

import com.google.common.collect.Multimap
import com.google.common.util.concurrent.Service
import java.util.logging.Logger

/**
 * Manager of services for the SRE platform.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface IServiceManager {

	/** 
	 * Replies the services by state.
	 * 
	 * @return the services.
	 */
	def getServicesByState : Multimap<Service.State, Service>
	
	/**
	 * Replies the service of the given type.
	 * 
	 * @param type the type of the service to search for.
	 * @return the service
	 */
	def getService(type : Class<T>) : T with T extends Service
	
	/** 
	 * Wait for all the services are started.
	 */
	def awaitHealthy

	/**
	 * Wait for all the services are stopped.
	 */
	def awaitStopped
	
	/** 
	 * Start the services associated to the service manager.
	 * 
	 * <p>This starting function supports the {@link DependentService prioritized services}.
	 * 
	 * @param logger the logger to use for any information message.
	 */
	def startServices(logger : Logger)

	/** 
	 * Stop the services associated to the service manager.
	 * 
	 * <p>This stopping function supports the {@link DependentService prioritized services}.
	 *
	 * @param logger the logger to use for any information message.
	 */
	def stopServices(logger : Logger)

}
