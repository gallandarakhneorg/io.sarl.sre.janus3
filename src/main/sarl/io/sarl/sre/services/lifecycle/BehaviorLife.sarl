/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.lifecycle

import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Behavior
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Provider

import static extension io.sarl.lang.core.SREutils.*

/** 
 * Describes any information that is required by the SRE for supporting the behavior's life. 
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.6.0
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
final class BehaviorLife extends AgentTraitLife {

	/** Replies the data structure that is storing the living data of the agent for the SRE.
	 * If this data structure does not exists, it is automatically created.
	 * 
	 * @param behavior the instance of the behavior for which the life description should be retrieved
	 * @param lockProvider the provider of locks that should be used if the life description must be created.
	 * @see #getLifeNoCreation
	 */
	static def getLife(^behavior : Behavior, lockProvider : Provider<ReadWriteLock>) : BehaviorLife {
		var life = ^behavior.getSreSpecificData(typeof(BehaviorLife))
		if (life === null) {
			life = new BehaviorLife(lockProvider.get)
			^behavior.sreSpecificData = life
		}
		return life
	}

	/** Replies the data structure that is storing the living data of the agent for the SRE.
	 * If this data structure does not exists, it is NOT created.
	 * 
	 * @param behavior the instance of the behavior for which the life description should be retrieved
	 * @since 0.10
	 * @see #getLife
	 */
	@Pure
	static def getLifeNoCreation(^behavior : Behavior) : BehaviorLife {
		return ^behavior.getSreSpecificData(typeof(BehaviorLife))
	}

	/** Constructor.
	 * 
	 * @param lock the synchronization lock to used for this life description.
	 */
	private new(lock : ReadWriteLock) {
		super(lock)
	}

}
