/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.probing

import io.sarl.sre.naming.SarlName
import io.sarl.sre.services.AbstractSreService
import java.net.URI
import io.sarl.sre.services.namespace.NamespaceService
import com.google.inject.Inject
import java.util.UUID
import io.sarl.sre.services.namespace.FieldAccess
import java.util.ArrayList
import java.util.Collection
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.util.Collections3
import io.sarl.sre.naming.NameParser

/** 
 * This class is the standard implementation of a probe service.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
abstract class AbstractProbeService extends AbstractSreService implements ProbeService, IProbeReleaseListener {

	var namespace : NamespaceService

	var nameParser : NameParser

	val probes = <URI, Probe<?>>newTreeMap(null)
	
	/** Change the name space service that is used by this probe service */
	@Inject
	def setNameSpaceService(service : NamespaceService) {
		assert service !== null
		this.namespace = service
	}

	/** Change the name parser that is used by this probe service
	 */
	@Inject
	def setNameParser(parser : NameParser) {
		assert parser !== null
		this.nameParser = parser
	}
	
	protected override onStop {
		releaseAllProbes
	}

	override probe(valueName : String, valueType : Class<T>, probeName : String = null) : Probe<T> with T {
		this.nameParser.decode(valueName).probe(valueType, probeName)
	}

	override probe(valueName : URI, valueType : Class<T>, probeName : String = null) : Probe<T> with T {
		var nuri = this.nameParser.normalize(valueName)
		if (nuri !== null) {
			return this.nameParser.decode(nuri).probe(valueType, probeName)
		}
		return null
	}

	override probe(valueName : SarlName, valueType : Class<T>,
		probeName : String = null) : Probe<T> with T {
		assert valueType !== null
		val uri = valueName.toURI
		if (valueName === null) {
			return null
		}
		synchronized (this.probes) {
			var probe : Probe<T> = this.probes.get(uri) as Probe<T>
			if (probe === null) {
				val probedValue = this.namespace.findObject(valueName)
				val name = if(probeName.isNullOrEmpty) UUID::randomUUID.toString else probeName
				probe = probedValue.newProbe(valueType, uri, name)
				if (probe !== null) {
					val isFirst = this.probes.empty
					this.probes.put(uri, probe)
					if (isFirst) {
						onFirstProbe
					}
				}
			}
			return probe
		} 
	}

	/** Invoked when the first probe is added into the service.
	 */
	protected def onFirstProbe {
		//
	}

	/** Invoked when the last probe is removed from the service.
	 */
	protected def onLastProbe {
		//
	}
	
	/** Create an instance of the probe.
	 * 
	 * @param <T> the expected type of the probed values.
	 * @param probedElement the element to which the probe must be associated, never {@code null}.
	 * @param valueType the expected type of the probed values, never {@code null}.
	 * @param probeUri the URI of the probe, never {@code null}.
	 * @param probeName the name of the probe, never {@code null}.
	 */
	protected def newProbe(probedElement : Object, valueType : Class<T>, probeUri : URI, probeName : String) : Probe<T> with T {
		if (probedElement instanceof FieldAccess) {
			return new FieldProbe(this, probeName, probeUri, valueType, probedElement).injectMembers
		}
		return null
	}
	
	/** Inject the given object. By default this function  does nothing and should be overridden by sub classes.
	 *
	 * @param obj the object to inject.
	 * @return the {@code obj}.
	 */
	protected def injectMembers(obj : T) : T with T {
		obj
	}

	override getProbes : SynchronizedIterable<Probe<?>> {
		Collections3::unmodifiableSynchronizedIterable(this.probes.values, this.probes)
	}

	override releaseAllProbes {
		var removable : Collection<Probe<?>>
		synchronized (this.probes) {
			// Copy of the probes into a separate array is mandatory
			// for avoiding ConcurrentModificationException
			removable = new ArrayList(this.probes.values)
		}
		removable.forEach [
			it.release
		]
	}

	override sync {
		synchronized (this.probes) {
			this.probes.values.forEach [
				it.sync
			]
		}
	}
	
	override onProbeReleasedProbe(probe : Probe<?>) {
		synchronized (this.probes) {
			this.probes.remove(probe.uri)
			if (this.probes.empty) {
				onLastProbe
			}
		}
	}
	
}
