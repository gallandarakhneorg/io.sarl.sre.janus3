/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.probing

import java.lang.ref.WeakReference
import java.net.URI
import org.arakhne.afc.util.ListenerCollection
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Abstract probe implementation. A probe is thread-safe.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
abstract class AbstractProbe<T> implements Probe<T> {

	var manager : WeakReference<IProbeReleaseListener>

	var listeners : ListenerCollection<?>

	@Accessors
	val name : String

	@Accessors
	val uri : URI

	@Accessors
	val type : Class<T>

	protected var active : boolean = true
	
	/** Constructor.
	 * 
	 * @param manager the creator of this probe, and its manager.
	 * @param name the name of the probe
	 * @param uri the UI of the field.
	 * @param type the expected type of the probed value.
	 */
	protected new (manager : IProbeReleaseListener, name : String, uri : URI, type : Class<T>) {
		assert manager !== null
		assert type !== null
		this.manager = new WeakReference(manager)
		this.name = name
		this.uri = uri
		this.type = type
	}

	@Pure
	synchronized override isActive : boolean {
		this.active
	}

	synchronized override release {
		if (this.active) {
			try {
				this.active = false
				var m = this.manager?.get
				this.manager.clear
				this.manager = null
				if (m !== null) {
					m.onProbeReleasedProbe(this)
					fireRelease
				}			
			} finally {
				this.listeners = null
			}
		}
	}

	/** Notify the listener that the probe's value has changed. */
	protected def fireValueChanged {
		if (this.listeners !== null) {
			var list = this.listeners.getListeners(typeof(IProbeListener))
			for (listener : list) {
				listener.probeValueChanged(this)
			}
		} 
	}
	
	synchronized override addProbeListener(listener : IProbeListener) {
		assert listener !== null
		if (this.listeners === null) {
			this.listeners = new ListenerCollection
		}
		this.listeners.add(typeof(IProbeListener), listener)
	}
	
	synchronized override removeProbeListener(listener : IProbeListener) {
		assert listener !== null
		if (this.listeners !== null) {
			this.listeners.remove(typeof(IProbeListener), listener)
			if (this.listeners.isEmpty) {
				this.listeners = null
			}
		}
	}

	/** Notify the listener that the probe has been released.
	 */
	protected def fireRelease {
		if (this.listeners !== null) {
			var list = this.listeners.getListeners(typeof(IProbeReleaseListener))
			for (listener : list) {
				listener.onProbeReleasedProbe(this)
			}
		}
	}

	synchronized override addProbeReleaseListener(listener : IProbeReleaseListener) {
		assert listener !== null
		if (this.listeners === null) {
			this.listeners = new ListenerCollection
		}
		this.listeners.add(typeof(IProbeReleaseListener), listener)
	}

	synchronized override removeProbeReleaseListener(listener : IProbeReleaseListener) {
		assert listener !== null
		if (this.listeners !== null) {
			this.listeners.remove(typeof(IProbeReleaseListener), listener)
			if (this.listeners.isEmpty) {
				this.listeners = null
			}
		}
	}

}
