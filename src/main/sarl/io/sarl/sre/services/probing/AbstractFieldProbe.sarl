/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.probing

import io.sarl.sre.services.namespace.FieldAccess
import java.net.URI
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Abstract probe implementation is linked to a field. A probe is thread-safe.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
abstract class AbstractFieldProbe<T> extends AbstractProbe<T> {

	@Accessors(PROTECTED_GETTER)
	val field : FieldAccess

	/** Constructor.
	 * 
	 * @param manager the creator of this probe, and its manager.
	 * @param name the name of the probe
	 * @param uri the UI of the field.
	 * @param type the expected type of the probed value.
	 * @param field the accessor to the probed field.
	 */
	protected new (manager : IProbeReleaseListener, name : String, uri : URI, type : Class<T>, field : FieldAccess) {
		super(manager, name, uri, type)
		assert field !== null
		this.field = field
	}

	/** Read the value from the associated field.
	 * This function is not thread-safe by itself.
	 *
	 * @return the value of the field, or {@code null} if the value is evaluated to
	 *     {@code null} or the type of the value is not compatible with the one
	 *     replied by {@link #getType()}.
	 */
	protected def readField : T {
		var value = this.field.get
		if (value === null) {
			return null
		}
		try {
			return getType.cast(value)
		} catch (ex : Throwable) {
			return null
		}
	}

	/** Write the value to the associated field.
	 *
	 * @param value is the new value to write into the field.
	 * @return the value of the field before its change, or {@code null} if the old value is evaluated to
	 * {@code null} or the type of the old value is not compatible with the one
	 * replied by {@link #getType()}.
	 */
	protected def writeField(value : T) : T {
		try {
			var old = this.field.set(value)
			if (old === null) {
				return null
			}
			return getType.cast(value)
		} catch (ex : Throwable) {
			return null
		}
	}

}
