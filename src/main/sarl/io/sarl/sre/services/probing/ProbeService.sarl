/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.probing

import com.google.common.util.concurrent.Service
import io.sarl.sre.naming.SarlName
import io.sarl.lang.util.SynchronizedIterable
import java.net.URI

/** 
 * This service provides probing mechanisms.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
interface ProbeService extends Service {

	/** Create a probe.
	 *
	 * <p>If a probe with the same name name exists, a composed probe with the probe name is created with
	 * the probes as composite. 
	 *
	 * @param valueName the probed element.
	 * @param valueType the expected type of the value.
	 * @param probeName is the optional name of the probe. 
	 */
	def probe(valueName : SarlName, valueType : Class<T>, probeName : String = null) : Probe<T> with T

	/** Create a probe.
	 * 
	 * <p>If a probe with the same name name exists, a composed probe with the probe name is created with
	 * the probes as composite. 
	 * 
	 * @param valueName the probed element.
	 * @param valueType the expected type of the value.
	 * @param probeName is the optional name of the probe. 
	 */
	def probe(valueName : URI, valueType : Class<T>, probeName : String = null) : Probe<T> with T

	/** Create a probe.
	 * 
	 * <p>If a probe with the same name name exists, a composed probe with the probe name is created with
	 * the probes as composite. 
	 * 
	 * @param valueName the probed element.
	 * @param valueType the expected type of the value.
	 * @param probeName is the optional name of the probe. 
	 */
	def probe(valueName : String, valueType : Class<T>, probeName : String = null) : Probe<T> with T

	
	/** Replies all the probes.
	 *
	 *  @return the iterable on probes
	 */
	@Pure
	def getProbes : SynchronizedIterable<Probe<?>>
	
	/** Release all the probes.
	 */
	def releaseAllProbes

	/** Force the synchronization of the probes.
	 */
	def sync

}
