/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.probing

import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.services.namespace.FieldAccess
import java.net.URI
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Provider

/** 
 * Probe implementation is linked to a field. A probe is thread-safe.
 * This probe buferrizes the values. In order to be updated, the
 * {@link #sync()} function must be invoked. Then, the new value is read
 * from the associated field, and the probe listeners are notified.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class FieldProbe<T> extends AbstractFieldProbe<T> {

	var in = false

	var init = true

	var inbuffer : T

	var out = false

	var outbuffer : T

	/** Constructor.
	 * 
	 * @param manager the creator of this probe, and its manager.
	 * @param name the name of the probe
	 * @param uri the UI of the field.
	 * @param type the expected type of the probed value.
	 * @param field the accessor to the probed field.
	 * @param listenerCollectionProvider the provider of listener collections. 
	 * @param lockProvider the provider of synchronization locks.
	 */
	protected new (manager : IProbeReleaseListener, name : String, uri : URI, type : Class<T>, field : FieldAccess,
		listenerCollectionProvider : Provider<SmartListenerCollection<?>>, lockProvider : Provider<ReadWriteLock>) {
		super(manager, name, uri, type, field, listenerCollectionProvider, lockProvider)
	}

	@Pure
	override isInvalid : boolean {
		var lck = getLock
		lck.readLock.lock
		try {
			if (active) {
				return this.in || this.out
			}
		} finally {
			lck.readLock.unlock
		}
		return false
	}

	override setValue(value : T) {
		if (isActive) {
			var lck = getLock
			lck.writeLock.lock
			try {
				this.out = true
				this.outbuffer = value
			} finally {
				lck.writeLock.unlock
			}
		}
	}

	@Pure
	override getValue : T {
		if (isActive && syncIn) {
			fireValueChanged
		}
		return this.inbuffer
	}

	/** Do input synchronization.
	 *
	 * <p>This function is thread-safe.
	 */
	private def syncIn : boolean {
		var continueSync : boolean
		var lck = getLock
		lck.readLock.lock
		try {
			continueSync = this.in || this.init
		} finally {
			lck.readLock.unlock
		}
		if (continueSync) {
			lck.writeLock.lock
			try {
				val enableChange = !this.init
				this.in = false
				this.init = false
				var oldValue = this.inbuffer
				var newValue = readField
				this.inbuffer = newValue
				return enableChange && newValue != oldValue
			} finally {
				lck.writeLock.unlock
			}
		}
		return false
	}

	/** Do output synchronization.
	 * 
	 * <p>This function is thread-safe.
	 */
	private def syncOut : boolean {
		var continueSync : boolean
		var lck = getLock
		lck.readLock.lock
		try {
			continueSync = this.out
		} finally {
			lck.readLock.unlock
		}
		if (continueSync) {
			lck.writeLock.lock
			try {
				this.out = false
				var newValue = this.outbuffer
				this.outbuffer = null
				var oldValue = writeField(newValue)
				return newValue != oldValue
			} finally {
				lck.writeLock.unlock
			}
		}
		return false
	}

	/** Force the synchronization of the probed value.
	 */
	def sync(forcedReading : boolean) {
		if (isActive) {
			if (isActiveObject) {
				val changed0 = syncOut
				var lck = getLock
				lck.writeLock.lock
				try {
					this.in = forcedReading || this.in
				} finally {
					lck.writeLock.unlock
				}
				val changed1 = syncIn
				if (changed0 || changed1) {
					fireValueChanged
				}
			} else {
				release
			}
		}
	}

	override release {
		if (isActive) {
			var lck = getLock
			lck.writeLock.lock
			try {
				// Caution: Do not reset the inbuffer field in order to enable access to the value even if the probe is inactive
				this.in = false
				this.out = false
				this.outbuffer = null
				super.release
			} finally {
				lck.writeLock.unlock
			}
		}
	}
	
}
