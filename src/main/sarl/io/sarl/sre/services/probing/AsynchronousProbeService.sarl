/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.probing

import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.executor.Runnables
import java.util.concurrent.atomic.AtomicBoolean
import javax.inject.Inject
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * This class is the implementation of a probe service that is updating the values asynchronously.
 * Asynchronous updates means that the {@link #sync()} function is invoking by a specific thread.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 * @see SynchronousProbeService
 */
class AsynchronousProbeService extends AbstractProbeService {

	var executor : ExecutorService

	val synchronizationStarted = new AtomicBoolean(false)

	val enableSynchronization = new AtomicBoolean(true)

	@Accessors
	volatile var sleepingDurationBetweenSyncs : long = 500l

	/** Change the executor service that is used by this probe service.
	 *
	 * @param service the executor service.
	 */
	@Inject
	def setExecutorService(service : ExecutorService) {
		assert service !== null
		this.executor = service
	}

	protected override onFirstProbe {
		startSyncThread
	}

	protected override onLastProbe {
		stopSyncThread
	}

	/** Start the thread that dynamically update the probes */
	def startSyncThread {
		if (!this.synchronizationStarted.getAndSet(true)) {
			var task = Runnables::named(createRunnableUpdater, "Probe Updater")
			this.executor.executeAsap(task)
		}
	}

	/** Invoked to create a {@code Runnable} that may be used for updated the probes
	 *
	 * @return the {@code Runnable} insstance, never {@code null}.
	 */
	@SuppressWarnings("discouraged_reference")
	protected def createRunnableUpdater : Runnable {
		[
			this.enableSynchronization.set(true)
			while (this.enableSynchronization.get) {
				sync
				val duration = getSleepingDurationBetweenSyncs
				if (duration <= 0l) {
					Thread::yield
				} else {
					Thread::sleep(duration)
				}
			}
		]
	}

	/** Stop the thread that dynamically update the probes
	 */
	@SuppressWarnings("discouraged_reference")
	def stopSyncThread {
		this.enableSynchronization.set(false)
		this.synchronizationStarted.set(false)
	}

	protected override onStop {
		stopSyncThread
		super.onStop
	}

}
