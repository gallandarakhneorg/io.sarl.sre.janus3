/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.probing

import io.sarl.sre.internal.SmartListenerCollection
import io.sarl.sre.naming.NameParser
import io.sarl.sre.services.namespace.NamespaceService
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Inject
import javax.inject.Provider

/** 
 * This class is the implementation of a probe service that is updating the values synchronously.
 * Synchronous updates must be explicitly started by invoking {@link #sync()}.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 * @see AsynchronousProbeService
 */
class SynchronousProbeService extends AbstractProbeService {

	/** Constructor.
	 * 
	 * @param namespaceService the service that is giving access to the namespaces.
	 * @param nameParser the object that is able to parse resource names.
	 * @param listenerCollectionProvider the provider of listener collections. 
	 * @param lockProvider the provider of synchronization locks.
	 */
	@Inject
	new (namespaceService : NamespaceService, nameParser : NameParser,
		listenerCollectionProvider : Provider<SmartListenerCollection<?>>,
		lockProvider : Provider<ReadWriteLock>) {
		super(namespaceService, nameParser, listenerCollectionProvider, lockProvider)
	}

}
