/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.logging

import io.sarl.sre.services.AbstractSreService
import java.util.logging.Handler
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger
import javax.inject.Singleton

/** 
 * This class provides an implementation of the {@link LoggingService} that outputs nothing.
 * 
 * <p>This service is thread-safe.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
class QuietLoggingService extends AbstractSreService implements LoggingService {

	var platformLoggerInstance : Logger

	var kernelLoggerInstance : Logger

	override getPlatformLogger : Logger {
		if (this.platformLoggerInstance === null) {
			this.platformLoggerInstance = new QuietLogger
		}
		this.platformLoggerInstance
	}

	override getKernelLogger : Logger {
		if (this.kernelLoggerInstance === null) {
			this.kernelLoggerInstance = new QuietLogger
		}
		this.kernelLoggerInstance
	}

	def createAgentLogger(name : String, initialLevel : Level = null) : Logger {
		return new QuietLogger
	}

	/** Quiet logger.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * @since 0.10
	 */
	private static class QuietLogger extends Logger {
		
		new {
			super ("", null)
			this.level = Level::OFF
		}

		override log(record : LogRecord) {
			// Do nothing
		}

		override addHandler(h : Handler) {
            // Do nothing
		}

		override removeHandler(h : Handler) {
            // Do nothing
        }

    }

}
