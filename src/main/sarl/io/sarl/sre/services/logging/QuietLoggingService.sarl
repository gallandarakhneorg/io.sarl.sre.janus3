/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.logging

import com.google.common.util.concurrent.Service
import io.sarl.sre.JanusConfig
import io.sarl.sre.services.AbstractDependentService
import java.util.logging.Level
import java.util.logging.Logger
import javax.inject.Inject
import javax.inject.Singleton

/** 
 * This class provides an implementation of the {@link LoggingService} that outputs nothing.
 * 
 * <p>This service is thread-safe.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
class QuietLoggingService extends AbstractDependentService implements LoggingService {

	var platformLoggerInstance : Logger

	var kernelLoggerInstance : Logger

	var loggerCreator : LoggerCreator

	final def getServiceType : Class<? extends Service> {
		typeof(LoggingService)
	}

	/** Change the creator of logger used by this service.
	 *
	 * @param loggerCreator the creator.
	 * @since 2.0.7.0
	 */
	@Inject
	def setLoggerCreator(loggerCreator : LoggerCreator) {
		this.loggerCreator = loggerCreator
	}

	override getPlatformLogger : Logger {
		if (this.platformLoggerInstance === null) {
			this.platformLoggerInstance = this.loggerCreator.createPlatformLogger
			this.platformLoggerInstance.level = Level.OFF
		}
		this.platformLoggerInstance
	}

	override getKernelLogger : Logger {
		if (this.kernelLoggerInstance === null) {
			this.kernelLoggerInstance = this.loggerCreator.createModuleLogger(
				JanusConfig::JANUS_DEFAULT_PLATFORM_NAME,
				getPlatformLogger)
		}
		this.kernelLoggerInstance
	}

	def createAgentLogger(name : String, initialLevel : Level = null) : Logger {
		val logger = this.loggerCreator.createModuleLogger(name, getPlatformLogger)
		if (initialLevel !== null) {
			logger.level = initialLevel
		}
		return logger
	}

}
