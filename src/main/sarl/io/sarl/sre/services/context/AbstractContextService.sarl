/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.context

import io.sarl.sre.services.AbstractSreService
import java.util.Map
import java.util.UUID
import javax.inject.Singleton

/** 
 * A service managing the root context and enabling the creation of contexts.
 *
 * <p>This service is thread-safe.
 *  
 * @author $Author: ngaud$
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
abstract class AbstractContextService extends AbstractSreService implements ContextService {

	val mutexInstance = new Object

	/** Replies the mutex for synchronizing this service */
	def getMutex : Object {
		this.mutexInstance
	}

	/** Change the root context.
	 *
	 * @param context the new root context.
	 */
	abstract def setRootContext(context : Context)

	/** Replies the internal data structure for storing the contexts.
	 *
	 * <p>This function is not thread-safe.
	 */
	protected abstract def getContextInternalStructure : Map<UUID, Context>

	final def createContextWithoutRegistration(contextID : UUID, defaultSpaceID : UUID, rootContext : boolean) : Context {
		assert contextID !== null, "The contextID cannot be null"
		assert defaultSpaceID !== null, "The defaultSpaceUUID cannot be null"
		return contextID.newContextInstance(defaultSpaceID, rootContext)
	}
	
	final def createContext(contextID : UUID, defaultSpaceID : UUID) : Context {
		assert contextID !== null, "The contextID cannot be null"
		assert this.rootContext !== null, "No root context yet"
		if (contextID == this.rootContext.ID) {
			return this.rootContext
		}
		val repository = contextInternalStructure
		var existingContext : Context
		synchronized(mutex) {
			existingContext = repository.get(contextID)
		}
		if (existingContext !== null) {
			return existingContext
		}
		assert defaultSpaceID !== null, "The defaultSpaceUUID cannot be null"
		var context = contextID.newContextInstance(defaultSpaceID, false)
		synchronized (mutex) {
			repository.put(contextID, context)
		}
		return context
	}

	def getContext(contextID : UUID) : Context {
		assert contextID !== null, "The contextID cannot be null"
		assert rootContext !== null, "The root context cannot be null"
		if (contextID == this.rootContext.ID) {
			return this.rootContext
		}
		val repository = contextInternalStructure
		var existingContext : Context
		synchronized (mutex) {
			existingContext = repository.get(contextID)
		}
		return existingContext
	}

	def removeContext(contextID : UUID) : Context {
		assert contextID !== null, "The contextID cannot be null"
		if (contextID == this.rootContext.ID) {
			return null
		}
		val repository = contextInternalStructure
		var existingContext : Context
		synchronized (mutex) {
			existingContext = repository.remove(contextID)
		}
		if (existingContext !== null) {
			existingContext.destroy
		}
		return existingContext
	}

	/** Create a context instance.
	 * 
	 * @param contextID the identifier of the context.
	 * @param defaultSpaceId the identifier of the default space in the context.
	 * @param rootContext indicates if the new context is a root context.
	 */
	protected abstract def newContextInstance(contextID : UUID, defaultSpaceID : UUID,
		rootContext : boolean) : Context

}
