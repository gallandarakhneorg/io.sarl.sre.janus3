/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services.context

import com.google.inject.Injector
import io.sarl.sre.KernelScope
import java.util.UUID
import javax.inject.Inject

/** 
 * A service managing the root context and enabling the creation of contexts by injection.
 *
 * <p>This service is thread-safe.
 *  
 * @author $Author: ngaud$
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
abstract class AbstractInjectionBasedContextService extends AbstractContextService {

	var injector : Injector

	var rootContextInstance : Context

	var contextFactory : ContextFactory

	/** Set the backend injector to use for creating spaces.
	 */
	@Inject
	def setInjector(injector : Injector) {
		assert injector !== null
		this.injector = injector
	}

	/** Set the factory of contexts.
	 */
	@Inject
	def setContextFactory(factory : ContextFactory) {
		assert factory !== null
		this.contextFactory = factory
	}

	@Inject
	def setRootContext(@KernelScope rootContext : Context) {
		this.rootContextInstance = rootContext
	}
		
	def onStart {
		this.rootContextInstance.initialize
	}

	def onStop {
		this.rootContextInstance.destroy
	}
	
	def getRootContext : Context {
		this.rootContextInstance
	}

	protected def newContextInstance(contextID : UUID, defaultSpaceID : UUID, rootContext : boolean) : Context {
		assert this.contextFactory !== null
		assert this.injector !== null
		var context = this.contextFactory.newInstance(contextID, defaultSpaceID, rootContext)
		this.injector.injectMembers(context)
		return context
	}

}
