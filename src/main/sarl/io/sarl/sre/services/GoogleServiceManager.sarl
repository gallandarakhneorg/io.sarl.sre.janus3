/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.services

import com.google.common.collect.Multimap
import com.google.common.util.concurrent.Service
import com.google.common.util.concurrent.ServiceManager
import com.google.common.util.concurrent.ServiceManager.Listener
import io.bootique.config.ConfigurationFactory
import io.sarl.sre.boot.factories.ServiceManagerFactory
import java.text.MessageFormat
import java.util.concurrent.TimeUnit
import java.util.concurrent.TimeoutException

/** 
 * Implementation of a service manager based on the Google service manager.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class GoogleServiceManager extends AbstractServiceManager {

	val googleManager : ServiceManager

	val configuration : ServiceManagerFactory

	/** 
	 * @param sm the Google service to use.
	 * @param configFactory the loader of configuration.
	 */
	new (sm : ServiceManager, configFactory : ConfigurationFactory) {
		this.configuration = ServiceManagerFactory::getConfigurationFactory(configFactory)
		this.googleManager = sm
		this.googleManager.addListener(new Listener() {
			def failure(service : Service) {
				getLogger.severe(MessageFormat::format(Messages::GoogleServiceManager_0, service.class.name))
			}
		})
	}

	/** 
	 * @param services the services to manager.
	 * @param configFactory the loader of configuration.
	 */
	new (services : Iterable<? extends Service>, configFactory : ConfigurationFactory) {
		this(new ServiceManager(services), configFactory)
	}

	def getServicesByState : Multimap<Service.State, Service> {
		this.googleManager.servicesByState
	}

	def getService(type : Class<T>) : T with T extends Service {
		this.googleManager.servicesByState.values.findFirst[type.isInstance(it)] as T
	}

	def awaitHealthy {
		var timeout = this.configuration.startTimeout
		if (timeout > 0) {
			this.googleManager.awaitHealthy(timeout, TimeUnit::MILLISECONDS)
		} else {
			this.googleManager.awaitHealthy
		}
	}

	protected override internalStartAllServices {
		this.googleManager.startAsync
	}

	protected override internalStopAllServices {
		this.googleManager.stopAsync
	}

	def awaitStopped {
		try {
			var timeout = this.configuration.stopTimeout
			if (timeout > 0) {
				this.googleManager.awaitStopped(timeout, TimeUnit::MILLISECONDS)
			} else {
				this.googleManager.awaitStopped
			}
		} catch (timeout : TimeoutException) {
			// stopping timed out
		}
	}

}
