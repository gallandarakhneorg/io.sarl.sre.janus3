/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills.internal

import io.sarl.core.Logging
import io.sarl.lang.core.Event
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.skills.BuiltinCapacitiesOrder
import io.sarl.sre.skills.BuiltinSkill
import io.sarl.util.concurrent.Collections3
import java.lang.ref.WeakReference
import java.util.LinkedList
import java.util.List
import java.util.UUID
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Inject
import javax.inject.Provider

import static io.sarl.sre.services.lifecycle.AgentLife.*
import static io.sarl.sre.skills.internal.InternalEventBusSkill.BinFlags.*

import io.sarl.lang.core.Agent

/** 
 * SRE implementation of an internal skill that provides an event dispatcher to notify the different components/behaviors of an
 * agent.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill InternalEventBusSkill extends BuiltinSkill implements InternalEventBusCapacity {

	uses Logging

	private static class BinFlags {
		static var installationOrder = -1
	}

	override getInstallationOrder : int {
		synchronized (BinFlags) {
			if (BinFlags::installationOrder < 0) {
				BinFlags::installationOrder = BuiltinCapacitiesOrder::computeInstallationOrder(this)
			}
			BinFlags::installationOrder
		}
	}

	var eventBus : EventBus
	
	var eventListener : InformedEventListener

	var isEventBufferEnabled = false

	val lock : ReadWriteLock

	var eventBuffer : List<Event> = null

	/** Set the backend event bus.
	 *
	 * @param bus the new event bus.
	 */
	@Inject
	override setEventBus(bus : EventBus) {
		this.eventBus = bus

	/** Replies the lock object.
	 */
	def getLock : ReadWriteLock {
		this.lock
	}

	override getEventBus : EventBus {
		this.eventBus
	}

	override getEventBus(type : Class<T>) : T with T extends EventBus {
		type.cast(this.eventBus)
	}
	
	protected override install {
		// Register the agent as a direct event listener.
		var bus = this.eventBus
		if (bus !== null) {
			bus.register(this.owner, null, null)
		}
	}

	protected override uninstall(stage : UninstallationStage) {
		if (stage == UninstallationStage::POST_DESTROY_EVENT) {
			var bus = this.eventBus
			if (bus !== null) {
				bus.unregisterAll(null)
			}
			this.eventListener = null
			this.eventBuffer = null;
		}
	}

	final def getAssociatedEventBusListener : InformedEventListener {
		var lst : InformedEventListener
		var lck = getLock
		lck.readLock.lock
		try {
			lst = this.eventListener
		} finally {
			lck.readLock.unlock
		}
		if (lst === null) {
			lck.writeLock.lock
			try {
				lst = this.eventListener
				if (lst === null) {
					lst = new ExternalEventBusAccessor(owner.ID, this)
					this.eventListener = lst
				}
			} finally {
				lck.writeLock.unlock
			}
		}
		return lst
	}

	def registerEventBusListener(listener : Object, filter : (Event)=>boolean, callback : (Object)=>void) {
		this.eventBus.register(listener, filter, callback);
	}

	def unregisterEventBusListener(listener : Object, callback : (Object)=>void = null) {
		this.eventBus.unregister(listener, callback)
	}

	def unregisterEventBusListener(listenerType : Class<?>, callback : (Object)=>void = null) {
		this.eventBus.unregister(listenerType, callback)
	}

	/** Change the event buffering flag.
	 *
	 * @param buffering the value of the flag.
	 * @return the value of the flag before its change.
	 */
	def setEventBuffering(buffering : boolean) : boolean {
		val lck = getLock
		lck.writeLock.lock
		try {
			val old = this.isEventBufferEnabled
			this.isEventBufferEnabled = buffering
			return old
		} finally {
			lck.writeLock.unlock
		}
	}

	/** Replies if the events are buffering.
	 * 
	 * @return {@code true} if the events are buffered.
	 */
	def isEventBuffering() : boolean {
		val lck = getLock
		lck.readLock.lock
		try {
			return this.isEventBufferEnabled			
		} finally {
			lck.readLock.unlock
		}
	}

	/** Replies the buffered events.
	 *
	 * @return an unmodifiable iterable of the buffered elements.
	 */
	def getBufferedEvents : SynchronizedIterable<Event> {
		val lck = getLock
		lck.readLock.lock
		try {
			if (this.eventBuffer === null) {
				return Collections3::emptySynchronizedSet
			}
			return Collections3::unmodifiableSynchronizedIterable(this.eventBuffer, lck)
		} finally {
			lck.readLock.unlock
		}
	}

	def fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean,
		listener : Object) : Iterable<Event> {
		if (getLife(owner, this.lockProvider).state.blockingEventHandling) {
			if (gatherEvents) {
				var wasEnabled : boolean
				val lck = getLock
				lck.writeLock.lock
				try {
					wasEnabled = this.isEventBufferEnabled
					this.isEventBufferEnabled = true
				} finally {
					lck.writeLock.unlock
				}
				try {
					this.eventBus.immediateDispatchTo(listener, ^event, thrownExceptions, getLogger)
				} finally {
					lck.writeLock.lock
					try {
						this.isEventBufferEnabled = wasEnabled
					} finally {
						lck.writeLock.unlock
					}
				}
				lck.writeLock.lock
				try {
					var cache = this.eventBuffer
					this.eventBuffer = null
					return cache
				} finally {
					lck.writeLock.unlock
				}
			}
			this.eventBus.immediateDispatchTo(listener, ^event, thrownExceptions, getLogger)
		}
		return emptyList
	}

	def fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean) : Iterable<Event> {
		if (getLife(owner, this.lockProvider).state.blockingEventHandling) {
			if (gatherEvents) {
				var wasEnabled : boolean
				val lck = getLock
				lck.writeLock.lock
				try {
					wasEnabled = this.isEventBufferEnabled
					this.isEventBufferEnabled = true
				} finally {
					lck.writeLock.unlock
				}
				try {
					this.eventBus.immediateDispatch(^event, thrownExceptions, getLogger)
				} finally {
					lck.writeLock.lock
					try {
						this.isEventBufferEnabled = wasEnabled
					} finally {
						lck.writeLock.unlock
					}
				}
				lck.writeLock.lock
				try {
					var cache = this.eventBuffer
					this.eventBuffer = null
					return cache
				} finally {
					lck.writeLock.unlock
				}
			}
			this.eventBus.immediateDispatch(^event, thrownExceptions, getLogger)
		}
		return emptyList
	}

	
	def fireEvent(^event : Event) {
		if (getLife(owner, this.lockProvider).state.asynchronousEventHandling) {
			var mustBuf : boolean 
			val lck = getLock
			lck.readLock.lock
			try {
				mustBuf = this.isEventBufferEnabled
			} finally {
				lck.readLock.unlock
			}
			if (mustBuf) {
				lck.writeLock.lock
				try {
					mustBuf = this.isEventBufferEnabled
					if (mustBuf) {
						if (this.eventBuffer === null) {
							this.eventBuffer = new LinkedList
						}
						this.eventBuffer += ^event
					}
				} finally {
					lck.writeLock.unlock
				}
			} else {
				this.eventBus.asyncDispatch(^event, getLogger)
			}
		}
	}

	def getRegisteredEventBusListeners(type : Class<T>) : SynchronizedIterable<T> with T {
		this.eventBus.getRegisteredEventListeners(type)
	}
	
	/**
	 * The class in charge of dispatching every single events coming from the outside of this agent (i.e. from a space) or from an
	 * agent's behavior.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * 
	 */
	private static class ExternalEventBusAccessor implements InformedEventListener {

		val owner : WeakReference<InternalEventBusSkill>

		val id : UUID
		
		new (id : UUID, owner : InternalEventBusSkill) {
			this.id = id
			this.owner = new WeakReference(owner)
		}
	
		override receiveEvent(^event : Event) {
			this.owner.get.fireEvent(^event)
		}
		
		override getID : UUID {
			this.id
		}
		
		override getOwnerInstance : Agent {
			this.owner.get.owner
		}
	}	
	
}
