/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills.internal

import io.sarl.core.Logging
import io.sarl.lang.core.Event
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.sre.capacities.InformedEventListener
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.skills.BuiltinCapacitiesOrder
import io.sarl.sre.skills.BuiltinSkill
import io.sarl.util.concurrent.Collections3
import java.lang.ref.WeakReference
import java.util.LinkedList
import java.util.List
import java.util.UUID
import java.util.concurrent.atomic.AtomicBoolean
import javax.inject.Inject

import static io.sarl.sre.skills.internal.InternalEventBusSkill.BinFlags.*

import static extension io.sarl.sre.services.lifecycle.AgentLife.*
import io.sarl.lang.core.Agent

/** 
 * SRE implementation of an internal skill that provides an event dispatcher to notify the different components/behaviors of an
 * agent.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
	skill InternalEventBusSkill extends BuiltinSkill implements InternalEventBusCapacity {

	uses Logging

	private static class BinFlags {
		static var installationOrder = -1
	}

	override getInstallationOrder : int {
		synchronized (BinFlags) {
			if (BinFlags::installationOrder < 0) {
				BinFlags::installationOrder = BuiltinCapacitiesOrder::computeInstallationOrder(this)
			}
			BinFlags::installationOrder
		}
	}

	var eventBus : EventBus
	
	var eventListener : InformedEventListener

	val isEventBufferEnabled = new AtomicBoolean

	var eventBuffer : List<Event> = null

	/** Set the backend event bus.
	 *
	 * @param bus the new event bus.
	 */
	@Inject
	override setEventBus(bus : EventBus) {
		this.eventBus = bus
	}

	override getEventBus : EventBus {
		this.eventBus
	}

	override getEventBus(type : Class<T>) : T with T extends EventBus {
		type.cast(this.eventBus)
	}
	
	protected override install {
		// Register the agent as a direct event listener.
		var bus = this.eventBus
		if (bus !== null) {
			bus.register(this.owner, null, null)
		}
	}

	protected override uninstall(stage : UninstallationStage) {
		if (stage == UninstallationStage::POST_DESTROY_EVENT) {
			var bus = this.eventBus
			if (bus !== null) {
				bus.unregisterAll(null)
			}
			this.eventListener = null
			this.eventBuffer = null;
		}
	}

	final def getAssociatedEventBusListener : InformedEventListener {
		if (this.eventListener === null) {
			this.eventListener = new ExternalEventBusAccessor(owner.ID, this)
		}
		return this.eventListener
	}

	def registerEventBusListener(listener : Object, filter : (Event)=>boolean, callback : (Object)=>void) {
		this.eventBus.register(listener, filter, callback);
	}

	def unregisterEventBusListener(listener : Object, callback : (Object)=>void = null) {
		this.eventBus.unregister(listener, callback)
	}

	def unregisterEventBusListener(listenerType : Class<?>, callback : (Object)=>void = null) {
		this.eventBus.unregister(listenerType, callback)
	}

	/** Change the event buffering flag.
	 *
	 * @param buffering the value of the flag.
	 * @return the value of the flag before its change.
	 */
	def setEventBuffering(buffering : boolean) : boolean {
		this.isEventBufferEnabled.getAndSet(buffering)
	}

	/** Replies if the events are buffering.
	 * 
	 * @return {@code true} if the events are buffered.
	 */
	def isEventBuffering() : boolean {
		this.isEventBufferEnabled.get
	}

	/** Replies the buffered events.
	 *
	 * @return an unmodifiable iterable of the buffered elements.
	 */
	def getBufferedEvents : SynchronizedIterable<Event> {
		synchronized (this.isEventBufferEnabled) {
			if (this.eventBuffer === null) {
				return Collections3::emptySynchronizedSet
			}
			return Collections3::unmodifiableSynchronizedIterable(this.eventBuffer, this.isEventBufferEnabled);
		}
	}

	def fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean,
		listener : Object) : Iterable<Event> {
		if (owner.life.state.blockingEventHandling) {
			if (gatherEvents) {
				val wasEnabled = this.isEventBufferEnabled.getAndSet(true)
				try {
					this.eventBus.immediateDispatchTo(listener, ^event, thrownExceptions, getLogger)
				} finally {
					this.isEventBufferEnabled.set(wasEnabled)
				}
				var cache : List<Event>
				synchronized (this.isEventBufferEnabled) {
					cache = this.eventBuffer
					this.eventBuffer = null
				}
				return cache
			}
			this.eventBus.immediateDispatchTo(listener, ^event, thrownExceptions, getLogger)
		}
		return emptyList
	}

	def fireEventAndWait(^event : Event, gatherEvents : boolean, thrownExceptions : boolean) : Iterable<Event> {
		if (owner.life.state.blockingEventHandling) {
			if (gatherEvents) {
				val wasEnabled = this.isEventBufferEnabled.getAndSet(true)
				try {
					this.eventBus.immediateDispatch(^event, thrownExceptions, getLogger)
				} finally {
					this.isEventBufferEnabled.set(wasEnabled)
				}
				var cache : List<Event>
				synchronized (this.isEventBufferEnabled) {
					cache = this.eventBuffer
					this.eventBuffer = null
				}
				return cache
			}
			this.eventBus.immediateDispatch(^event, thrownExceptions, getLogger)
		}
		return emptyList
	}

	
	def fireEvent(^event : Event) {
		if (owner.life.state.asynchronousEventHandling) {
			if (this.isEventBufferEnabled.get) {
				synchronized (this.isEventBufferEnabled) {
					if (this.eventBuffer === null) {
						this.eventBuffer = new LinkedList
					}
					this.eventBuffer += ^event
				}
			} else {
				this.eventBus.asyncDispatch(^event, getLogger)
			}
		}
	}

	def getRegisteredEventBusListeners(type : Class<T>) : SynchronizedIterable<T> with T {
		this.eventBus.getRegisteredEventListeners(type)
	}
	
	/**
	 * The class in charge of dispatching every single events coming from the outside of this agent (i.e. from a space) or from an
	 * agent's behavior.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 * 
	 */
	private static class ExternalEventBusAccessor implements InformedEventListener {

		val owner : WeakReference<InternalEventBusSkill>

		val id : UUID
		
		new (id : UUID, owner : InternalEventBusSkill) {
			this.id = id
			this.owner = new WeakReference(owner)
		}
	
		override receiveEvent(^event : Event) {
			this.owner.get.fireEvent(^event)
		}
		
		override getID : UUID {
			this.id
		}
		
		override getOwnerInstance : Agent {
			this.owner.get.owner
		}
	}	
	
}
