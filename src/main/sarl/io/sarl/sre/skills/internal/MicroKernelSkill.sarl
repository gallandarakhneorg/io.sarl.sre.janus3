/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills.internal

import com.google.common.util.concurrent.Service
import io.sarl.sre.Kernel
import io.sarl.sre.capacities.MicroKernelCapacity
import io.sarl.sre.skills.BuiltinSkill
import java.lang.ref.WeakReference
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Inject
import javax.inject.Provider

/**
 * Capacity that provides an access to the micro kernel.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("potential_field_synchronization_problem")
skill MicroKernelSkill extends BuiltinSkill implements MicroKernelCapacity {

	var kernel : WeakReference<Kernel>

	@Inject
	new (kernel : Kernel, provider : Provider<ReadWriteLock>) {
		super(provider)
		this.kernel = new WeakReference(kernel)
	}

	protected override uninstall(stage : UninstallationStage) {
		if (stage == UninstallationStage.POST_DESTROY_EVENT) {
			val kernelReference = this.kernel
			this.kernel = null
			if (kernelReference !== null) {
				kernelReference.clear
			}
		}
	}

	/**
	 * Replies the kernel.
	 *
	 * @return the kernel, or <code>null</code>.
	 */
	protected def getKernel : Kernel {
		this.kernel?.get
	}

	def getService(type : Class<S>) : S with S extends Service {
		if (type !== null) {
			val kern = getKernel
			if (kern !== null) {
				return kern.getService(type)
			}
		}
		return null
	}

}
