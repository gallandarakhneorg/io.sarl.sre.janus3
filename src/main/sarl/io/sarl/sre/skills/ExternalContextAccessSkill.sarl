/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills

import io.sarl.core.ExternalContextAccess
import io.sarl.lang.core.Address
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.sre.KernelScope
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.services.context.ContextService
import io.sarl.sre.services.context.ExternalContextMemberListener
import io.sarl.sre.services.context.InternalContextMembershipListener
import io.sarl.sre.services.context.InternalContextMembershipListenerFactory
import io.sarl.sre.services.lifecycle.ContextReference
import io.sarl.sre.services.logging.LoggingService
import io.sarl.util.Collections3
import java.util.UUID
import javax.inject.Inject
import javax.inject.Provider

import static io.sarl.sre.skills.ExternalContextAccessSkill.BinFlags.*

import static extension io.sarl.sre.services.lifecycle.AgentLife.*

/** 
 * Skill that permits to access to the context in which the agent is located.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill ExternalContextAccessSkill extends BuiltinSkill implements ExternalContextAccess {

	uses InternalEventBusCapacity

	private static class BinFlags {
		static var installationOrder = -1
	}

	def getInstallationOrder : int {
		synchronized (BinFlags) {
			if (BinFlags::installationOrder < 0) {
				BinFlags::installationOrder = BuiltinCapacitiesOrder::computeInstallationOrder(this)
			}
			BinFlags::installationOrder
		}
	}

	var contextService : ContextService

	var loggingService : LoggingService
	
	var externalEventEmitter : ExternalContextMemberListener

	var internalEventEmitter : InternalContextMembershipListener

	/** Set the backend context service.
	 */
	@Inject
	def setContextService(service : ContextService) {
		this.contextService = service
	}

	/** Set the provider of the context event emitter.
	 * 
	 * @param provider the provider.
	 */
	@Inject
	def setExternalContextMemberListenerProvider(@KernelScope provider  : Provider<ExternalContextMemberListener>) {
		assert provider !== null
		this.externalEventEmitter = provider.get
	}

	/** Set the provider of the context event emitter.
	 * 
	 * @param provider the provider.
	 */
	@Inject
	def setInternalContextMembershipListenerFactory(@KernelScope provider : InternalContextMembershipListenerFactory) {
		assert provider !== null
		this.internalEventEmitter = provider.create(this.owner)
	}

	/** Set the logging service.
	 */
	@Inject
	def setLoggingService(service : LoggingService) {
		this.loggingService = service
	}

	protected override uninstall(stage : UninstallationStage) {
		if (stage == UninstallationStage::POST_DESTROY_EVENT) {

			var life = this.owner.life
			// Unregister from the external context.
			// The unregistration to the default context is be done into the AgentLife class.
			var contexts = life.externalContexts
			var identifiers = <UUID> newArrayList
			synchronized (contexts.mutex) {
				identifiers += contexts.map[it.context.ID]
			}
			for (id : identifiers) {
				id.leave
			}
		}
	}

	def getUniverseContext : AgentContext {
		this.contextService.rootContext
	}

	def getContext(contextID : UUID) : AgentContext {
		assert contextID !== null
		var life = this.owner.life
		var defaultContext = life.defaultContext
		if (defaultContext !== null) {
			var theDefaultContext = defaultContext.context
			if (theDefaultContext !== null && contextID == theDefaultContext.ID) {
				return theDefaultContext
			}
		}
		var context = life.getExternalContext(contextID)
		if (context === null) {
			return null
		}
		return context.context
	}

	def getAllContexts : SynchronizedIterable<AgentContext> {
		var collection = this.owner.life.enclosingContexts
		var col2 = collection.map[var local : AgentContext = it.context; local]
		Collections3::unmodifiableSynchronizedIterable(col2, collection.mutex)
	}
	
	def isInSpace(^event : Event, ^space : Space) : boolean {
		^event.isInSpace(^space.spaceID)
	}
	
	def isInSpace(^event : Event, spaceID : SpaceID) : boolean {
		spaceID == ^event.source.spaceID
	}
	
	def isInSpace(^event : Event, spaceID : UUID) : boolean {
		spaceID == ^event.source.spaceID.ID
	}
	
	def join(contextID : UUID, expectedDefaultSpaceID : UUID) : boolean {
		assert contextID !== null
		assert expectedDefaultSpaceID !== null

		var life = this.owner.life
		if (life.state.alive) {
			if (life.defaultContext.context.ID == contextID) {
				return false
			}
			var existingContext = life.getExternalContext(contextID)
			if (existingContext !== null) {
				return false
			}
	
			var context = this.contextService.getContext(contextID)
			if (context === null) {
				return false
			}
	
			val defaultSpace = context.defaultSpace
			val defaultSpaceID = defaultSpace.spaceID
	
			if (expectedDefaultSpaceID != defaultSpaceID.ID) {
				return false
			}
	
			val agentID = ID
			val adr = new Address(defaultSpaceID, agentID)
			life.addExternalContext(context, adr)
	
			defaultSpace.register(associatedEventBusListener)
	
			this.externalEventEmitter.memberJoined(
				context, defaultSpaceID,
				agentID, this.owner.class.name)
			this.internalEventEmitter.contextJoined(contextID, expectedDefaultSpaceID)
	
			return true
		}
		return false
	}
	
	def leave(contextID : UUID) : boolean {
		assert contextID !== null

		var life = this.owner.life
		var exitDefaultSpace = false
		var context : ContextReference
		var candidate : ContextReference
		if (life.defaultContext.context.ID == contextID) {
			// Special case: an agent must always be into a default space.
			if (life.externalContextCount != 1) {
				return false
			}
			var ctxs = life.externalContexts
			synchronized (ctxs.mutex) {
				var iterator = ctxs.iterator
				if (!iterator.hasNext) {
					return false
				}
				candidate = iterator.next
			}
			context = life.defaultContext
			exitDefaultSpace = true
		} else {
			context = life.getExternalContext(contextID)
		}

		if (context === null) {
			return false
		}

		assert contextID == context.context.ID
		assert contextID == context.addressInDefaultSpace.spaceID.contextID

		context.defaultSpace.unregister(associatedEventBusListener)

		if (exitDefaultSpace) {
			assert candidate !== null
			life.setDefaultContext(candidate.context, candidate.addressInDefaultSpace) ?: context
		} else {
			life.removeExternalContext(context)
		}
		// To send this event the agent must still be inside the context and its default space
		this.internalEventEmitter.contextLeft(contextID)
		this.externalEventEmitter.memberLeft(
			context.context, context.addressInDefaultSpace.spaceID,
			this.owner.ID, this.owner.class.name)

		return true
	}
	
	def emit(^space : EventSpace, ^event : Event, scope : Scope<Address>) {
		^space.emit(ID, ^event, scope)
	}
	
}
