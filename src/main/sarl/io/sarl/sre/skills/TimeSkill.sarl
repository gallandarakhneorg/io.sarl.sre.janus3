/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills

import io.sarl.sre.services.time.TimeService
import io.sarl.core.Time
import java.util.concurrent.TimeUnit
import javax.inject.Inject

import static io.sarl.sre.skills.TimeSkill.BinFlags.*

/** 
 * Janus implementation of SARL's {@link Time} built-in capacity.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill TimeSkill extends JanusBuiltin implements Time {

	private static class BinFlags {
		static var installationOrder = -1
	}

	override getInstallationOrder : int {
		synchronized (BinFlags) {
			if (BinFlags::installationOrder < 0) {
				BinFlags::installationOrder = BuiltinCapacitiesOrder::computeInstallationOrder(this)
			}
			BinFlags::installationOrder
		}
	}

	var timeService : TimeService

	/** Set the backend time service.
	 */
	@Inject
	def setTimeService(service : TimeService) {
		this.timeService = service
	}

	def getTime(timeUnit : TimeUnit) : double {
		this.timeService.getTime(timeUnit)
	}

	def getOSTimeFactor : double {
		this.timeService.OSTimeFactor
	}

}
