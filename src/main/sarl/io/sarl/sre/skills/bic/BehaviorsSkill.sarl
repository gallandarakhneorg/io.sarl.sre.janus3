/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills.bic

import io.sarl.core.Behaviors
import io.sarl.core.Destroy
import io.sarl.core.Initialize
import io.sarl.lang.core.Address
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.capacities.InternalSchedules
import io.sarl.sre.skills.BuiltinSkill
import java.util.concurrent.locks.ReadWriteLock
import javax.inject.Inject
import javax.inject.Provider

import static io.sarl.sre.services.lifecycle.AgentLife.*

/** 
 * SRE implementation of SARL's {@link Behaviors} built-in capacity.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill BehaviorsSkill extends BuiltinSkill implements Behaviors {

	uses InternalEventBusCapacity, InternalSchedules

	/** Constructor. */
	@Inject
	new (lockProvider : Provider<ReadWriteLock>) {
		super(lockProvider)
	}

	protected override uninstall(stage : UninstallationStage) {
		if (stage === UninstallationStage::PRE_DESTROY_EVENT) {
			val adr = getLife(owner, this.lockProvider).addressInInnerDefaultSpace
			unregisterEventBusListener(typeof(Behavior)) [
				// Destroy the behavior
				val ^event = new Destroy
				^event.source = adr
				fireEventAndWait(^event, false, true, it)
				(it as Behavior).releaseInternalResources
			]
		}
	}

	def asEventListener : EventListener {
		associatedEventBusListener
	}

	def registerBehavior(attitude : Behavior, filter : (Event)=>boolean, initializationParameters : Object*) : Behavior {
		assert attitude !== null
		val life = getLife(owner, this.lockProvider)
		if (life.state.alive) {
			val adr = life.addressInInnerDefaultSpace
			attitude.registerEventBusListener(filter) [
				// Initialize the behavior
				val ^event = new Initialize(this.ID, initializationParameters)
				^event.source = adr
				fireEventAndWait(^event, false, true, attitude)
			]
		}
		return attitude
	}

	def unregisterBehavior(attitude : Behavior) : Behavior {
		assert attitude !== null
		var adr = getLife(owner, this.lockProvider).addressInInnerDefaultSpace
		attitude.unregisterTasksForBehavior
		attitude.unregisterEventBusListener [
			// Destroy the behavior
			val ^event = new Destroy
			^event.source = adr
			fireEventAndWait(^event, false, true, attitude)
			attitude.releaseInternalResources
		]
		return attitude
	}

	def wake(^event : Event, scope : Scope<Address> = null) {
		// Use the inner space so all behaviors (even agents inside the holon
		// running in distant kernels) are notified. The event will return into
		// the agent via the inner default space add call internalReceiveEvent
		// for real posting
		val life = getLife(owner, this.lockProvider)
		if (life.state.alive) {
			var context = life.innerContext
			if (context !== null) {
				val defSpace = context.defaultSpace
				^event.source = life.addressInInnerDefaultSpace
				defSpace.emit(ID, ^event, scope)
			} else {
				// Do not call getInnerContext(), which is creating the inner context automatically.
				// In place, try to send the event inside the agent only (and its behaviors).
				val adr = life.addressInInnerDefaultSpace
				if (scope === null || scope.matches(adr)) {
					val listener = associatedEventBusListener
					assert listener !== null
					^event.source = adr
					listener.receiveEvent(^event)
				}
			}
		}
	}

	def getRegisteredBehaviors : SynchronizedIterable<Behavior> {
		getRegisteredEventBusListeners(typeof(Behavior))
	}
	
	def hasRegisteredBehavior : boolean {
		val iterable = getRegisteredEventBusListeners(typeof(Behavior))
		iterable.lock.readLock.lock
		try {
			return iterable.iterator.hasNext
		} finally {
			iterable.lock.readLock.unlock
		}
	}
	
}
