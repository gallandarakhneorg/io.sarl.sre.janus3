/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills.bic

import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.executor.ExecutorService
import io.sarl.sre.services.lifecycle.AgentState
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.skills.BuiltinCapacitiesOrder
import io.sarl.sre.skills.BuiltinSkill
import java.util.UUID
import javax.inject.Inject

import static io.sarl.sre.skills.bic.LifecycleSkill.BinFlags.*

import static extension io.sarl.sre.services.lifecycle.AgentLife.*

/** 
 * Skill that permits to manage the life cycle of the agents.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill LifecycleSkill extends BuiltinSkill implements Lifecycle {

	uses Logging

	private static class BinFlags {
		static var installationOrder = -1
	}
	
	def getInstallationOrder : int {
		synchronized (BinFlags) {
			if (BinFlags::installationOrder < 0) {
				BinFlags::installationOrder = BuiltinCapacitiesOrder::computeInstallationOrder(this)
			}
			BinFlags::installationOrder
		}
	}

	@SuppressWarnings("potential_field_synchronization_problem")
	var lifecycle : LifecycleService

	/** Set the backend lifecycle service.
	 */
	@Inject
	def setLifecycleService(service : LifecycleService) {
		this.lifecycle = service
	}

	def killMe {
		var postTreatment : Runnable = null
		var state = owner.life.state
		// The agent should be killed by a specific asynchronous event.
		// This event is supported by the internal event bus implementation.
		if (state == AgentState::INITIALIZING) {
			// Indicate to the starting function into AgentLife that the initialization has failed.
			postTreatment = [owner.life.state = AgentState::DYING]
		} else if (state == AgentState::ALIVE) {
			// Synchronous killing
			postTreatment = [this.lifecycle.killAgent(this.owner)]
		}
		// Never return from the killMe
		Thread::yield
		ExecutorService::neverReturn(postTreatment)
	}
	
	def spawn(agentType : Class<? extends Agent>, params : Object*) : UUID {
		val life = owner.life
		if (life.state.alive) {
			var o = this.owner
			val result = this.lifecycle.spawnAgent(1, o.ID, life.defaultContext.context, null, agentType, params)
			if (result.agentSpawned) {
				var iterator = result.spawnedAgents.iterator
				if (iterator.hasNext) {
					return iterator.next
				}
			} else {
				val err = result.error
				if (err !== null) {
					error(err.localizedMessage, err)
				}
			}
		}
		return null
	}
	
	def spawn(nbAgents : int, agentType : Class<? extends Agent>, params : Object*) : Iterable<UUID> {
		val life = owner.life
		if (life.state.alive) {
			var o = this.owner
			var result = this.lifecycle.spawnAgent(nbAgents, o.ID, life.defaultContext.context, null, agentType, params)
			if (result.failing) {
				val err = result.error
				if (err !== null) {
					error(err.localizedMessage, err)
				}
			}
			return result.spawnedAgents
		}
		return emptyList
	}
	
	def spawnInContext(agentClass : Class<? extends Agent>, context : AgentContext, params : Object*) : UUID {
		if (owner.life.state.alive) {
			var o = this.owner
			val result = this.lifecycle.spawnAgent(1, o.ID, context as Context, null, agentClass, params)
			if (result.agentSpawned) {
				var iterator = result.spawnedAgents.iterator
				if (iterator.hasNext) {
					return iterator.next
				}
			} else {
				val err = result.error
				if (err !== null) {
					error(err.localizedMessage, err)
				}
			}
		}
		return null
	}
	
	def spawnInContext(nbAgents : int, agentClass : Class<? extends Agent>, context : AgentContext,
		params : Object*) : Iterable<UUID> {
		if (owner.life.state.alive) {
			var o = this.owner
			var result = this.lifecycle.spawnAgent(nbAgents, o.ID, context as Context, null, agentClass, params)
			if (result.failing) {
				val err = result.error
				if (err !== null) {
					error(err.localizedMessage, err)
				}
			}
			return result.spawnedAgents
		}
		return emptyList
	}
	
	def spawnInContextWithID(agentClass : Class<? extends Agent>, agentID : UUID, context : AgentContext,
		params : Object*) : UUID {
		if (owner.life.state.alive) {
			var o = this.owner
			val result = this.lifecycle.spawnAgent(1, o.ID, context as Context, agentID, agentClass, params)
			if (result.agentSpawned) {
				var iterator = result.spawnedAgents.iterator
				if (iterator.hasNext) {
					return iterator.next
				}
			} else {
				val err = result.error
				if (err !== null) {
					error(err.localizedMessage, err)
				}
			}
		}
		return null
	}
	
}
