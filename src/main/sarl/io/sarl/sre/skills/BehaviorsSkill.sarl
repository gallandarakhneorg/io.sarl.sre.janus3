/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills

import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.capacities.InternalSchedules
import io.sarl.core.Behaviors
import io.sarl.lang.core.Address
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventListener
import io.sarl.lang.core.Scope
import io.sarl.lang.util.SynchronizedIterable

import static io.sarl.sre.skills.BehaviorsSkill.BinFlags.*

import static extension io.sarl.sre.services.lifecycle.AgentLife.*
import io.sarl.core.Initialize
import io.sarl.core.Destroy

/** 
 * Janus implementation of SARL's {@link Behaviors} built-in capacity.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill BehaviorsSkill extends JanusBuiltin implements Behaviors {

	uses InternalEventBusCapacity, InternalSchedules

	private static class BinFlags {
		static var installationOrder = -1
	}

	def getInstallationOrder : int {
		if (BinFlags::installationOrder < 0) {
			BinFlags::installationOrder = BuiltinCapacitiesOrder::computeInstallationOrder(this)
		}
		BinFlags::installationOrder
	}

	protected override uninstall(stage : UninstallationStage) {
		if (stage === UninstallationStage::PRE_DESTROY_EVENT) {
			unregisterEventBusListener(typeof(Behavior)) [
				// Destroy the behavior
				val ^event = new Destroy
				^event.source = owner.life.addressInInnerDefaultSpace
				fireEventAndWait(^event, false, true, it)
			]
		}
	}

	def asEventListener : EventListener {
		associatedEventBusListener
	}

	def registerBehavior(attitude : Behavior, filter : (Event)=>boolean = null) : Behavior {
		assert attitude !== null
		val life = owner.life
		if (life.state.alive) {
			attitude.registerEventBusListener(filter) [
				// Initialize the behavior
				val ^event = new Initialize(this.ID)
				^event.source = life.addressInInnerDefaultSpace
				fireEventAndWait(^event, false, true, attitude)
			]
		}
		return attitude
	}

	def unregisterBehavior(attitude : Behavior) : Behavior {
		assert attitude !== null
		attitude.unregisterTasksForBehavior
		attitude.unregisterEventBusListener [
			// Destroy the behavior
			val ^event = new Destroy
			^event.source = owner.life.addressInInnerDefaultSpace
			fireEventAndWait(^event, false, true, attitude)
		]
		return attitude
	}

	def wake(^event : Event, scope : Scope<Address> = null) {
		// Use the inner space so all behaviors (even agents inside the holon
		// running in distant kernels) are notified. The event will return into
		// the agent via the inner default space add call internalReceiveEvent
		// for real posting
		val life = this.owner.life
		if (life.state.alive) {
			var context = life.innerContext
			if (context !== null) {
				val defSpace = context.defaultSpace
				^event.source = life.addressInInnerDefaultSpace
				defSpace.emit(ID, ^event, scope)
			} else {
				// Do not call getInnerContext(), which is creating the inner context automatically.
				// In place, try to send the event inside the agent only (and its behaviors).
				val adr = life.addressInInnerDefaultSpace
				if (scope === null || scope.matches(adr)) {
					val listener = associatedEventBusListener
					assert listener !== null
					^event.source = adr
					listener.receiveEvent(^event)
				}
			}
		}
	}

	def getRegisteredBehaviors : SynchronizedIterable<Behavior> {
		getRegisteredEventBusListeners(typeof(Behavior))
	}
	
	def hasRegisteredBehavior : boolean {
		val iterable = getRegisteredEventBusListeners(typeof(Behavior))
		synchronized (iterable.mutex) {
			return iterable.iterator.hasNext
		}
	}
	
}
