/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.skills

import com.google.inject.Injector
import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.InnerContextAccess
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import io.sarl.core.Time
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.Agent
import io.sarl.lang.core.Capacity
import io.sarl.lang.core.DynamicSkillProvider
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Skill
import io.sarl.lang.util.ClearableReference
import io.sarl.sre.capacities.InternalEventBusCapacity
import io.sarl.sre.capacities.InternalSchedules
import io.sarl.sre.capacities.MicroKernelCapacity
import io.sarl.sre.skills.bic.BehaviorsSkill
import io.sarl.sre.skills.bic.DefaultContextInteractionsSkill
import io.sarl.sre.skills.bic.ExternalContextAccessSkill
import io.sarl.sre.skills.bic.InnerContextAccessSkill
import io.sarl.sre.skills.bic.LifecycleSkill
import io.sarl.sre.skills.bic.LoggingSkill
import io.sarl.sre.skills.bic.SchedulesSkill
import io.sarl.sre.skills.bic.TimeSkill
import io.sarl.sre.skills.internal.InternalEventBusSkill
import io.sarl.sre.skills.internal.MicroKernelSkill
import javax.inject.Inject
import javax.inject.Singleton

/** 
 * Provider of the built-in capacities of the SRE platform.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.6.0
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
@Singleton
class SreDynamicSkillProvider implements DynamicSkillProvider {

	val injector : Injector

	/** Constructor.
	 * 
	 * @param injector the injector.
	 */
	@Inject
	new (injector : Injector) {
		this.injector = injector
	}

	/** Create the skill instance as fast as possible. */
	protected def newSkillInstance(^capacity : Class<? extends Capacity>) : Pair<Skill, Class<? extends Capacity>> {
		switch (^capacity) {
			case typeof(InternalEventBusCapacity): {
				var ^skill = this.injector.getInstance(typeof(InternalEventBusSkill))
				return Pair::of(^skill, null)
			}
			case typeof(DefaultContextInteractions): {
				var ^skill = this.injector.getInstance(typeof(DefaultContextInteractionsSkill))
				return Pair::of(^skill, null)
			}
			case typeof(Lifecycle): {
				var ^skill = this.injector.getInstance(typeof(LifecycleSkill))
				return Pair::of(^skill, null)
			}
			case typeof(Schedules): {
				var ^skill = this.injector.getInstance(typeof(SchedulesSkill))
				return Pair::of(^skill, typeof(InternalSchedules))
			}
			case typeof(InternalSchedules): {
				var ^skill = this.injector.getInstance(typeof(SchedulesSkill))
				return Pair::of(^skill, typeof(Schedules))
			}
			case typeof(Behaviors): {
				var ^skill = this.injector.getInstance(typeof(BehaviorsSkill))
				return Pair::of(^skill, null)
			}
			case typeof(Logging): {
				var ^skill = this.injector.getInstance(typeof(LoggingSkill))
				return Pair::of(^skill, null)
			}
			case typeof(Time): {
				var ^skill = this.injector.getInstance(typeof(TimeSkill))
				return Pair::of(^skill, null)
			}
			case typeof(InnerContextAccess): {
				var ^skill = this.injector.getInstance(typeof(InnerContextAccessSkill))
				return Pair::of(^skill, null)
			}
			case typeof(ExternalContextAccess): {
				var ^skill = this.injector.getInstance(typeof(ExternalContextAccessSkill))
				return Pair::of(^skill, null)
			}
			case typeof(MicroKernelCapacity): {
				var ^skill = this.injector.getInstance(typeof(MicroKernelSkill))
				return Pair::of(^skill, null)
			}
		}
		return null
	}

	def installSkill(^agent : Agent, ^capacity : Class<? extends Capacity>) : ClearableReference<Skill> {
		var pair = ^capacity.newSkillInstance
		var ^skill : Skill = pair?.key
		if (^skill !== null) {
			var additionalCapacity = pair.value
			if (additionalCapacity !== null) {
				return ^agent.registerSkill(#[^capacity, additionalCapacity], ^skill)
			}
			return ^agent.registerSkill(#[^capacity], ^skill)
		}
		return null
	}

	/** Register the given skill.
	 */
	protected def registerSkill(^agent : Agent, capacities : Class<? extends Capacity>[],
		^skill : Skill) : ClearableReference<Skill> {
		SREutils::setInternalSkill(^agent, ^skill, capacities)
	}

}
