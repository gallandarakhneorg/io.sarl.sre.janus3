/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.boot.commands

import com.google.inject.AbstractModule
import com.google.inject.Module
import com.google.inject.Provider
import com.google.inject.Provides
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.cli.Cli
import io.bootique.command.CommandOutcome
import io.bootique.meta.application.CommandMetadata
import io.sarl.sre.boot.configs.SreConfig
import java.text.MessageFormat
import javax.inject.Singleton

import static extension io.bootique.BQCoreModule.extend

/**
 * Command for running the SRE without agent at boot time.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class RunWithoutAgentCommand extends AbstractRunCommand {

	static val CLI_NAME = "noagent"

	/** Constructor.
	 *
	 * @param configuration the configuration of the tool.
	 */
	new (configuration : Provider<SreConfig>) {
		super(configuration,
			CommandMetadata
				.builder(typeof(RunWithoutAgentCommand))
				.description(Messages::RunWithoutAgentCommand_0)
				.name(CLI_NAME))
	}

	override run(cli : Cli) : CommandOutcome {
		if (!cli.standaloneArguments().isEmpty()) {
			return CommandOutcome.failed(255, Messages::RunWithoutAgentCommand_1)
		}

		try {
			val universeContext = startSRE
			if (universeContext === null) {
				return CommandOutcome.failed(255, Messages::RunWithoutAgentCommand_3)
			}
		} catch (exception : Throwable) {
			return CommandOutcome.failed(255, MessageFormat::format(Messages::RunWithoutAgentCommand_2, exception.localizedMessage), exception)
		}
		
		return CommandOutcome.succeeded
	}

}

/** Module for the command for running the SRE without an agent.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class RunWithoutAgentCommandModule extends AbstractModule {

	override configure {
		binder.extend.addCommand(typeof(RunWithoutAgentCommand))
	}

	/** Provide the command for running the SRE.
	 * 
	 * @param configuration the configuration of the tool.
	 * @return the command.
	 */
	@Provides
	@Singleton
	def provideRunCommand(configuration : Provider<SreConfig>) : RunWithoutAgentCommand {
		return new RunWithoutAgentCommand(configuration)
	}

}

/** Provider of the module for running the SRE without an agent.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class RunWithoutAgentCommandModuleProvider implements BQModuleProvider {

	override module : Module {
		return new RunWithoutAgentCommandModule
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule.builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::RunWithoutAgentCommandModuleProvider_0);
	}

}
