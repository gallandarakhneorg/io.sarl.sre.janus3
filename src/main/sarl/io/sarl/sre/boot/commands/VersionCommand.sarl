/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.boot.commands

import com.google.inject.AbstractModule
import com.google.inject.Module
import com.google.inject.Provides
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.cli.Cli
import io.bootique.command.CommandOutcome
import io.bootique.command.CommandWithMetadata
import io.bootique.log.BootLogger
import io.bootique.meta.application.CommandMetadata
import io.sarl.lang.SARLVersion
import io.sarl.sre.SreVersion
import java.text.MessageFormat
import javax.inject.Singleton

import static extension io.bootique.BQCoreModule.extend

/**
 * Command for showing the SRE version.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class VersionCommand extends CommandWithMetadata {

	static val CLI_NAME = "version"

	val bootLogger : BootLogger

	/** Constructor.
	 *
	 * @param bootLogger the logger.
	 */
	new (bootLogger : BootLogger) {
		super(CommandMetadata
	            .builder(typeof(VersionCommand))
	            .description(Messages::VersionCommand_0)
	            .name(CLI_NAME))
		this.bootLogger = bootLogger
	}

	override run(cli : Cli) : CommandOutcome {
		val text = new StringBuilder
		text.append(MessageFormat::format(Messages::VersionCommand_1,
				SreVersion::RELEASE_VERSION,
				SreVersion::IS_STABLE,
				SARLVersion.SARL_RELEASE_VERSION,
				SARLVersion.SPECIFICATION_RELEASE_VERSION_STRING,
				System.getProperty("java.version"))) //$NON-NLS-1$
		this.bootLogger.stdout(text.toString())
		return CommandOutcome.succeeded()
	}

}

/** Module for the command for printing out the SRE version.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class VersionCommandModule extends AbstractModule {

	override configure {
		binder.extend.addCommand(typeof(VersionCommand))
	}

	/** Provide the command for displaying the SRE version.
	 * 
	 * @param bootLogger the logger.
	 * @return the command.
	 */
	@Provides
	@Singleton
	def provideVersionCommand(bootLogger : BootLogger) : VersionCommand {
		return new VersionCommand(bootLogger)
	}

}

/** Provider of the module for the version command.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class VersionCommandModuleProvider implements BQModuleProvider {

	override module : Module {
		return new VersionCommandModule
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule.builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::VersionCommandModuleProvider_0);
	}

}
