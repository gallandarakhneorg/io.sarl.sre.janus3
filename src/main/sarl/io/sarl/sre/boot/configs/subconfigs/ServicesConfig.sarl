/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.configs.subconfigs

import com.google.inject.AbstractModule
import com.google.inject.Module
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.bootique.annotation.BQConfig
import io.bootique.annotation.BQConfigProperty
import io.bootique.meta.application.OptionMetadata
import io.sarl.sre.boot.configs.SreConfig
import java.lang.reflect.Type
import java.text.MessageFormat
import java.util.Collections
import java.util.Map
import org.arakhne.afc.bootique.variables.VariableDecls
import org.eclipse.xtend.lib.annotations.Accessors

import static io.sarl.sre.boot.configs.subconfigs.ServicesConfig.*

import static extension io.bootique.BQCoreModule.extend

/**
 * Configuration of the SRE services.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8
 */
@BQConfig("Configuration of the services inside the SRE")
class ServicesConfig {

	/** 
	 * Prefix for the configuration entries of the services' configurations.
	 */
	public static val PREFIX : String = SreConfig::PREFIX + ".services"; // $NON-NLS-1$

	/** 
	 * Name of the property for the default timeout for services' start in milliseconds.
	 * 
	 * @see #START_TIMEOUT_VALUE
	 */
	public static val START_TIMEOUT_NAME = PREFIX + ".startTimeout"

	/** 
	 * The default timeout for services' start in milliseconds.
	 * 
	 * @see #START_TIMEOUT_NAME
	 */
	public static val START_TIMEOUT_VALUE = 0.seconds

	/** 
	 * Name of the property for the default timeout for services' stop in milliseconds.
	 * 
	 * @see #STOP_TIMEOUT_VALUE
	 */
	public static val STOP_TIMEOUT_NAME = PREFIX + ".stopTimeout"
	
	/** 
	 * The default timeout for services' stop in milliseconds.
	 * 
	 * @see #STOP_TIMEOUT_NAME
	 */
	public static val STOP_TIMEOUT_VALUE = 10.seconds

	@Accessors(PUBLIC_GETTER)
	var startTimeout = START_TIMEOUT_VALUE

	@Accessors(PUBLIC_GETTER)
	var stopTimeout = STOP_TIMEOUT_VALUE

	var executorsConfig : ExecutorsConfig
	
	
	/** Change the timeout for the start of all the services.
	 *
	 * @param timeout the new timeout in milliseconds.
	 */
	@BQConfigProperty("Timeout for the services' start in milliseconds. If the value is lower or equal to "
		+ "zero, then the SRE will wait for the services' start for ever.")
	def setStartTimeout(timeout : long) {
		if (timeout < 0l) {
			this.startTimeout = 0l
		} else {
			this.startTimeout = timeout
		}
	}

	/** Change the timeout for the stop of all the services.
	 * 
	 * @param timeout the new timeout in milliseconds.
	 */
	@BQConfigProperty("Timeout for the services' stop in milliseconds. If the value is lower or equal to "
		+ "zero, then the SRE will wait for the services' start for ever.")
	def setStopTimeout(timeout : long) {
		if (timeout < 0l) {
			this.stopTimeout = 0l
		} else {
			this.stopTimeout = timeout
		}
	}

	/** Replies the parallel execution configuration.
	 * 
	 * @return the parallel execution configuration.
	 */
	def getExecutors : ExecutorsConfig {
		if (this.executorsConfig === null) {
			this.executorsConfig = new ExecutorsConfig
		}
		return this.executorsConfig
	}

	/** Change the parallel execution configuration.
	 * 
	 * @param config the parallel execution configuration.
	 */
	@BQConfigProperty("Configuration for the SRE services.")
	def setExecutors(config : ExecutorsConfig) {
		this.executorsConfig = config
	}

}

/** 
 * Module for the parallel services' configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class ServicesConfigModule extends AbstractModule {

	static val XSERVICESTARTTIMEOUT_OPTION = "XserviceStartTimeout"

	static val XSERVICESTOPTIMEOUT = "XserviceStopTimeout"

	override configure : void {
		VariableDecls::extend(binder).declareVar(START_TIMEOUT_NAME)
		binder.extend.addOption(
			OptionMetadata::builder(XSERVICESTARTTIMEOUT_OPTION,
				MessageFormat::format(Messages::ServicesConfigModule_0, START_TIMEOUT_VALUE))
				.valueRequired(Messages::ServicesConfigModule_2)
				.build).mapConfigPath(XSERVICESTARTTIMEOUT_OPTION, START_TIMEOUT_NAME)

		VariableDecls::extend(binder).declareVar(STOP_TIMEOUT_NAME)
		binder.extend.addOption(OptionMetadata::builder(XSERVICESTOPTIMEOUT,
				MessageFormat::format(Messages::ServicesConfigModule_1, STOP_TIMEOUT_VALUE))
			.valueRequired(Messages::ServicesConfigModule_2)
			.build).mapConfigPath(XSERVICESTOPTIMEOUT, STOP_TIMEOUT_NAME)
	}

}

/** Provider of the module for the parallel executors' configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class ServicesConfigModuleProvider implements BQModuleProvider {

	override module : Module {
		return new ServicesConfigModule
	}

	override configs : Map<String, Type> {
		return Collections::singletonMap(PREFIX, typeof(ServicesConfig))
	}
	
	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::ServicesConfigModuleProvider_0);
	}

}
