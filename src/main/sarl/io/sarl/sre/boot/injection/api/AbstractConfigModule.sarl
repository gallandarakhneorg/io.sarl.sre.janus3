/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.injection.api

import com.google.common.util.concurrent.Service
import com.google.inject.Binder
import com.google.inject.Module
import com.google.inject.binder.AnnotatedBindingBuilder
import com.google.inject.multibindings.Multibinder
import io.bootique.ConfigModule
import io.bootique.config.ConfigurationFactory
import io.sarl.sre.boot.factories.Factories

/** 
 * Abstract module that has access to its bootique configuration of "sarl.*". 
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
abstract class AbstractConfigModule extends ConfigModule {

	var binder : Binder

	protected override defaultConfigPrefix : String {
		Factories.SARL_ROOT_PROPERTY_PREFIX + CONFIG_PREFIX_BUILDER.toName(getClass)
	}

	/** Replies the configuration accessor.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @param type the type of the configuration.
	 * @return the configuration accessor.
	 */
	protected final def get(configFactory : ConfigurationFactory, type : Class<T>) : T with T {
		assert configFactory !== null
		assert type !== null
		configFactory.config(type, this.configPrefix)
	}

	/** Configures the given binder.
	 *
	 * @param binder the binder to configure.
	 */
	synchronized final def configure(builder : Binder) {
    	assert this.binder === null
    	assert builder !== null
	    this.binder = builder
	    try {
	      configure
	    }
	    finally {
	      this.binder = null
	    }
	}

	/** Configure a binder via the exposed methods.
	 */
	protected abstract def configure

	/** Get the underlying {@code Binder}.
	 *
	 * @return the binder.
	 */
	protected final def binder : Binder {
    	assert this.binder !== null, "The binder can only be used inside configure()"
	    return this.binder
	}
  
	/**  Adds a dependency from this module to {@code type}. When the injector is
	 * created, Guice will report an error if {@code type} cannot be injected.
	 * Note that this requirement may be satisfied by implicit binding, such as
	 * a public no-arguments constructor.
	 *
	 * @param type the required binded type.
	 */
	protected final def requireBinding(type : Class<?>) {
	    binder().getProvider(type);
	}

	/** Adds a dependency from this module to {@code type}. When the injector is
	 * created, Guice will report an error if {@code type} cannot be injected.
	 * Note that this requirement may be satisfied by implicit binding, such as
	 * a public no-arguments constructor.
	 * The given binder for the set of services is updated with the given {@code type}.
	 * 
	 * @param type the type of service to bind.
	 * @param serviceSetBinder the set of services to update.
	 */
	protected final def requireServiceBinding(type : Class<? extends Service>, serviceSetBinder : Multibinder<Service>) {
		type.requireBinding
		serviceSetBinder.addBinding.to(type)
	}

	/**
	 * Create an module's instance of the given type and install it.
	 * 
	 * @param type the type of the module to install 
	 */
	protected final def install(type : Class<? extends Module>) {
		assert type !== null
		type.newInstance.install
	}

	/** Install the given module.
	 *
	 * @param module the module to install.
	 */
	protected final def install(module : Module) {
    	binder().install(module);
  	}

	/** Binds the given type.
	 *
	 * @param clazz the type to binder.
	 * @return the binding builder.
	 */
	protected final def bind(clazz : Class<T>) : AnnotatedBindingBuilder<T> with T {
    	binder().bind(clazz)
	}

}
