/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.injection.modules.kernel

import com.google.common.util.concurrent.Service
import com.google.inject.AbstractModule
import com.google.inject.Injector
import com.google.inject.Key
import com.google.inject.Provides
import com.google.inject.name.Names
import io.sarl.sarlspecification.SarlSpecificationChecker
import io.sarl.sarlspecification.StandardSarlSpecificationChecker
import io.sarl.sre.KernelScope
import io.sarl.sre.boot.factories.BootFactory
import io.sarl.sre.services.GoogleServiceManager
import io.sarl.sre.services.IServiceManager
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ContextFactory
import java.util.Set
import java.util.UUID
import javax.inject.Named
import javax.inject.Singleton
import io.bootique.config.ConfigurationFactory

/** 
 * Module configures kernel specific components, including the root context creation.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class KernelModule extends AbstractModule {

	protected override configure {
		Key::get(typeof(UUID), Names::named(BootFactory::ROOT_CONTEXT_ID_NAME)).requireBinding
		Key::get(typeof(UUID), Names::named(BootFactory::ROOT_DEFAULT_SPACE_ID_NAME)).requireBinding
		typeof(SarlSpecificationChecker).bind.to(typeof(StandardSarlSpecificationChecker)).in(typeof(Singleton))
	}

	/** Replies the kernel instance.
	 *
	 * @param injector the current injector.
	 * @param factory the factory of context for creating the root context.
	 * @param rootContextID the identifier of the root context.
	 * @param rootDefaultSpaceId the identifier of the root default space.
	 * @return the kernel instance.
	 */
	@Provides
	@KernelScope
	@Singleton
	static def getKernelContext(
		injector : Injector,
		factory : ContextFactory,
		@Named(BootFactory::ROOT_CONTEXT_ID_NAME) rootContextID : UUID,
		@Named(BootFactory::ROOT_DEFAULT_SPACE_ID_NAME) rootDefaultSpaceId : UUID) : Context {
		var context = factory.newInstance(rootContextID, rootDefaultSpaceId, true)
		injector.injectMembers(context)
		return context
	}

	/** Replies the manager of the SRE services.
	 * 
	 * @param services the SRE services.
	 * @param configFactory the loader of Bootique configuration.
	 * @return the manager of the SRE services.
	 */
	@Provides
	@Singleton
	static def createServiceManager(services : Set<Service>, configFactory : ConfigurationFactory) : IServiceManager {
		new GoogleServiceManager(services, configFactory)
	}

}
