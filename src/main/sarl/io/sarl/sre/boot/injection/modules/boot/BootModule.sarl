/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.injection.modules.boot

import com.google.inject.AbstractModule
import com.google.inject.Provides
import com.google.inject.Singleton
import com.google.inject.name.Named
import io.sarl.bootstrap.SRE
import io.sarl.bootstrap.SREBootstrap
import io.sarl.lang.core.Agent
import io.sarl.sre.boot.factories.BootFactory
import java.util.UUID

import static io.sarl.sre.boot.factories.BootFactory.*
import static extension  io.sarl.sre.boot.injection.api.ModuleUtil.*

/** 
 * Module for the specifying the SARL environment.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
class BootModule extends AbstractModule {

	protected override configure {
		binder() => [
			associateEnvironmentVariable(BOOT_AGENT_NAME)
			associateEnvironmentVariable(ROOT_CONTEXT_ID_NAME)
			associateEnvironmentVariable(ROOT_DEFAULT_SPACE_ID_NAME)
			associateEnvironmentVariable(PROGRAM_NAME_NAME)
			associateEnvironmentVariable(ROOT_CONTEXT_BOOT_TYPE_NAME)
		]
	}

	/** Replies the type's name of the agent to boot.
	 *
	 * @param configFactory accessor to the bootique factory.
	 * @return the name of the agent to boot.
	 */
	@Provides
	@Named(BOOT_AGENT_NAME)
	def getBootAgentType(configFactory : BootFactory) : Class<? extends Agent> {
		configFactory.getBootAgent(getClass.getClassLoader)
	}

	/** Replies the programmatic bootstrap for the SRE.
	 * 
	 * @return the provider of the bootstrap.
	 */
	@Provides
	@Singleton
	static def getProgrammaticBootstrap : SREBootstrap {
		SRE::bootstrap
	}

	/** 
	 * Replies the identifier of the root context.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @return the context identifier
	 */
	@Provides
	@Named(ROOT_CONTEXT_ID_NAME)
	@Singleton
	def getRootContextID(configFactory : BootFactory) : UUID {
		configFactory.rootContextID
	}

	/** 
	 * Construct an identifier for the root default space.
	 * 
	 * @param configFactory accessor to the bootique factory.
	 * @return the space ID
	 */
	@Provides
	@Named(ROOT_DEFAULT_SPACE_ID_NAME)
	@Singleton
	def getRootSpaceID(configFactory : BootFactory) : UUID {
		configFactory.rootSpaceID
	}

}
