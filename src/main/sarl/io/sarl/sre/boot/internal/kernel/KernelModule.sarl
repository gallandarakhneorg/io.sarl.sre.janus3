/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.internal.kernel

import com.google.common.util.concurrent.Service
import com.google.inject.AbstractModule
import com.google.inject.Injector
import com.google.inject.Module
import com.google.inject.Provides
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.sarl.sre.KernelScope
import io.sarl.sre.boot.configs.SreConfig
import io.sarl.sre.boot.configs.subconfigs.BootConfig
import io.sarl.sre.boot.internal.services.SreServices
import io.sarl.sre.services.GoogleServiceManager
import io.sarl.sre.services.IServiceManager
import io.sarl.sre.services.context.Context
import io.sarl.sre.services.context.ContextFactory
import java.util.Set
import java.util.UUID
import javax.inject.Named
import javax.inject.Provider
import javax.inject.Singleton

/** 
 * Module for configuring the kernel specific components.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class KernelModule extends AbstractModule {

	protected override configure {
	}

	/** Replies the kernel instance.
	 *
	 * @param injector the current injector.
	 * @param factory the factory of context for creating the root context.
	 * @param rootContextID the identifier of the root context.
	 * @param rootDefaultSpaceId the identifier of the root default space.
	 * @return the kernel instance.
	 */
	@Provides
	@KernelScope
	@Singleton
	def provideKernelContext(injector : Injector, factory : ContextFactory,
		@Named(BootConfig::ROOT_CONTEXT_ID_NAME) rootContextID : UUID,
		@Named(BootConfig::ROOT_DEFAULT_SPACE_ID_NAME) rootDefaultSpaceId : UUID) : Context {
		var context = factory.newInstance(rootContextID, rootDefaultSpaceId, null)
		injector.injectMembers(context)
		return context
	}

	/** Replies the manager of the SRE services.
	 * 
	 * @param services the SRE services.
	 * @param config the provider of configuration.
	 * @return the manager of the SRE services.
	 */
	@Provides
	@Singleton
	def provideServiceManager(@SreServices services : Set<Service>, config : Provider<SreConfig>) : IServiceManager {
		new GoogleServiceManager(services, config.get)
	}

}

/** Provider of the module for configuring the kernel specific components.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.9
 */
class KernelModuleProvider implements BQModuleProvider {

	override module : Module {
		return new KernelModule
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::KernelModuleProvider_0);
	}

}
