/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2019 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.internal.naming

import com.google.inject.AbstractModule
import com.google.inject.BindingAnnotation
import com.google.inject.Module
import io.bootique.BQModule
import io.bootique.BQModuleProvider
import io.sarl.sre.naming.AgentSchemeNameParser
import io.sarl.sre.naming.BehaviorSchemeNameParser
import io.sarl.sre.naming.ContextSchemeNameParser
import io.sarl.sre.naming.ISchemeNameParser
import io.sarl.sre.naming.ServiceSchemeNameParser
import io.sarl.sre.naming.SkillSchemeNameParser
import io.sarl.sre.naming.SpaceSchemeNameParser
import java.lang.annotation.Retention
import java.lang.annotation.Target

import static extension com.google.inject.multibindings.Multibinder.*

/**
 * Module for the scheme name parsers.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SchemeNameParserModule extends AbstractModule {

	protected override configure {
		var ens = binder.newSetBinder(typeof(ISchemeNameParser), typeof(SchemeNameParsers))
		ens.addBinding.to(typeof(ServiceSchemeNameParser))
		ens.addBinding.to(typeof(ContextSchemeNameParser))
		ens.addBinding.to(typeof(SpaceSchemeNameParser))
		ens.addBinding.to(typeof(AgentSchemeNameParser))
		ens.addBinding.to(typeof(SkillSchemeNameParser))
		ens.addBinding.to(typeof(BehaviorSchemeNameParser))		
	}

}

/** 
 * Annotation to mark the set of scheme name parsers.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
@Target(PARAMETER, FIELD)
@Retention(RUNTIME)
@BindingAnnotation
annotation SchemeNameParsers {
	//
}

/** Provider of the module for the scheme name parser.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.10
 */
class SchemeNameParserModuleProvider implements BQModuleProvider {

	override module : Module {
		return new SchemeNameParserModule
	}

	override moduleBuilder : BQModule.Builder {
		return BQModule::builder(module).overrides(overrides).providerName(name).configs(configs).description(
			Messages::SchemeNameParserModuleProvider_0);
	}

}

