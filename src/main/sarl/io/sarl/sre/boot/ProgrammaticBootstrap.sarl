/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot

import io.sarl.bootstrap.SRE
import io.sarl.bootstrap.SREBootstrap
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import java.util.UUID

import static io.sarl.bootstrap.SRE.*
import io.bootique.Bootique
import com.google.inject.Module
import io.sarl.sre.Kernel
import io.sarl.sre.boot.injection.modules.InjectionConstants
import io.bootique.BQRuntime
import com.google.inject.Injector
import io.sarl.sre.services.lifecycle.LifecycleService
import io.sarl.sre.boot.factories.Factories
import io.sarl.sre.boot.factories.BootFactory
import io.sarl.sre.boot.factories.RootContextType
import io.sarl.sre.boot.factories.LoggingFactory
import io.sarl.sre.services.lifecycle.KernelAgentLifecycleListener
import io.bootique.config.ConfigurationFactory
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * This is the class that permits to boot programmatically the SRE platform with the Bootique API.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.7.0
 */
class ProgrammaticBootstrap implements SREBootstrap {

	@Accessors(PUBLIC_GETTER)
	var kernel : Kernel

	@Accessors(PUBLIC_GETTER)
	var runtime : BQRuntime

	var bootAgent : UUID

	var bootType : RootContextType = null

	/** Create a bootique instance.
	 * 
	 * @return the bootique instance.
	 */
	protected def newBootiqueInstance : Bootique {
		return Bootique.app
	}

	/** Start the agent framework without agent.
	 * 
	 * @param bootique the Bootique instance to set up the framework. If it is {@code null},
	 * the default Bootique instance is created.
	 * @param module the injection module to use. If it is {@code null}, the default module is used.
	 */
	def startWithoutAgent(bootique : Bootique = null, module : Class<? extends Module> = null) : AgentContext {
		var kern = this.kernel
		if (kern === null) {
			var old : String = null
			if (this.bootType !== null) {
				old = System::setProperty(Factories::toPropertyName(BootFactory::ROOT_CONTEXT_BOOT_TYPE_NAME),
					this.bootType.name)
				this.bootType = null
			}
			try {
				var nbootique = bootique ?: newBootiqueInstance
				var mod = module ?: InjectionConstants::DEFAULT_ROOT_INJECTION_MODULE
				nbootique = nbootique.module(mod).autoLoadModules
				this.runtime = nbootique.createRuntime
				val injector = this.runtime.getInstance(typeof(Injector))
				kern = injector.getInstance(typeof(Kernel))
				val listener : KernelAgentLifecycleListener = [
					kernel = null
					runtime = null
					bootAgent = null
				]
				kern.getService(typeof(LifecycleService)).addKernelAgentLifecycleListener(listener)
				this.kernel = kern
			} finally {
				if (old !== null) {
					System::setProperty(Factories::toPropertyName(BootFactory::ROOT_CONTEXT_BOOT_TYPE_NAME), old)
				}
			}
		}
		// Force the bootstrap to be this object
		SRE::bootstrap = this
		return kern.rootContext
	}

	override startAgent(agentCls : Class<? extends Agent>, params : Object*) : UUID {
		if (this.kernel === null) {
			val propName = Factories::toPropertyName(BootFactory::BOOT_AGENT_NAME)
			val old = System::setProperty(propName, agentCls.name)
			try {
				startWithoutAgent
			} finally {
				if (old === null) {
					System::clearProperty(propName)
				} else {
					System::setProperty(propName, old)
				}
			}
		}
		var id = this.kernel.spawn(agentCls, params)
		if (this.bootAgent === null) {
			this.bootAgent = id
		}
		return id
	}

	override startAgent(nbAgents : int, agentCls : Class<? extends Agent>, params : Object*) : Iterable<UUID> {
		if (this.kernel === null) {
			val propName = Factories::toPropertyName(BootFactory::BOOT_AGENT_NAME)
			val old = System::setProperty(propName, agentCls.name)
			try {
				startWithoutAgent
			} finally {
				if (old === null) {
					System::clearProperty(propName)
				} else {
					System::setProperty(propName, old)
				}
			}
		}
		var ids = this.kernel.spawn(nbAgents, agentCls, params)
		if (this.bootAgent === null) {
			val iterator = ids.iterator
			if (iterator.hasNext) {
				this.bootAgent = iterator.next
			}
		}
		return ids
	}

	/** Start the boot agent if it is specified in the boot configuration.
	 */
	def startBootAgent : UUID {
		var factory = this.runtime.getInstance(typeof(ConfigurationFactory))
		var bootFactory = BootFactory::getConfigurationFactory(factory)
		var bootAgent = bootFactory.getBootAgent(this.class.classLoader)
		assert bootAgent !== null
		var args = bootFactory.commandLineArgs;
		startAgent(bootAgent, args)
	}

	override getBootAgentIdentifier : UUID {
		this.bootAgent
	}

	override setRandomContextUUID {
		this.bootType = RootContextType::RANDOM_CONTEXT_ID
	}

	override setBootAgentTypeContextUUID {
		this.bootType = RootContextType::BOOT_AGENT_NAME_CONTEXT_ID
	}

	override setDefaultContextUUID {
		this.bootType = RootContextType::DEFAULT_CONTEXT_ID
	}

	override setVerboseLevel(level : int) {
		var lvl = if(level < 0) 0 else level
		System::setProperty(Factories::toPropertyName(LoggingFactory::VERBOSE_LEVEL_NAME), Integer::toString(lvl))
	}

}
