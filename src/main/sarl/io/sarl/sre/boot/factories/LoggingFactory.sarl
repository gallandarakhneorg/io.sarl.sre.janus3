/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.factories

import java.util.logging.Level
import io.bootique.config.ConfigurationFactory
import org.eclipse.xtend.lib.annotations.Accessors
import io.sarl.sre.services.logging.LoggerCreator

/**
 * Configuration factory for specifying the logging configuration.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
class LoggingFactory {

	/** 
	 * Prefix for the configuration entries of the logging modules.
	 */
	public static val LOGGING_PREFIX = Factories::SARL_ROOT_PROPERTY_PREFIX + "logging"

	/** 
	 * Name of the property that contains the verbosity level of the SRE.
	 * 
	 * @see #VERBOSE_LEVEL_VALUE
	 */
	public static val VERBOSE_LEVEL_NAME = LOGGING_PREFIX + ".level"

	/** 
	 * The default verbosity level of the SRE.
	 * 
	 * @see #VERBOSE_LEVEL_NAME
	 */
	public static val VERBOSE_LEVEL_VALUE = "info"

	/** 
	 * Name of the property that contains the verbosity level of the SRE.
	 * 
	 * @see #VERBOSE_LEVEL_VALUE
	 */
	public static val FORMAT_NAME = LOGGING_PREFIX + ".format"

	
	/** Name of the property that contains the logging format within the JRE logging system.
	 */
	public static val JRE_FORMAT_PROPERTY_KEY = "java.util.logging.SimpleFormatter.format"

	/** 
	 * The parameters for the format string are:
	 * <ul>
	 * <li><code>%1</code>: the date,</li>
	 * <li><code>%2</code>: the name of the calling function,</li>
	 * <li><code>%3</code>: the name of the logger,</li>
	 * <li><code>%4</code>: the logging level,</li>
	 * <li><code>%5</code>: the message, and</li>
	 * <li><code>%6</code>: the throwable.</li>
	 * </ul>
	 */
	public static val LOG_FORMAT = "[%4$s, %1$tl:%1$tM:%1$tS%1$tp, %3$s] %5$s%6$s%n"

	var level : String
	var levelObject : Level

	@Accessors
	var format : String = LOG_FORMAT

	/** Replies the configuration factory for the logging.
	 * 
	 * @param configFactory the general configuration factory.
	 * @return the logging configuration factory.
	 */
	static def getConfigurationFactory(configFactory : ConfigurationFactory) : LoggingFactory {
		assert configFactory !== null
		configFactory.config(typeof(LoggingFactory), LOGGING_PREFIX)
	}

	/** 
	 * Replies the verbosity level.
	 * 
	 * @return the verbose level
	 */
	def setLevel(level : String) {
		var levelObject = LoggerCreator::parseLoggingLevel(level)
		this.level = levelObject.name.toLowerCase
		this.levelObject = levelObject
	}

	/** 
	 * Replies the verbosity level.
	 * 
	 * @return the verbose level
	 */
	def getLevel : String {
		if (this.level === null) {
			this.level = VERBOSE_LEVEL_VALUE
			this.levelObject = null
		}
		return this.level
	}

	/** 
	 * Replies the verbosity level.
	 * 
	 * @return the verbose level
	 */
	def getLevelObject : Level {
		if (this.levelObject === null) {
			this.levelObject = LoggerCreator::parseLoggingLevel(getLevel)
		}
		return this.levelObject
	}

}
