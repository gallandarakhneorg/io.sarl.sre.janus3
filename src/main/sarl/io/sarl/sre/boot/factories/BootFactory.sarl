/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.sre.boot.factories

import com.google.inject.Inject
import io.bootique.annotation.Args
import io.bootique.config.ConfigurationFactory
import io.sarl.lang.core.Agent
import java.util.UUID
import org.eclipse.xtend.lib.annotations.Accessors

/** 
 * Configuration factory for specifying the SARL booting parameters.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
class BootFactory {

	/** 
	 * Prefix for the configuration entries of the boot modules.
	 */
	public static val BOOT_PREFIX = Factories::SARL_ROOT_PROPERTY_PREFIX + "boot"

	/** 
	 * Name of the property that contains the agent to boot.
	 */
	public static val BOOT_AGENT_NAME = BOOT_PREFIX + ".bootAgent"

	/** 
	 * Name of the property that contains the identifier of the root context.
	 * 
	 * @see #ROOT_CONTEXT_ID_VALUE
	 */
	public static val ROOT_CONTEXT_ID_NAME = BOOT_PREFIX + ".rootContextId"

	/** 
	 * The default value for the root context identifier.
	 * 
	 * @see #ROOT_CONTEXT_ID_NAME
	 */
	public static val ROOT_CONTEXT_ID_VALUE = "2c38fb7f-f363-4f6e-877b-110b1f07cc77"

	/** 
	 * Name of the property that contains the identifier for the default space of the root context.
	 * 
	 * @see #ROOT_DEFAULT_SPACE_ID_VALUE
	 */
	public static val ROOT_DEFAULT_SPACE_ID_NAME = BOOT_PREFIX + ".rootSpaceId"

	/** 
	 * The default value for the root default space identifier.
	 * 
	 * @see #ROOT_DEFAULT_SPACE_ID_NAME
	 */
	public static val ROOT_DEFAULT_SPACE_ID_VALUE = "7ba8885d-545b-445a-a0e9-b655bc15ebe0"

	/** 
	 * Name of the property that contains the name of the SRE main program from the external point of view.
	 * 
	 * @see #PROGRAM_NAME_VALUE
	 */
	public static val PROGRAM_NAME_NAME = BOOT_PREFIX + ".programName"

	/** Default value of the property that contains the name of the SRE
	 * main program from the external point of view.
	 * 
	 * @see #PROGRAM_NAME
	 */
	public static val PROGRAM_NAME_VALUE = "SARL Run-time Environment"

	/** 
	 * Name of the property that contains the type of root context at boot.
	 * 
	 * @see #ROOT_CONTEXT_BOOT_TYPE_VALUE
	 */
	public static val ROOT_CONTEXT_BOOT_TYPE_NAME = BOOT_PREFIX + ".rootContextBootType"

	/** Default value of the property that contains the type of root context at boot.
	 * 
	 * @see #PROGRAM_NAME
	 */
	public static val ROOT_CONTEXT_BOOT_TYPE_VALUE = RootContextType::DEFAULT_CONTEXT_ID

	@Args
	@Inject
	@Accessors(PUBLIC_SETTER)
	var commandLineArguments : String[]

	var bootAgent : String

	var rootContextBootType : RootContextType

	var rootContextID : UUID

	var rootSpaceID : UUID

	var programName : String
	
	/** Replies the configuration factory for the boot.
	 * 
	 * @param configFactory the general configuration factory.
	 * @return the boot configuration factory.
	 */
	static def getConfigurationFactory(configFactory : ConfigurationFactory) : BootFactory {
		assert configFactory !== null
		configFactory.config(typeof(BootFactory), BOOT_PREFIX)
	}

	/** Replies the name of the agent to launch at boot time.
	 *
	 * @return the qualified name of the name.
	 */
	def getBootAgent : String {
		return this.bootAgent.extractBootAgent
	}

	/** Set the name of the agent to launch at boot time.
	 * 
	 * @param name the qualified name of the name.
	 */
	def setBootAgent(name : String) {
		this.bootAgent = name.extractBootAgent
	}

	private def extractBootAgent(name : String) : String {
		if (!name.isNullOrEmpty) {
			return name
		}
		if (this.commandLineArguments === null || this.commandLineArguments.length == 0) {
			throw new NoBootAgentNameException
		}
		var nm = this.commandLineArguments.get(0)
		if (nm.isNullOrEmpty) {
			throw new NoBootAgentNameException
		}
		return nm
	}

	/** Replies the type of the agent to launch at boot time.
	 *
	 * @param classLoader the class loader to use for retrieving the agent type.
	 * @return the agent type.
	 */
	def getBootAgent(classLoader : ClassLoader) : Class<? extends Agent> {
		var type = classLoader.loadClass(getBootAgent)
		if (type !== null && typeof(Agent).isAssignableFrom(type)) {
			return type.asSubclass(typeof(Agent))
		}
		throw new InvalidAgentNameException
	}

	/** Replies the command line arguments to pass to the boot agent.
	 * 
	 * @return the command line arguments.
	 */
	def getCommandLineArgs() : Object[] {
		if (this.commandLineArguments === null || this.commandLineArguments.length <= 1) {
			return #[]
		}
		var newTab = newArrayOfSize(this.commandLineArguments.length - 1)
		System::arraycopy(this.commandLineArguments, 1, newTab, 0, newTab.length)
		return newTab
	}

	/** 
	 * Replies the identifier of the root context.
	 * 
	 * @return the context identifier
	 */
	def getRootContextID() : UUID {
		if (this.rootContextID === null) {
			this.rootContextID = computeRootContextID
		}
		return this.rootContextID
	}

	/** 
	 * Set the identifier of the root context.
	 * 
	 * @param id the context identifier
	 */
	def setRootContextID(id : UUID) : void {
		if (id === null) {
			this.rootContextID = computeRootContextID
		} else {
			this.rootContextID = id
		}
	}

	private def computeRootContextID : UUID {
		switch (getRootContextBootType) {
			case BOOT_AGENT_NAME_CONTEXT_ID: {
				var name = getBootAgent
				if (name.isNullOrEmpty) {
					return UUID::randomUUID
				}
				return UUID::nameUUIDFromBytes(name.bytes)
			}
			case RANDOM_CONTEXT_ID: {
				return UUID::randomUUID
			}
			case DEFAULT_CONTEXT_ID: {
				return ROOT_CONTEXT_ID_VALUE.parseUUID
			}
		}
		throw new IllegalStateException
	}

	/** 
	 * Construct an identifier for the root default space.
	 * 
	 * @return the space ID
	 */
	def getRootSpaceID() : UUID {
		ensureRootSpaceIDValue
		return this.rootSpaceID
	}

	/** 
	 * Set the identifier for the root default space.
	 * 
	 * @param id the space ID
	 */
	def setRootSpaceID(id : UUID) {
		this.rootSpaceID = id
		ensureRootSpaceIDValue
	}

	private def ensureRootSpaceIDValue {
		if (this.rootSpaceID === null) {
			this.rootSpaceID = ROOT_DEFAULT_SPACE_ID_VALUE.parseUUID
		}
	}

	private static def parseUUID(value : String) : UUID {
		assert !value.nullOrEmpty
		try {
			return UUID::fromString(value)
		} catch (exception : Throwable) {
			return UUID::nameUUIDFromBytes(value.bytes)
		}
	}

	/** Replies the name of the SRE main program from the external point of view.
	 *
	 * @return the name of the program.
	 */
	def getProgramName : String {
		ensureProgramName
		return this.programName
	}

	/** Set the name of the SRE main program from the external point of view.
	 * 
	 * @param name the name of the program.
	 */
	def setProgramName(name : String) {
		this.programName = name
		ensureProgramName
	}

	private def ensureProgramName {
		if (this.programName === null) {
			this.programName = PROGRAM_NAME_VALUE
		}
	}

	/** 
	 * Replies the type of id computation for the root context.
	 * 
	 * @return the type of id computation.
	 */
	def getRootContextBootType() : RootContextType {
		ensureRootContextBootType
		return this.rootContextBootType
	}

	/** 
	 * Set the type of id computation for the root context.
	 * 
	 * @param type the type of id computation.
	 */
	def setRootContextBootType(type : RootContextType) {
		this.rootContextBootType = type
		ensureRootContextBootType
	}

	private def ensureRootContextBootType {
		if (this.rootContextBootType === null) {
			this.rootContextBootType = RootContextType::DEFAULT_CONTEXT_ID
		}
	}

}

/** 
 * The name of the boot agent is not provided, e.g. on the command line.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
class NoBootAgentNameException extends RuntimeException {
	//
}

/** 
 * The name of the boot agent is not a sub-type of {@code Agent}.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
class InvalidAgentNameException extends RuntimeException {
	//
}
