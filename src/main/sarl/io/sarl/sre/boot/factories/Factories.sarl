/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2018 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.sre.boot.factories

/**
 * Constants and utilities for all factories.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.8.0
 */
final class Factories {

	private new {
	}

	/** 
	 * Prefix {@code sarl.} for properties.
	 */
	public static val SARL_ROOT_PROPERTY_PREFIX = "sarl."

	/** 
	 * Prefix {@code bq.} for properties.
	 */
	public static val BOOTIQUE_PROPERTY_PREFIX = "bq."
	
	/** Replies the name of an property that corresponds to the name of a bootique variable.
	 * 
	 * @param bootiqueVariable the name of the bootique variable.
	 * @return the name of the property. 
	 */
	static def toPropertyName(bootiqueVariable : String) : String {
		if (bootiqueVariable.isNullOrEmpty) {
			return null;
		}
		return BOOTIQUE_PROPERTY_PREFIX + bootiqueVariable;
	}

	/** Replies the name of an environment variable that corresponds to the name of a bootique variable.
	 * 
	 * @param bootiqueVariable the name of the bootique variable.
	 * @return the name of the environment variable. 
	 */
	static def toEnvironmentVariableName(bootiqueVariable : String) : String {
		if (bootiqueVariable.isNullOrEmpty) {
			return null;
		}
		return bootiqueVariable.toUpperCase.replaceAll("[^a-zA-Z0-9_]+", "_")
	}

}
