/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.services.context

import com.google.inject.ImplementedBy
import io.janusproject.sre.KernelScope
import io.janusproject.sre.services.logging.LoggingService
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID
import javax.inject.Inject
import javax.inject.Provider

/** 
 * Implementation of an agent context in the Janus platform.
 * 
 * <p>This class is thread-safe.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class JanusContext implements AgentContext {

	val id : UUID

	val defaultSpaceID : UUID

	val isRoot : boolean

	volatile var repositoryInstance : SpaceRepository

	volatile var defaultSpaceInstance : OpenEventSpace

	var repositoryProvider : Provider<SpaceRepository>

	var logger : LoggingService

	/** Emitter of the platform events: SpaceCreated, SpaceDestroy */
	var platformEventEmitter : SpaceRepositoryListener

	var spaceEventEmitterFactory : SpaceRepositoryListenerFactory

	/** 
	 * Constructs a <code>JanusContext</code>.
	 *
	 * @param id identifier of the context.
	 * @param defaultSpaceID identifier of the default space in the context.
	 */
	new (id : UUID, defaultSpaceID : UUID, rootContext : boolean) {
		this.id = id
		this.defaultSpaceID = defaultSpaceID
		this.isRoot = rootContext
	}

	/** Replies if the context is a root context.
	 *
	 * <p>A root context is associated to the platform kernel agent, which is not created into memory.
	 * For example, it means that there is no parent registered into the default space.
	 *
	 * @return {@code true} if the context is a root context.
	 */
	def isRootContext : boolean {
		this.isRoot
	}

	/** Change the repository provider.
	 *
	 * @param provider the provider.
	 */
	@Inject
	def setRepositoryProvider(provider : Provider<SpaceRepository>) {
		this.repositoryProvider = provider
	}

	/** Change the repository provider.
	 * 
	 * @param provider the provider.
	 */
	@Inject
	def setLoggingService(logger : LoggingService) {
		this.logger = logger
	}

	/** Change the provider of the spave event emitter.
	 *
	 * @param provider the provider.
	 */
	@Inject
	def setSpaceRepositiroyListenerFactory(@KernelScope factory  : SpaceRepositoryListenerFactory) {
		assert factory !== null
		this.spaceEventEmitterFactory = factory
	}

	def getID : UUID {
		this.id
	}

	def toString : String {
		this.id.toString
	}

	private def getPlatformEventEmitter : SpaceRepositoryListener {
		var instance = this.platformEventEmitter
		if (instance === null) {
			instance = this.spaceEventEmitterFactory.create(ID, defaultSpace, this.logger.kernelLogger)
			this.platformEventEmitter = instance
		}
		return instance
	}

	private def ensureRepository : SpaceRepository {
		var instance = this.repositoryInstance
		// Create the repository
		var addListener = false
		if (instance === null) {
			instance = this.repositoryProvider.get
			this.repositoryInstance = instance
			addListener = true
		}
		// Create the repository
		var ds = this.defaultSpaceInstance
		if (ds === null) {
			var spaceID = new SpaceID(ID, this.defaultSpaceID, typeof(OpenEventSpaceSpecification))
			ds = instance.getOrCreateSpaceWithID(spaceID, typeof(OpenEventSpaceSpecification))
		}
		this.defaultSpaceInstance = ds
		if (addListener) {
			instance.addSpaceRepositoryListener(getPlatformEventEmitter)
		}
		return instance
	}
	/** 
	 * Initialize the context when it is published to the agents.
	 */
	def initialize {
	}
	
	/** 
	 * Destroy any associated resources.
	 */
	def destroy {
		this.platformEventEmitter = null
		this.defaultSpaceInstance = null
		var instance = this.repositoryInstance
		if (instance !== null) {
			instance.destroy
			instance.removeSpaceRepositoryListener(getPlatformEventEmitter)
		}
		this.repositoryInstance = null
		this.repositoryProvider = null
		this.logger = null
	}

	def getDefaultSpace : OpenEventSpace {
		ensureRepository
		return this.defaultSpaceInstance
	}

	def getSpace(spaceUUID : UUID) : S with S extends Space {
		var repo = ensureRepository
		if (this.defaultSpaceID == spaceUUID) {
			return this.defaultSpaceInstance as S
		}
		var spaceID = new SpaceID(ID, spaceUUID, null)
		return repo.getSpace(spaceID) as S
	}
	
	def getSpaces(spec : Class<? extends SpaceSpecification<S>>) : SynchronizedIterable<S> with S extends Space {
		ensureRepository.getSpaces(spec)
	}

	def getSpaces : SynchronizedIterable<? extends Space> {
		ensureRepository.getSpaces
	}

	def createSpace(spec : Class<? extends SpaceSpecification<S>>, spaceUUID : UUID,
			creationParams : Object*) : S with S extends Space {
		// If the space identifier corresponds to the default space, get the default space (by accessing the cache attribute)
		var instance = ensureRepository
		if (spaceUUID == this.defaultSpaceID) {
			return this.defaultSpaceInstance as S
		}
		var spaceID = new SpaceID(ID, spaceUUID, spec)
		return instance.createSpace(spaceID, spec, creationParams)
	}

	def getOrCreateSpaceWithSpec(spec : Class<? extends SpaceSpecification<S>>, spaceUUID : UUID,
			creationParams : Object*) : S with S extends Space {
		var instance = ensureRepository
		if (typeof(OpenEventSpaceSpecification).isAssignableFrom(spec)) {
			return this.defaultSpaceInstance as S
		}
		var spaceID = new SpaceID(ID, spaceUUID, spec)
		return instance.getOrCreateSpaceWithSpec(spaceID, spec, creationParams)
	}

	def getOrCreateSpaceWithID(spec : Class<? extends SpaceSpecification<S>>, spaceUUID : UUID,
			creationParams : Object*) : S with S extends Space {
		var instance = ensureRepository
		if (this.defaultSpaceID == spaceUUID) {
			return this.defaultSpaceInstance as S
		}
		var spaceID = new SpaceID(ID, spaceUUID, spec)
		return instance.getOrCreateSpaceWithID(spaceID, spec, creationParams)
	}

	/** Add listener on the space repository changes.
	 * 
	 * @param listener
	 */
	def addSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		ensureRepository.addSpaceRepositoryListener(listener)
	}
	/** Remove listener on the space repository changes.
	 * 
	 * @param listener
	 */
	def removeSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		var instance = this.repositoryInstance
		if (instance !== null) {
			instance.removeSpaceRepositoryListener(listener)
		}
	}

}

/** 
 * Factory of Janus contexts.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 2.0.6.0
 */
@ImplementedBy(typeof(DefaultContextFactory))
interface ContextFactory {

	/** Create an instance of Janus context.
	 *
	 * @param contextID the identifier of the context.
	 * @param defaultSpaceID the identifier of the defualt space into the context.
	 * @param rootContext indicates if the context should be marked as the root context, or not.
	 */
	def newInstance(contextID : UUID, defaultSpaceID : UUID, rootContext : boolean) : JanusContext
	
}

/** 
 * Factory of Janus contexts.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 2.0.6.0
 */
class DefaultContextFactory implements ContextFactory {

	override newInstance(contextID : UUID, defaultSpaceID : UUID, rootContext : boolean) : JanusContext {
		new JanusContext(contextID, defaultSpaceID, rootContext)
	}
	
}
