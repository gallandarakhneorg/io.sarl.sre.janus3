/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.services.context

import com.google.inject.Injector
import io.janusproject.sre.JanusConfig
import io.janusproject.sre.services.executor.ExecutorService
import io.janusproject.sre.spaces.AbstractSpace
import io.janusproject.sre.spaces.SpaceListener
import io.sarl.lang.annotation.PrivateAPI
import io.sarl.lang.core.SREutils
import io.sarl.lang.core.Space
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.lang.util.SynchronizedIterable
import io.sarl.util.Collections3
import io.sarl.util.Comparators
import java.io.Serializable
import java.util.Collections
import java.util.EventListener
import java.util.Map
import java.util.Set
import java.util.UUID
import java.util.concurrent.TimeUnit
import javax.inject.Inject
import org.arakhne.afc.util.ListenerCollection
import io.sarl.lang.core.EventSpace
import java.util.logging.Logger

/** 
 * A repository of spaces specific to a given context.
 * 
 * <p>This repository is thread-safe.
 * 
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("use_reserved_sarl_annotation")
@PrivateAPI(isCallerOnly = true)
abstract class SpaceRepository implements SpaceListener {

	val injector : Injector

	val executor : ExecutorService

	val destroyDelay : int

	val mutexInstance = new Object

	val listeners = new ListenerCollection<SpaceRepositoryListener>

	val spacesBySpec = <Class<? extends SpaceSpecification<?>>, Set<SpaceDescription>>newTreeMap(Comparators::classComparator)

	/** Constructor.
	 *
	 * @param injector the injector.
	 * @param executor the asynchronous execution service.
	 */
	@Inject
	new (injector : Injector, executor : ExecutorService) {
		this.injector = injector
		this.executor = executor
		this.destroyDelay = JanusConfig::getSystemPropertyAsInteger(
			JanusConfig::SPACE_KEEP_ALIVE_DURATION_NAME, JanusConfig::SPACE_KEEP_ALIVE_DURATION_VALUE)
	}

	/** Replies the internal map that contains the spaces */
	protected abstract def getSharedStructure : Map<UUID, SpaceDescription>

	/** Create a space description.
	 *
	 * <p>This function should be overridden by the sub-types.
	 *
	 * @param id the space identifier.
	 * @param space the space instance.
	 * @return the description.
	 */
	protected def createSpaceDescription(id : SpaceID, ^space : Space) : SpaceDescription {
		new SpaceDescription(id, ^space)
	}

	/** Replies the mutex for changing the internal data structures, except for the destroyable spaces. */
	protected def getMutex : Object {
		this.mutexInstance
	}

	/** Replies the space information associated to the space if already associated.
	 *
	 * <p>This function is not thread-safe.
	 *
	 * @param newDescription the description to associated to the space.
	 * @return the space description, or {@code null}
	 */
	protected def life(^space : Space, newDescription : SpaceDescription) : SpaceDescription {
		if (^space instanceof AbstractSpace) {
			if (newDescription !== null) {
				SREutils::setSreSpecificData(^space, newDescription)
				return newDescription
			}
			return SREutils::getSreSpecificData(^space, typeof(SpaceDescription))
		}
		return null
	}
	
	/** Replies the space information associated to the space identifier if already associated.
	 * 
	 * <p>This function is not thread-safe.
	 * 
	 * @param newDescription the description to associated to the space.
	 * @return the space description, or {@code null}
	 */
	protected def life(spaceId : SpaceID, newDescription : SpaceDescription) : SpaceDescription {
		if (newDescription !== null) {
			SREutils::setSreSpecificData(spaceId, newDescription)
			return newDescription
		}
		return SREutils::getSreSpecificData(spaceId, typeof(SpaceDescription))
	}

	
	private def createSpaceFirstInstance(spec : Class<? extends SpaceSpecification<S>>, spaceID : SpaceID,
			creationParams : Object[]) : S with S extends Space {
		assert spaceID.spaceSpecification === null || spaceID.spaceSpecification == spec, "The specification type is invalid"
		val ^space = this.injector.getInstance(spec).create(spaceID, creationParams)
		assert ^space !== null
		val id = ^space.spaceID
		assert id !== null
		val description = createSpaceDescription(id, ^space)
		^space.life(description)
		id.life(description)
		val spaces = sharedStructure
		synchronized (mutex) {
			var list =  this.spacesBySpec.get(id.spaceSpecification)
			if (list === null) {
				list = newTreeSet(null)
				this.spacesBySpec.put(id.spaceSpecification, list)
			}
			list += description
			spaces.put(id.ID, description)
		}
		if (^space instanceof AbstractSpace) {
			^space.spaceListenerIfNone = this
		}
		^space.fireSpaceAdded(true)
		return ^space
	}
	
	/** Synchronize the internal structures of SpaceRepository with the content of
	 * {@link #getSharedStructure()}.
	 *
	 * <p>This function is thread-safe.
	 * 
	 * <p>Caution: Do not call this function if you are not certain it does the expected things.
	 */
	def refreshInternalStructures : void {
		synchronized (mutex) {
			this.spacesBySpec.clear
			for (description : this.sharedStructure.values) {
				var ^space = description.^space
				var spaceId = ^space.spaceID
				^space.life(description)
				spaceId.life(description)
				var list = this.spacesBySpec.get(spaceId.spaceSpecification)
				if (list === null) {
					list = newTreeSet(null)
					this.spacesBySpec.put(spaceId.spaceSpecification, list)
				}
				list += description
				if (^space instanceof AbstractSpace) {
					^space.spaceListenerIfNone = this
				}
			}
		}
	}

	private def ensureSpaceInstance(description : SpaceDescription) : Space {
		assert description !== null
		if (description.getSpace === null) {
			val id = description.spaceID
			assert id !== null
			val ^space = this.injector.getInstance(id.spaceSpecification).create(id)
			assert ^space !== null
			description.setSpace = ^space
			^space.life(description)
			id.life(description)
			^space.fireSpaceAdded(false)
		}
		return description.getSpace
	}

	/** 
	 * Destroy this repository and release all the resources.
	 */
	final def destroy {
		synchronized (mutex) {
			safeDestroy
		}
		this.listeners.clear
	}

	/** 
	 * Destroy this repository and release all the resources inside a synchronized section.
	 */
	protected def safeDestroy {
		val spaces = sharedStructure
		var iterator  = spaces.values.iterator
		while (iterator.hasNext) {
			var description = iterator.next
			var ^space = description.^space
			description.^space = null
			^space.life(null)
			^space.spaceID.life(null)
			iterator.remove
		}
		this.spacesBySpec.clear
	}

	/** 
	 * Create a space.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space.
	 * @param spec specification of the space.
	 * @param creationParams creation parameters.
	 * @return the new space, or <code>null</code> if the space already exists.
	 */
	def createSpace(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		assert spaceID.spaceSpecification == spec, "The space identifier does not contains the same specification as the one given to the creation function"
		spec.createSpaceFirstInstance(spaceID, creationParams)
	}

	/** 
	 * Remove a space.
	 * 
	 * @param space the space.
	 */
	def removeSpace(^space : Space) {
		if (^space !== null) {
			var spaceID = ^space.spaceID
			var spaces = sharedStructure
			assert spaces !== null
			var description : SpaceDescription
			synchronized (mutex) {
				description = spaces.remove(spaceID.ID)
				if (description !== null) {
					var cousins = this.spacesBySpec.get(spaceID.spaceSpecification)
					if (cousins !== null) {
						cousins.remove(description)
					}
				}
			}
			^space.life(null)
			spaceID.life(null)
			if (description !== null) {
				description.^space = null
				^space.fireSpaceRemoved(true)
			}
		}
	}

	/** 
	 * Retrieve the first space of the given specification, or create a space if none.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space (used only when creating a space).
	 * @param spec specification of the space.
	 * @param creationParams creation parameters (used only when creating a space).
	 * @return the new space.
	 */
	def getOrCreateSpaceWithSpec(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		var ^space : Space = null
		synchronized (mutex) {
			var spaces = spacesBySpec.get(spec)
			if (spaces !== null && !spaces.empty) {
				var description = spaces.iterator.next
				^space = description.ensureSpaceInstance
			}
		}
		if (^space === null) {
			return spec.createSpaceFirstInstance(spaceID, creationParams)
		}
		return ^space as S
	}

	/** 
	 * Retrieve the first space of the given identifier, or create a space if none.
	 * 
	 * @param <S> - the type of the space to reply.
	 * @param spaceID ID of the space.
	 * @param spec specification of the space.
	 * @param creationParams creation parameters (used only when creating a space).
	 * @return the new space.
	 */
	def getOrCreateSpaceWithID(spaceID : SpaceID, spec : Class<? extends SpaceSpecification<S>>,
		creationParams : Object*) : S with S extends Space {
		val spaces = sharedStructure
		var description : SpaceDescription
		synchronized (mutex) {
			description = spaces.get(spaceID.ID)
		}
		if (description === null) {
			return spec.createSpaceFirstInstance(spaceID, creationParams)
		}
		return description.ensureSpaceInstance as S
	}

	/** 
	 * Returns the collection of all spaces stored in this repository.
	 * 
	 * @return the collection of all spaces stored in this repository.
	 */
	def getSpaces : SynchronizedIterable<? extends Space> {
		val spaces = sharedStructure
		synchronized (mutex) {
			var translated = spaces.values.map[it.ensureSpaceInstance]
			return Collections3::unmodifiableSynchronizedIterable(translated, mutex)
		}
	}

	/** 
	 * Returns the collection of all spaces with the specified {@link SpaceSpecification} stored in this repository.
	 * 
	 * @param <S> - type of the spaces to reply.
	 * @param spec the specification used to filter the set of stored spaces.
	 * @return the collection of all spaces with the specified {@link SpaceSpecification} stored in this repository
	 */
	def getSpaces(spec : Class<? extends SpaceSpecification<S>>) : SynchronizedIterable<S> with S extends Space {
		synchronized (mutex) {
			var spaces = this.spacesBySpec.get(spec)
			if (spaces !== null) {
				var mapped = spaces.map [it.ensureSpaceInstance as S]
				return Collections3::unmodifiableSynchronizedIterable(mapped, mutex)
			}
		}
		Collections3::synchronizedCollection(Collections::emptyList, new Object)
	}

	/** 
	 * Returns the first instance of a space with the specified SpaceID.
	 * 
	 * @param spaceID the identifier to retrieve.
	 * @return the space instance of <code>null</code> if none.
	 */
	def getSpace(spaceID : SpaceID) : Space {
		val spaces = sharedStructure
		synchronized (mutex) {
			var description = spaces.get(spaceID.ID)
			if (description !== null) {
				return description.ensureSpaceInstance
			}
		}
		return null
	}

	/** Add listener on the space repository changes.
	 *
	 * @param listener
	 */
	def addSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		this.listeners.add(typeof(SpaceRepositoryListener), listener)
	}

	/** Remove listener on the space repository changes.
	 * 
	 * @param listener
	 */
	def removeSpaceRepositoryListener(listener : SpaceRepositoryListener) {
		this.listeners.remove(typeof(SpaceRepositoryListener), listener)
	}

	/** 
	 * Notifies the listeners on the space creation.
	 * 
	 * @param space the created space.
	 * @param isLocalCreation indicates if the creation of the space was initiated on the current kernel.
	 */
	protected def fireSpaceAdded(^space : Space, isLocalCreation : boolean) {
		for (listener : this.listeners.getListeners(typeof(SpaceRepositoryListener))) {
			listener.spaceCreated(^space, isLocalCreation)
		}
	}

	/** 
	 * Notifies the listeners on the space destruction.
	 * 
	 * @param space the removed space.
	 * @param isLocalDestruction indicates if the destruction of the space was initiated on the current kernel.
	 */
	protected def fireSpaceRemoved(^space : Space, isLocalDestruction : boolean) {
		for (listener : this.listeners.getListeners(typeof(SpaceRepositoryListener))) {
			listener.spaceDestroyed(^space, isLocalDestruction)
		}
	}

	override destroyableSpace(^space : Space) {
		var run : Runnable = [
			var participants = ^space.participants
			var couldBeDestroyed : boolean
			synchronized (participants.mutex) {
				couldBeDestroyed = participants.empty
			}
			if (couldBeDestroyed) {
				removeSpace(^space)
			}
		]
		this.executor.schedule(this.destroyDelay, TimeUnit::SECONDS, run) 
	}

	/** 
	 * Description of a space.
	 * 
	 * @author $Author: sgalland$
	 * @version $FullVersion$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	public static class SpaceDescription implements Serializable, Comparable<SpaceDescription> {

		val id : SpaceID

		transient volatile var ^space : Space

		new (id : SpaceID, ^space : Space) {
			this.id = id
			this.^space = ^space
		}

		def getSpaceID : SpaceID {
			this.id
		}
		
		def getSpace : Space {
			this.^space
		}

		def setSpace(^space : Space) {
			this.^space = ^space
		}

		def equals(obj : Object) : boolean {
			if (obj instanceof SpaceDescription) {
				return this.id == obj.id
			}
			return false
		}

		def hashCode : int {
			this.id.hashCode
		}

		def compareTo(other : SpaceDescription) : int {
			if (other !== null) {
				return this.id <=> other.id
			}
			return Integer::MIN_VALUE
		}

	}

}

/** 
 * Listener on events related to the space repository.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface SpaceRepositoryListener extends EventListener {

	/** 
	 * Invoked when the space is added.
	 * 
	 * @param space reference to the created space.
	 * @param isLocalCreation indicates if the creation of the space was initiated on the current kernel.
	 */
	def spaceCreated(^space : Space, isLocalCreation : boolean)

	/**
	 * Invoked when the space is destroyed.
	 *
	 * @param space reference to the destroyed space.
	 * @param isLocalDestruction indicates if the destruction of the space was initiated on the current kernel.
	 */
	def spaceDestroyed(^space : Space, isLocalDestruction : boolean)

}

/** Factory for a space event emitter.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 2.0.7.0
 */
interface SpaceRepositoryListenerFactory {

	def create(contextID : UUID, defaultSpace : EventSpace, logger : Logger) : SpaceRepositoryListener

}
