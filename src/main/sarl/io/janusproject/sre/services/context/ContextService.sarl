/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.services.context

import io.janusproject.sre.services.DependentService
import io.sarl.core.ContextJoined
import io.sarl.core.ContextLeft
import io.sarl.core.MemberJoined
import io.sarl.core.MemberLeft
import io.sarl.lang.core.Agent
import io.sarl.lang.core.AgentContext
import io.sarl.lang.core.SpaceID
import java.util.EventListener
import java.util.UUID

/** 
 * This service enables to store the contexts and to manage the spaces in the Janus platform.
 * 
 * @author $Author: srodriguez$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface ContextService extends DependentService {

	/**
	 * Replies the root context.
	 *
	 * @return the root context.
	 */
	def getRootContext : JanusContext

	/** 
	 * Create a new context instance and do not register it into the repository.
	 * 
	 * @param contextID the id of the context to create.
	 * @param defaultSpaceID the id of the default space of the context to create.
	 * @param rootContext indicates if the created context is a root context.
	 * @return the context.
	 */
	def createContextWithoutRegistration(contextID : UUID, defaultSpaceID : UUID, rootContext : boolean) : JanusContext

	/**
	 * Create a new context instance and register it into the internal repository.
	 *
	 * @param contextID the id of the context to create.
	 * @param defaultSpaceID the id of the default space of the context to create.
	 * @return the context.
	 */
	def createContext(contextID : UUID, defaultSpaceID : UUID) : JanusContext

	/** 
	 * Replies an existing context instance.
	 * 
	 * @param contextID the id of the context to create
	 * @return the context, {@code null}.
	 */
	def getContext(contextID : UUID) : JanusContext
	/** 
	 * Remove the context instance.
	 * 
	 * @param contextID the id of the context to remove
	 * @return the removed context, {@code null}.
	 */
	def removeContext(contextID : UUID) : JanusContext

}

/** 
 * Listener on events related to the members of an external context.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface ExternalContextMemberListener extends EventListener {

	/** 
	 * Fires an {@link MemberJoined} event into the newly joined parent Context default space to notify other context's members
	 * that a new agent joined this context.
	 * 
	 * @param joinedContext the newly joined context to notify its members
	 * @param joinedContextSpaceId the identifier of the default space inside {@code joinedContext}.
	 * @param joiningAgentID the identifier of the new member.
	 * @param joiningAgentType the name of the agent type that has joined the context.
	 */
	def memberJoined(joinedContext : AgentContext, joinedContextSpaceId : SpaceID, joiningAgentID : UUID,
		joiningAgentType : String)

	/** 
	 * Fires an {@link MemberLeft} event into the default space of the Context that will be left to notify other context's members
	 * that an agent has left this context.
	 * 
	 * @param leftContext the context that will be left
	 * @param leftContextSpaceId the identifier of the default space inside {@code leftContext}.
	 * @param leftAgentID the identifier of the agent that has left the context.
	 * @param leftAgentType the name of the agent type that has left the context.
	 */
	def memberLeft(leftContext : AgentContext, leftContextSpaceId : SpaceID, leftMemberID : UUID,
		agentType : String)

}

/** 
 * Listener on events related to the membership within a context.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface InternalContextMembershipListener extends EventListener {

	/** 
	 * Fires an {@link ContextJoined} event into the Inner Context default space of the owner agent to notify behaviors/members
	 * that a new context has been joined.
	 * 
	 * @param futureContext ID of the newly joined context
	 * @param futureContextDefaultSpaceID ID of the default space of the newly joined context
	 */
	def contextJoined(futureContext : UUID, futureContextDefaultSpaceID : UUID)

	/** 
	 * Fires an {@link ContextLeft} event into the Inner Context Default space of the owner agent to notify behaviors/members that
	 * the specified context has been left.
	 * 
	 * @param contextID the ID of context that will be left
	 */
	def contextLeft(contextID : UUID)

}

/** 
 * Factory of the listeners on events related to the membership within a context.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 2.0.7.0
 */
interface InternalContextMembershipListenerFactory {

	/** Create a listener associated to the given agent.
	 *
	 * @param agent the agent to link to the provided listener.
	 * @return a listener.
	 */	
	def create(owner : Agent) : InternalContextMembershipListener

}
