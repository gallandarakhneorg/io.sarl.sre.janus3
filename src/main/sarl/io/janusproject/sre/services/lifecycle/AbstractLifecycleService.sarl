/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.services.lifecycle

import com.google.common.util.concurrent.Service
import io.janusproject.sre.KernelScope
import io.janusproject.sre.services.AbstractDependentService
import io.janusproject.sre.services.context.ExternalContextMemberListener
import io.janusproject.sre.services.context.JanusContext
import io.janusproject.sre.services.executor.ExecutorService
import io.janusproject.sre.services.logging.LoggingService
import io.sarl.lang.core.Agent
import io.sarl.sarlspecification.SarlSpecificationChecker
import java.text.MessageFormat
import java.util.ArrayList
import java.util.Collection
import java.util.List
import java.util.UUID
import javax.inject.Inject
import javax.inject.Provider
import javax.inject.Singleton
import org.arakhne.afc.util.ListenerCollection

import static extension io.janusproject.sre.services.lifecycle.AgentLife.*

/** 
 * Implementation of a spawning service that is based on the other services of the Janus platform.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
abstract class AbstractLifecycleService extends AbstractDependentService implements LifecycleService {

	/** Maximum number of agents to be launch by a single thread.
	 */
	static val CREATION_POOL_SIZE = 128

	val globalListeners : ListenerCollection<?> = new ListenerCollection

	val sarlSpecificationChecker : SarlSpecificationChecker

	val agentCreatorProvider : AgentCreatorProvider

	var skillUninstaller : SkillUninstaller

	var logger : LoggingService

	var platformLifecycleEventEmitter : LifecycleServiceListener

	var platformContextEventEmitter : ExternalContextMemberListener

	var executor : ExecutorService

	/** 
	 * Constructs the service.
	 * 
	 * @param sarlSpecificationChecker the tool for checking the validity of the SARL specification supported by
	 *     the agents to launch.
	 * @param creator the provider of agent creators that is used when spawning agents.
	 */
	new (sarlSpecificationChecker : SarlSpecificationChecker, creator : AgentCreatorProvider) {
		assert sarlSpecificationChecker !== null
		assert creator !== null
		this.sarlSpecificationChecker = sarlSpecificationChecker
		this.agentCreatorProvider = creator
	}

	final def getServiceType : Class<? extends Service> {
		typeof(LifecycleService)
	}

	/** Set the uninstaller of the builtin capacities.
	 */
	@Inject
	def setSkillUninstaller(provider : SkillUninstaller) {
		assert provider !== null
		this.skillUninstaller = provider
	}

	/** Set the backend logging service.
	 */
	@Inject
	def setLoggingService(service : LoggingService) {
		assert service !== null
		this.logger = service
	}

	/** Set the provider of the agent event emitter.
	 *
	 * @param provider the provider.
	 */
	@Inject
	def setLifecycleServiceListenerProvider(@KernelScope provider : Provider<LifecycleServiceListener>) {
		assert provider !== null
		this.platformLifecycleEventEmitter = provider.get
	}

	/** Set the provider of the context event emitter.
	 * 
	 * @param provider the provider.
	 */
	@Inject
	def setExternalContextMemberListenerProvider(@KernelScope provider : Provider<ExternalContextMemberListener>) {
		assert provider !== null
		this.platformContextEventEmitter = provider.get
	}

	/** Set the backend executor service.
	 */
	@Inject
	def setExecutorService(service : ExecutorService) {
		this.executor = service
	}

	def onStart {
		this.platformLifecycleEventEmitter.addLifecycleServiceListener
	}

	def onStop {
		this.platformLifecycleEventEmitter.removeLifecycleServiceListener
	}

	def getServiceDependencies : Collection<Class<? extends Service>> {
		#[typeof(LoggingService), typeof(ExecutorService)]
	}
	
	def addLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener) {
		this.globalListeners.add(typeof(LifecycleServiceListener), agentLifecycleListener)
	}

	def removeLifecycleServiceListener(agentLifecycleListener : LifecycleServiceListener) {
		this.globalListeners.remove(typeof(LifecycleServiceListener), agentLifecycleListener)
	}

	def addKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener) {
		this.globalListeners.add(typeof(KernelAgentLifecycleListener), listener)
	}

	def removeKernelAgentLifecycleListener(listener : KernelAgentLifecycleListener) {
		this.globalListeners.remove(typeof(KernelAgentLifecycleListener), listener)
	}

	/** Notify the listeners outside the parent context.
	 * 
	 * @param agents the destroyed agent.
	 * @param outerContexts the contexts in which the agent w destroyed.
	 */
	protected def fireAgentDestroy(^agent : Agent, outerContexts : Iterable<ContextReference>) {
		// Notify the listeners on the spawn events (not restricted to a single agent)
		for (listener : this.globalListeners.getListeners(typeof(LifecycleServiceListener))) {
			listener.agentDestroyed(^agent, outerContexts)
		}
	}
	
	/** Notify the listeners outside the parent context.
	 *
	 * @param spawningAgent the spawning agent.
	 * @param context the context in which the agents were spawned.
	 * @param agentClazz the type of the spawned agents.
	 * @param agents the spawned agents.
	 * @param initializationParameters the initialization parameters.
	 */
	protected def fireAgentSpawned(spawningAgent : UUID, context : JanusContext,
		agentClazz : Class<? extends Agent>, agents : List<Agent>, initializationParameters : Object*) {
		for (listener : this.globalListeners.getListeners(typeof(LifecycleServiceListener))) {
			listener.agentSpawned(spawningAgent, context, agentClazz, agents, initializationParameters)
		}
	}

	/**
	 * Notifies the listeners about the kernel agent destruction.
	 */
	protected def fireKernelAgentDestroy {
		for (listener : this.globalListeners.getListeners(typeof(KernelAgentLifecycleListener))) {
			listener.kernelAgentDestroyed
		}
	}

	def isKillableAgent(^agent : Agent) : boolean {
		try {
			var innerContext = ^agent.life.innerContext
			if (innerContext !== null) {
				var participants = innerContext.defaultSpace.getParticipants
				if (participants !== null) {
					synchronized (participants.mutex) {
						if (participants.size > 1 || (participants.size == 1 && !participants.contains(^agent.ID))) {
							return false
						} 
					}
				}
			}
			return true
		} catch (exception : Throwable) {
			return false
		}
	}

	def spawnAgent(nbAgents : int, spawningAgent : UUID, parent : JanusContext, agentId : UUID,
		agentClazz : Class<? extends Agent>, params : Object*) : SpawnResult {
		val agents = new ArrayList<Agent>(nbAgents)
		val errors = new ArrayList<Throwable>()
		if (this.running && nbAgents > 0) {
			// Create the list of the spawned agents during this function execution
			try {
				// Check if the version of the SARL agent class is compatible.
				if (this.sarlSpecificationChecker === null || !this.sarlSpecificationChecker.isValidSarlElement(agentClazz)) {
					errors += new InvalidSarlSpecificationException(agentClazz)
				} else {
					// Create the shared injector that is also able to create the agent instance.
					val agentInstanceCreator = this.agentCreatorProvider.getAgentCreator(agentClazz, parent.ID, agentId,
						nbAgents)
					// Create the block of code for creating a single agent
					val agentCreator : Runnable = [
						val ^agent = agentInstanceCreator.get()
						if (^agent === null) {
							throw new CannotSpawnException(agentClazz)
						}
						// Start the agent's life
						var life = ^agent.life
						try {
							if (life.start(this.skillUninstaller, this.logger, spawningAgent, parent, params)) {
								// Add the agent in the system. It is synchronized because additions may occur in parallel
								synchronized (agents) {
									agents += ^agent
								}
							} else if (parent.emptyRootContext) {
								// The agent seems to be the boot agent, and it has failed to be launched.
								// Moreover the root context is still empty.
								// The safer decision should be to stop the kernel.
								fireKernelAgentDestroy
							}
						} catch (e : Throwable) {
							errors += new CannotSpawnException(agentClazz, e)
						}
					]
					// Create a single agent with a sequential call; or multiple agents in parallel
					if (nbAgents > 1) {
						this.executor.executeBlockingTask(nbAgents, CREATION_POOL_SIZE, agentCreator)
					} else {
						agentCreator.run
					}
					// Fire the general spawning event
					if (!agents.empty) {
						fireAgentSpawningEvents(spawningAgent, parent, agentClazz, params, agents)
					}
				}
			} catch (e : CannotSpawnException) {
				errors += e
			} catch (e : Throwable) {
				errors += new CannotSpawnException(agentClazz, e)
			}
		} else {
			errors += new SpawnDisabledException(parent.ID, agentClazz)
		}
		return new SpawnResult(
			(agents.map[it.ID]).unmodifiableView,
			errors)
	}

	/** Fire the events related to the agent spawn.
	 *
	 * @param spawningAgent the creator.
	 * @param parent the context in which the agents are created.
	 * @param agentClazz the type of the spawned agents.
	 * @param spawnedAgents the spawnedAgents.
	 */
	protected def fireAgentSpawningEvents(spawningAgent : UUID, parent : JanusContext,
		agentClazz : Class<? extends Agent>, params : Object[], spawnedAgents : List<Agent>) {
		spawningAgent.fireAgentSpawned(parent, agentClazz, spawnedAgents, params)
		val spaceID = parent.defaultSpace.spaceID
		for (^agent : spawnedAgents) {
			this.platformContextEventEmitter.memberJoined(
				parent, spaceID,
				^agent.ID, agentClazz.name)
		}
	}

	/** Replies if the given context is the root context and is empty.
	 *
	 * @param context the agent context to test.
	 * @return {@code true} if the given context is the root context, and it is empty.
	 *     @Otherwise {@code false}.
	 */
	protected static def isEmptyRootContext(context : ContextReference) {
		context !== null && context.context.rootContext && context.defaultSpace.participants.empty
	}

	/** Replies if the given context is the root context and is empty.
	 * 
	 * @param context the agent context to test.
	 * @return {@code true} if the given context is the root context, and it is empty.
	 * @Otherwise {@code false}.
	 */
	protected static def isEmptyRootContext(context : JanusContext) {
		context !== null && context.rootContext && context.defaultSpace.participants.empty
	}

	
	def killAgent(^agent : Agent) : boolean {
		// We should check if it is possible to kill the agent BEFORE killing it.
		if (this.running && ^agent.isKillableAgent()) {
			var life = ^agent.life
			var defaultContext = life.defaultContext
			var contexts = life.stop(this.skillUninstaller, this.logger)
			fireAgentDestructionEvents(^agent, defaultContext, contexts)
			return true
		}

		return false
	}
	
	protected def fireAgentDestructionEvents(^agent : Agent, defaultContextBeforeKilled : ContextReference,
		leavedContexts : Iterable<ContextReference>) {
		// Leave the default context because the ExternalContextAccessSkill does not fire events related
		// to the default space.
		this.platformContextEventEmitter.memberLeft(
			defaultContextBeforeKilled.context,
			defaultContextBeforeKilled.addressInDefaultSpace.spaceID,
			^agent.ID, ^agent.class.name)
		// Fire the agent destroy event
		^agent.fireAgentDestroy(leavedContexts)
		// Test if the agent is the latest on this kernel.
		if (defaultContextBeforeKilled.emptyRootContext) {
			fireKernelAgentDestroy
		}
	}

}

/**
 * This exception is thrown when the agent to spawn is not generated according to a valid SARL specification version.
 *
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class InvalidSarlSpecificationException extends RuntimeException {

	new (agentType : Class<? extends Agent> ) {
		super(MessageFormat::format(Messages::InvalidSarlSpecificationException_0, agentType.name))
	}

}

/** 
 * This exception is thrown when the spawning service of agents is disabled.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
class SpawnDisabledException extends RuntimeException {

	/**
	 * @param parentID
	 *            - the identifier of the parent entity that is creating the agent.
	 * @param agentClazz
	 *            - the type of the agent to spawn.
	 */
	new (parentID : UUID, agentClazz : Class<? extends Agent>) {
		super(MessageFormat.format(Messages.SpawnDisabledException_0, parentID, agentClazz));
	}

}

/** 
 * Provider of agent creator.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface AgentCreatorProvider {

	/** Build an agent creator based on the given parameters.
	 *
	 * @param <T> the type of agent to create.
	 * @param agentClazz the type of agent to create.
	 * @param parent the identifier of the agents' parent.
	 * @param agentId the expected identifier of the created agent(s). If more than one agent will be created with the
	 *     same creator, then the first have will have the given identifier, and the other agents will have random id.
	 * @param nbAgents the number of agents to create.
	 */
	def getAgentCreator(agentClazz : Class<T>, parent : UUID, agentId : UUID, nbAgents : int) : Provider<T> with T extends Agent

}

