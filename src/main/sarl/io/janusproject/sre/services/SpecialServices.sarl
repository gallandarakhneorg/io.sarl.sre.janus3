/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.services

import com.google.common.util.concurrent.Service
import java.util.Collection
import java.util.Collections
import javax.inject.Singleton

/** 
 * This service could indicates if it could be used by another service.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface AsyncStateService extends Service {

	/** 
	 * Replies if the service is launched and ready for running.
	 * 
	 * <p>This functions differs from {@link Service#isRunning()}: this functions replies <code>true</code> if the service is running
	 * (similar to {@link Service#isRunning()}) AND the service considers it is ready to respond to other services.
	 * 
	 * @return <code>true</code> if ready.
	 */
	def isReadyForOtherServices : boolean

}

/** 
 * This service could be pre-released before it is stop.
 * It means that the service could release any resource before the
 * full stopping process is run.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 2.0.7.0
 */
interface PreReleasableService extends Service {

	/** 
	 * Invoked when the service should release resources prior to the shutdown process.
	 */
	def onPreStop

}

/** 
 * This service is dependent on other services.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
interface DependentService extends Service {

	/** 
	 * Replies the service interface implemented by this service.
	 * 
	 * @return the service interface.
	 */
	def getServiceType : Class<? extends Service>

	/** 
	 * Replies the services that must be launched BEFORE launching this service, and that must be stop AFTER stopping this
	 * service.
	 * 
	 * <p>If one of the dependencies is a {@link AsyncStateService}, this service will wait until
	 * {@link AsyncStateService#isReadyForOtherServices()} is true.
	 * 
	 * @return the dependencies.
	 * @see #getServiceWeakDependencies()
	 */
	def getServiceDependencies : Collection<Class<? extends Service>>

	/** 
	 * Replies the services that must be launched BEFORE launching this service, and that must be stop AFTER stopping this
	 * service.
	 * 
	 * <p>Even if one of the dependencies is a {@link AsyncStateService}, this service will never wait until
	 * {@link AsyncStateService#isReadyForOtherServices()} is true.
	 * 
	 * @return the dependencies.
	 * @see #getServiceDependencies()
	 */
	def getServiceWeakDependencies : Collection<Class<? extends Service>>

}

/** 
 * Abstract implementation of a service that has a priority to be launch/stop.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@Singleton
abstract class AbstractDependentService extends AbstractJanusService implements DependentService {

	def getServiceDependencies : Collection<Class<? extends Service>> {
		Collections::emptyList
	}

	def getServiceWeakDependencies : Collection<Class<? extends Service>> {
		Collections::emptyList
	}

}
