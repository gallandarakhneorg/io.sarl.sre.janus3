/* 
 * $Id$
 * 
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 * 
 * Copyright (C) 2014-2017 the original authors or authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre

import com.google.common.base.Charsets
import java.nio.charset.Charset
import java.util.Properties
import io.janusproject.sre.injection.MinimumPlatformModule
import java.net.URL
import java.io.File
import java.io.FileInputStream

/** 
 * Constants for the Janus platform.
 * 
 * @author $Author: srodriguez$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
final class JanusConfig {

	private new {
	}
	/** 
	 * The default name of the Janus platform Mainly useful for the default logger name.
	 */
	public static val JANUS_DEFAULT_PLATFORM_NAME = "Janus SRE"
	/** 
	 * Name of the property that contains the verbosity level of Janus.
	 * 
	 * @see #VERBOSE_LEVEL_VALUE
	 */
	public static val VERBOSE_LEVEL_NAME = "janus.verbose.level"
	/** 
	 * The default verbosity level of Janus.
	 * 
	 * @see #VERBOSE_LEVEL_NAME
	 */
	public static val VERBOSE_LEVEL_VALUE = "info"
	/** 
	 * Name of the property that contains the flag for showing the Janus logo.
	 * 
	 * @see #JANUS_LOGO_SHOW
	 */
	public static val JANUS_LOGO_SHOW_NAME = "janus.logo.show"
	/** 
	 * The default value of the flag for showing the Janus logo.
	 * 
	 * @see #JANUS_LOGO_SHOW_NAME
	 */
	public static val JANUS_LOGO_SHOW = true
	/** 
	 * Name of the property that contains the identifier of the Janus context.
	 * 
	 * @see #DEFAULT_CONTEXT_ID_VALUE
	 */
	public static val DEFAULT_CONTEXT_ID_NAME = "janus.context.id"
	/** 
	 * The default value for the Janus context identifier.
	 * 
	 * @see #DEFAULT_CONTEXT_ID_NAME
	 */
	public static val DEFAULT_CONTEXT_ID_VALUE = "2c38fb7f-f363-4f6e-877b-110b1f07cc77"
	/** 
	 * Name of the property that contains the identifier for the default space of the Janus context.
	 * 
	 * @see #DEFAULT_SPACE_ID_VALUE
	 */
	public static val DEFAULT_SPACE_ID_NAME = "janus.context.space.id"
	/** 
	 * The default value for the Janus space identifier.
	 * 
	 * @see #DEFAULT_SPACE_ID_NAME
	 */
	public static val DEFAULT_SPACE_ID_VALUE = "7ba8885d-545b-445a-a0e9-b655bc15ebe0"
	/** 
	 * Name of the property that indicates if the ID of the default context must be randomly computed at boot time, or not.
	 * 
	 * @see #DEFAULT_CONTEXT_ID_NAME
	 * @see #RANDOM_DEFAULT_CONTEXT_ID_VALUE
	 */
	public static val RANDOM_DEFAULT_CONTEXT_ID_NAME = "janus.context.id.random"
	/** 
	 * Indicates if the default context id has a random value or not at each boot time.
	 * 
	 * @see #RANDOM_DEFAULT_CONTEXT_ID_NAME
	 */
	public static val RANDOM_DEFAULT_CONTEXT_ID_VALUE = false
	/** 
	 * Name of the property that indicates if the ID of the default context must be computed from the boot agent type, or not.
	 * 
	 * @see #DEFAULT_CONTEXT_ID_NAME
	 * @see #DEFAULT_CONTEXT_ID_VALUE
	 */
	public static val BOOT_DEFAULT_CONTEXT_ID_NAME = "janus.context.id.boot"
	/** 
	 * Indicates if the default context id has a value computed from the boot agent type.
	 * 
	 * @see #BOOT_DEFAULT_CONTEXT_ID_NAME
	 */
	public static val BOOT_DEFAULT_CONTEXT_ID_VALUE = false
	/** 
	 * Name of the property that contains the boolean value for offline/online.
	 */
	public static val OFFLINE = "janus.network.offline"
	/** 
	 * Name of the property that contains the classname of the boot agent.
	 */
	public static val BOOT_AGENT = "janus.boot.agent"
	/** 
	 * Name of the property that contains the identifier of the boot agent.
	 */
	public static val BOOT_AGENT_ID = "janus.boot.agent.id"
	/** 
	 * Name of the property that contains the maximal number of threads in the pool.
	 * 
	 * @see #MAX_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE
	 */
	public static val MAX_NUMBER_OF_THREADS_IN_EXECUTOR_NAME = "janus.executors.threads.max"
	/** 
	 * Indicates the maximal number of threads to keep in the pool.
	 * 
	 * @see #MAX_NUMBER_OF_THREADS_IN_EXECUTOR_NAME
	 */
	public static val MAX_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE = 1024
	/** 
	 * Name of the property that contains the minimal number of threads in the pool.
	 * 
	 * @see #MIN_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE
	 */
	public static val MIN_NUMBER_OF_THREADS_IN_EXECUTOR_NAME = "janus.executors.threads.min"
	/** 
	 * Indicates the minimal number of threads to keep in the pool, even if they are idle.
	 * 
	 * @see #MIN_NUMBER_OF_THREADS_IN_EXECUTOR_NAME
	 */
	public static val MIN_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE = 16;
	/** 
	 * Name of the property that contains the duration for keeping the iddle threads alive (in seconds).
	 * 
	 * @since 2.0.5.0
	 */
	public static val THREAD_KEEP_ALIVE_DURATION_NAME = "janus.executors.threads.keepAliveDuration"
	/** 
	 * Indicates the duration for keeping the iddle threads alive (in seconds).
	 * 
	 * @since 2.0.5.0
	 */
	public static val THREAD_KEEP_ALIVE_DURATION_VALUE = 60
	/** 
	 * Name of the property that contains the numbers of seconds that the kernel is waiting for thread terminations before timeout.
	 * 
	 * @see #KERNEL_THREAD_TIMEOUT_VALUE
	 */
	public static val KERNEL_THREAD_TIMEOUT_NAME = "janus.executors.timeout"
	/** 
	 * Indicates the numbers of seconds that the kernel is waiting for thread terminations before timeout.
	 * 
	 * @see #KERNEL_THREAD_TIMEOUT_NAME
	 */
	public static val KERNEL_THREAD_TIMEOUT_VALUE = 30
	/** 
	 * Name of the property that contains the injection module.
	 * 
	 * @see #INJECTION_MODULE_NAME_VALUE
	 */
	public static val INJECTION_MODULE_NAME = "janus.injection.module" // $NON-NLS-1$
	/** 
	 * The default name of the injection module.
	 * 
	 * @see #INJECTION_MODULE_NAME
	 */
	public static val INJECTION_MODULE_NAME_VALUE = typeof(MinimumPlatformModule).name
	/** 
	 * Name of the property that contains the name of the Janus main program from the external point of view.
	 * 
	 * @see #JANUS_PROGRAM_NAME_VALUE
	 */
	public static val JANUS_PROGRAM_NAME = "janus.programName"

	/** Default value of the property that contains the name of the Janus
	 * main program from the external point of view.
	 * 
	 * @see #JANUS_PROGRAM_NAME
	 */
	public static val JANUS_PROGRAM_NAME_VALUE = "janus"

	/** 
	 * Name of the property for the AES key.
	 */
	public static val AES_KEY = "network.encrypter.aes.key"

	/** 
	 * Name of the property for the classname of the serializer to use.
	 */
	public static val SERIALIZER_CLASSNAME = "network.serializer.class"
	/** 
	 * Name of the property for the classname of the encrypter to use.
	 */
	public static val ENCRYPTER_CLASSNAME = "network.encrypter.class"
	/** 
	 * Name of the property for charset that must be used for string encoding.
	 * 
	 * @see #BYTE_ARRAY_STRING_CHARSET_VALUE
	 */
	public static val BYTE_ARRAY_STRING_CHARSET_NAME = "network.serializer.charset"
	/** 
	 * Name of the property that contains the duration for keeping the empty spaces alive (in seconds).
	 * 
	 * @since 2.0.6.0
	 */
	public static val SPACE_KEEP_ALIVE_DURATION_NAME = "janus.context.space.keepAliveDuration"
	/** 
	 * Indicates the duration for keeping the empty spaces alive (in seconds).
	 * 
	 * @since 2.0.6.0
	 */
	public static val SPACE_KEEP_ALIVE_DURATION_VALUE = 30

	/** 
	 * Charset that should be used for converting String to byte array or byte array to String.
	 * 
	 * <p>This constant was introduced to enforce the values on different platforms.
	 * 
	 * @see #BYTE_ARRAY_STRING_CHARSET_NAME
	 */
	public static val BYTE_ARRAY_STRING_CHARSET_VALUE = Charsets::UTF_8

	static var currentStringEncoding : Charset

	/** 
	 * Replies the default values for the properties supported by Janus config.
	 * 
	 * @param defaultValues filled with the default values supported by the Janus platform.
	 */
	static def getDefaultValues(defaultValues : Properties) {
		val mapping = #{
			AES_KEY -> null,
			BOOT_AGENT -> null,
			BOOT_AGENT_ID -> null,
			BOOT_DEFAULT_CONTEXT_ID_NAME -> BOOT_DEFAULT_CONTEXT_ID_VALUE,
			BYTE_ARRAY_STRING_CHARSET_NAME -> BYTE_ARRAY_STRING_CHARSET_VALUE.name,
			DEFAULT_CONTEXT_ID_NAME -> DEFAULT_CONTEXT_ID_VALUE,
			DEFAULT_SPACE_ID_NAME -> DEFAULT_SPACE_ID_VALUE,
			ENCRYPTER_CLASSNAME -> null,
			INJECTION_MODULE_NAME -> INJECTION_MODULE_NAME_VALUE,
			JANUS_LOGO_SHOW_NAME -> JANUS_LOGO_SHOW,
			JANUS_PROGRAM_NAME -> JANUS_PROGRAM_NAME_VALUE,
			KERNEL_THREAD_TIMEOUT_NAME -> KERNEL_THREAD_TIMEOUT_VALUE,
			MAX_NUMBER_OF_THREADS_IN_EXECUTOR_NAME -> MAX_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE,
			MIN_NUMBER_OF_THREADS_IN_EXECUTOR_NAME -> MIN_NUMBER_OF_THREADS_IN_EXECUTOR_VALUE,
			OFFLINE -> Boolean::FALSE,
			RANDOM_DEFAULT_CONTEXT_ID_NAME -> RANDOM_DEFAULT_CONTEXT_ID_VALUE,
			SERIALIZER_CLASSNAME -> null,
			SPACE_KEEP_ALIVE_DURATION_NAME -> SPACE_KEEP_ALIVE_DURATION_VALUE,
			THREAD_KEEP_ALIVE_DURATION_NAME -> THREAD_KEEP_ALIVE_DURATION_VALUE,
			VERBOSE_LEVEL_NAME -> VERBOSE_LEVEL_VALUE
		}
		for (entry : mapping.entrySet) {
			var value = if(entry.value === null) "" else entry.value.toString
			defaultValues.put(entry.key, value)
		}
	}
	/** 
	 * Replies the value of the system property.
	 * 
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemProperty(name : String, defaultValue : String = null) : String {
		var value = System::getProperty(name, null)
		if (value !== null) {
			return value
		}
		value = System::getenv(name)
		if (value !== null) {
			return value
		}
		return defaultValue
	}
	/** 
	 * Replies the value of the boolean system property.
	 * 
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsBoolean(name : String, defaultValue : boolean = false) : boolean {
		var value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				return Boolean::parseBoolean(value)
			} catch (exception : Throwable) {
				//
			}
		}
		return defaultValue
	}
	/** 
	 * Replies the value of the integer system property.
	 * 
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsInteger(name : String, defaultValue : int = 0) : int {
		val value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				return Integer::parseInt(value)
			} catch (exception : Throwable) {
				//
			}
		}
		return defaultValue
	}
	/** 
	 * Replies the value of the single precision floating point value system property.
	 * 
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsFloat(name : String, defaultValue : float = 0.0f) : float {
		val value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				return Float::parseFloat(value)
			} catch (exception : Throwable) {
				//
			}
		}
		return defaultValue
	}
	/** 
	 * Replies the value of the type system property.
	 * 
	 * @param <S> type to reply.
	 * @param type type to reply.
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsClass(type : Class<S>, name : String,
		defaultValue : Class<? extends S> = null) : Class<? extends S> with S {
		val value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				val typeInstance = Class::forName(value)
				if (typeInstance !== null) {
					return typeInstance.asSubclass(type)
				}
			} catch (exception : Throwable) {
				//
			}
		}
		return defaultValue
	}

	/**
	 * Replies the value of the type system property.
	 *
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsClass(name : String, defaultValue : Class<?> = null) : Class<?> {
		val value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				val typeInstance = Class::forName(value)
				if (typeInstance !== null) {
					return typeInstance
				}
			} catch (exception : Throwable) {
				//
			}
		}
		return defaultValue
	}
	
	/** 
	 * Replies the value of the type system property.
	 * 
	 * @param <S> type to reply.
	 * @param type type to reply.
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsClass(type : Class<S>, name : String,
		defaultValue : String) : Class<? extends S> with S {

		val value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				val typeInstance = Class::forName(value)
				if (typeInstance !== null) {
					return typeInstance.asSubclass(type)
				}
			} catch (exception : Throwable) {
				//
			}
		}
		if (defaultValue !== null) {
			try {
				val typeInstance = Class::forName(defaultValue)
				if (typeInstance !== null) {
					return typeInstance.asSubclass(type)
				}
			} catch (exception : Throwable) {
				//
			}
		}
		return null
	 }
	/** 
	 * Replies the value of the type system property.
	 * 
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsClass(name : String, defaultValue : String) : Class<?> {
		val value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				val typeInstance = Class::forName(value)
				if (typeInstance !== null) {
					return typeInstance
				}
			} catch (exception : Throwable) {
				//
			}
		}
		if (defaultValue !== null) {
			try {
				val typeInstance = Class::forName(defaultValue)
				if (typeInstance !== null) {
					return typeInstance
				}
			} catch (exception : Throwable) {
				//
			}
		}
		return null
	}

	/** 
	 * Replies the value of the integer system property.
	 * 
	 * @param <S> type of the enumeration to read.
	 * @param type type of the enumeration.
	 * @param name name of the property.
	 * @param defaultValue value to reply if the these is no property found
	 * @return the value, or defaultValue.
	 */
	static def getSystemPropertyAsEnum(type : Class<S>, name : String,
		defaultValue : S = null) : S with S extends Enum<S> {
		val value = getSystemProperty(name, null)
		if (value !== null) {
			try {
				val enumeration = Enum::valueOf(type, value)
				if (enumeration !== null) {
					return enumeration
				}
			} catch (exception : Throwable) {
				//
			}
			try {
				val ordinal = Integer::parseInt(value)
				val enumeration = type.enumConstants.get(ordinal)
				if (enumeration !== null) {
					return enumeration
				}
			} catch (exception : Throwable) {
			 //
			 }
		 }
		 return defaultValue
	 }

	/** 
	 * Replies the charset that must be used for encoding the strings.
	 * 
	 * @return the encoding charset.
	 */
	static def getStringEncodingCharset : Charset {
		if (currentStringEncoding === null) {
			val value = JanusConfig::getSystemProperty(BYTE_ARRAY_STRING_CHARSET_NAME, null)
			if (value !== null) {
				try {
					currentStringEncoding = Charset::forName(value)
					if (currentStringEncoding === null) {
						currentStringEncoding = BYTE_ARRAY_STRING_CHARSET_VALUE
					}
				} catch (exception : Throwable) {
					currentStringEncoding = BYTE_ARRAY_STRING_CHARSET_VALUE
				}
			} else {
				currentStringEncoding = BYTE_ARRAY_STRING_CHARSET_VALUE
			}
		}
		return currentStringEncoding
	}
	
	/** 
	 * Set the system property. This function is an helper for setting a system property usually accessible with {@link System}.
	 * 
	 * <p>This function must be called before launching the Janus platform.
	 * 
	 * @param name the name of the property.
	 * @param value the value of the property. If the value is <code>null</code> or empty, the property is removed.
	 * @since 2.0.2.0
	 * @see System#setProperty(String, String)
	 * @see System#getProperties()
	 */
	static def setProperty(name : String, value : String) {
		if (!name.nullOrEmpty) {
			if (value.nullOrEmpty) {
				System::clearProperty(name)
			} else {
				System::setProperty(name, value)
			}
		}
	}

	/** 
	 * Set the system property from the content of the file with the given URL. This function is an helper for setting the system
	 * properties usually accessible with {@link System}.
	 * 
	 * @param propertyFile the URL from which a stream is opened.
	 * @throws IOException - if the stream cannot be read.
	 * @since 2.0.2.0
	 * @see System#getProperties()
	 * @see Properties#load(InputStream)
	 */
	static def setPropertiesFrom(propertyFile : URL) {
		val systemProperties = System::getProperties
		val stream = propertyFile.openStream
		try {
			systemProperties.load(stream)
		} finally {
			stream.close
		}
	}
	/** 
	 * Set the system property from the content of the file with the given URL. This function is an helper for setting the system
	 * properties usually accessible with {@link System}.
	 * 
	 * @param propertyFile the URL from which a stream is opened.
	 * @throws IOException - if the stream cannot be read.
	 * @since 2.0.2.0
	 * @see System#getProperties()
	 * @see Properties#load(InputStream)
	 */
	static def setPropertiesFrom(propertyFile : File) {
		val systemProperties = System::getProperties
		val stream = new FileInputStream(propertyFile)
		try {
			systemProperties.load(stream)
		} finally {
			stream.close
		}
	}

}
