/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.injection

import com.google.common.util.concurrent.Service
import com.google.inject.AbstractModule
import com.google.inject.multibindings.Multibinder
import io.janusproject.sre.services.context.ContextService
import io.janusproject.sre.services.executor.ExecutorService
import io.janusproject.sre.services.infrastructure.InfrastructureService
import io.janusproject.sre.services.lifecycle.LifecycleService
import io.janusproject.sre.services.logging.LoggingService
import io.janusproject.sre.services.time.TimeService
import java.util.logging.Logger
import com.google.inject.Module

/** 
 * Abstract module for configuring the Janus platform.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
public abstract class AbstractPlatformModule extends AbstractModule {

	private def requireServiceBinding(type : Class<? extends Service>, serviceSetBinder : Multibinder<Service>) {
		type.requireBinding
		serviceSetBinder.addBinding.to(type)
	}

	/**
	 * Create an module's instance of the given type and install it.
	 *
	 * @param type the type of the module to install 
	 */
	protected def install(type : Class<? extends Module>) {
		assert type !== null
		type.newInstance.install
	}

	protected final override configure {
		configurePlatform
		// Check if all the services are binded
		val serviceSetBinder = Multibinder::newSetBinder(binder, typeof(Service))
		//
		ContextService.requireServiceBinding(serviceSetBinder)
		ExecutorService.requireServiceBinding(serviceSetBinder)
		InfrastructureService.requireServiceBinding(serviceSetBinder)
		LifecycleService.requireServiceBinding(serviceSetBinder)
		Logger.requireBinding
		LoggingService.requireServiceBinding(serviceSetBinder)
		TimeService.requireServiceBinding(serviceSetBinder)
	}

	protected abstract def configurePlatform

}
