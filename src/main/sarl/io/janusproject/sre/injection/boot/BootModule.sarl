/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2018 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.injection.boot

import com.google.inject.AbstractModule
import com.google.inject.Provides
import io.janusproject.sre.JanusConfig
import java.util.UUID
import javax.inject.Named
import com.google.inject.Key
import com.google.inject.name.Names
import javax.inject.Singleton

/** 
 * The module configures the minimum requirements for the system variables.
 * 
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
public class BootModule extends AbstractModule {

	protected override configure {
        // Bind the system properties.
        for (entry : System::getProperties.entrySet) {
            var name = entry.key.toString
            Key::get(typeof(String), Names::named(name)).bind.toInstance(entry.value.toString)
        }
	}

	/**
     * Create a context identifier.
     *
     * @return the contextID
     */
	@Provides
    @Named(JanusConfig::DEFAULT_CONTEXT_ID_NAME)
    @Singleton
    static def getContextID : UUID {
    	var str : String = JanusConfig::getSystemProperty(JanusConfig::DEFAULT_CONTEXT_ID_NAME, null)
    	if (str.nullOrEmpty) {
			var value = JanusConfig::getSystemPropertyAsBoolean(JanusConfig::BOOT_DEFAULT_CONTEXT_ID_NAME,
				JanusConfig::BOOT_DEFAULT_CONTEXT_ID_VALUE)
			if (value) {
				val bootClassname = JanusConfig::getSystemProperty(JanusConfig::BOOT_AGENT, null)
				assert !bootClassname.nullOrEmpty, "The value of the env variable janus.boot.agent should not be empty"
				if (!bootClassname.nullOrEmpty) {
					str = UUID::nameUUIDFromBytes(bootClassname.bytes).toString
				}
			} else {
				// Random
				value = JanusConfig::getSystemPropertyAsBoolean(JanusConfig::RANDOM_DEFAULT_CONTEXT_ID_NAME,
					JanusConfig.RANDOM_DEFAULT_CONTEXT_ID_VALUE)
				if (value) {
					str = UUID::randomUUID.toString
				}
			}
    	}

		if (str.nullOrEmpty) {
			str = JanusConfig::DEFAULT_CONTEXT_ID_VALUE
		}
		
		var id = str.parseUUID

		// Force the global value of the property to prevent to re-generate the UUID at the next call.
		System::setProperty(JanusConfig::DEFAULT_CONTEXT_ID_NAME, id.toString)

		return id
	}

    /**
     * Construct a space identifier.
     *
     * @return the spaceID
     */
    @Provides
    @Named(JanusConfig::DEFAULT_SPACE_ID_NAME)
	@Singleton
	static def getSpaceID : UUID {
        val value = JanusConfig::getSystemProperty(JanusConfig::DEFAULT_SPACE_ID_NAME, JanusConfig::DEFAULT_SPACE_ID_VALUE)
        value.parseUUID
	}

	private static def parseUUID(value : String) : UUID {
		assert !value.nullOrEmpty
		try {
			return UUID::fromString(value)
		} catch (exception : Throwable) {
			return UUID::nameUUIDFromBytes(value.bytes)
		}
	}
	
}
