/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2017 the original authors or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.janusproject.sre.skills

import com.google.common.base.Throwables
import io.janusproject.sre.services.logging.LoggerCreator
import io.janusproject.sre.services.logging.LoggingService
import io.sarl.core.Logging
import java.text.MessageFormat
import java.util.logging.Level
import java.util.logging.LogRecord
import java.util.logging.Logger
import javax.inject.Inject

import static io.janusproject.sre.skills.LoggingSkill.BinFlags.*
import java.util.function.Supplier

/** 
 * Janus implementation of SARL's {@link Logging} built-in capacity.
 * 
 * @author $Author: srodriguez$
 * @author $Author: ngaud$
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
skill LoggingSkill extends JanusBuiltin implements Logging {

	private static class BinFlags {
		static var installationOrder = -1
	}

	override getInstallationOrder : int {
		if (BinFlags::installationOrder < 0) {
			BinFlags::installationOrder = BuiltinCapacitiesOrder::computeInstallationOrder(this)
		}
		BinFlags::installationOrder
	}

	var logService : LoggingService

	var loggerInstance : Logger
	
	/** Set the backend logging service.
	 */
	@Inject
	def setLoggingService(service : LoggingService) {
		this.logService = service
	}

	
	def getLogger : Logger {
		if (this.loggerInstance === null) {
			val agentId = owner.ID
			val loggerName = MessageFormat::format(Messages::LoggingSkill_0, agentId)
			this.loggerInstance = this.logService.createAgentLogger(loggerName)
		}
		this.loggerInstance
	}

	def setLoggingName(name : String) {
		var loggingName = name
		if (loggingName.nullOrEmpty) {
			loggingName = MessageFormat::format(Messages::LoggingSkill_0, owner.ID)
		}
		val level = this.logger.level
		this.loggerInstance = this.logService.createAgentLogger(loggingName)
		this.logger.level = level
	}

	@Deprecated
	def println(message : Object) {
		info(message)
	}

	def error(message : Object, exception : Throwable, parameters : Object*) {
		if (this.logger.isLoggable(Level::SEVERE) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				if (exception !== null) {
					val lr = new LogRecord(Level::SEVERE, loggeableMessage)
			        lr.parameters = parameters
			        lr.thrown = Throwables::getRootCause(exception)
					this.logger.log(lr)
				} else {
					this.logger.log(Level::SEVERE, loggeableMessage, parameters)
				}
			}
		}
	}

	def error(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::SEVERE) && messageProvider !== null) {
			this.logger.log(Level::SEVERE, messageProvider)
		}
	}

	def warning(message : Object, exception : Throwable, parameters : Object*) {
		if (this.logger.isLoggable(Level::WARNING) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				if (exception !== null) {
					val lr = new LogRecord(Level::WARNING, loggeableMessage)
			        lr.parameters = parameters
			        lr.thrown = exception
					this.logger.log(lr)
				} else {
					this.logger.log(Level::WARNING, loggeableMessage, parameters)
				}
			}
		}
	}

	def warning(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::WARNING) && messageProvider !== null) {
			this.logger.log(Level::WARNING, messageProvider)
		}
	}

	def info(message : Object, parameters : Object*) {
		if (this.logger.isLoggable(Level::INFO) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				this.logger.log(Level::INFO, loggeableMessage, parameters)
			}
		}
	}

	def info(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::INFO) && messageProvider !== null) {
			this.logger.log(Level::INFO, messageProvider)
		}
	}

	def debug(message : Object, parameters : Object*) {
		if (this.logger.isLoggable(Level::CONFIG) && message !== null) {
			val loggeableMessage = message.toString
			if (!loggeableMessage.nullOrEmpty) {
				this.logger.log(Level::CONFIG, loggeableMessage, parameters)
			}
		}
	}

	def debug(messageProvider : Supplier<String>) {
		if (this.logger.isLoggable(Level::CONFIG) && messageProvider !== null) {
			this.logger.log(Level::CONFIG, messageProvider)
		}
	}

	def isErrorLogEnabled : boolean {
		this.logger.isLoggable(Level::SEVERE)
	}

	def isWarningLogEnabled : boolean {
		this.logger.isLoggable(Level::WARNING)
	}

	def isInfoLogEnabled : boolean {
		this.logger.isLoggable(Level::INFO)
	}

	def isDebugLogEnabled : boolean {
		this.logger.isLoggable(Level::CONFIG)
	}

	def getLogLevel : int {
		LoggerCreator::toInt(this.logger.level)
	}

	def setLogLevel(level : int) {
		this.logger.level = LoggerCreator::fromInt(level)
	}
		
}
